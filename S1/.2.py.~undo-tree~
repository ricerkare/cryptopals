(undo-tree-save-format-version . 1)
"8dbf07f37a7018f79452e659bddb4bb287c3e24a"
[nil nil nil nil (26106 18505 845068 957000) 0 nil]
([nil nil ((nil rear-nonsticky nil 283 . 284) (nil fontified nil 282 . 284) (nil fontified nil 278 . 282) (nil fontified nil 277 . 278) (nil fontified nil 272 . 277) (nil fontified nil 269 . 272) (nil fontified nil 264 . 269) (nil fontified nil 246 . 264) (nil fontified nil 241 . 246) (nil fontified nil 234 . 241) (nil fontified nil 231 . 234) (nil fontified nil 230 . 231) (nil fontified nil 225 . 230) (nil fontified nil 224 . 225) (nil fontified nil 222 . 224) (nil fontified nil 219 . 222) (nil fontified nil 216 . 219) (nil fontified nil 204 . 216) (nil fontified nil 201 . 204) (nil fontified nil 194 . 201) (nil fontified nil 192 . 194) (nil fontified nil 191 . 192) (nil fontified nil 185 . 191) (nil fontified nil 177 . 185) (nil fontified nil 175 . 177) (nil fontified nil 172 . 175) (nil fontified nil 169 . 172) (nil fontified nil 165 . 169) (nil fontified nil 162 . 165) (nil fontified nil 156 . 162) (nil fontified nil 154 . 156) (nil fontified nil 151 . 154) (nil fontified nil 148 . 151) (nil fontified nil 144 . 148) (nil fontified nil 141 . 144) (nil fontified nil 139 . 141) (nil fontified nil 138 . 139) (nil fontified nil 137 . 138) (nil fontified nil 136 . 137) (nil fontified nil 124 . 136) (nil fontified nil 120 . 124) (nil fontified nil 119 . 120) (nil fontified nil 116 . 119) (nil fontified nil 114 . 116) (nil fontified nil 109 . 114) (nil fontified nil 101 . 109) (nil fontified nil 63 . 101) (nil fontified nil 62 . 63) (nil fontified nil 61 . 62) (nil fontified nil 59 . 61) (nil fontified nil 54 . 59) (nil fontified nil 46 . 54) (nil fontified nil 8 . 46) (nil fontified nil 7 . 8) (nil fontified nil 6 . 7) (nil fontified nil 5 . 6) (nil fontified nil 2 . 5) (nil fontified nil 1 . 2) (1 . 284) (t . -1)) nil (26106 18505 845065 232000) 0 nil])
([nil nil ((#("Q" 0 1 (fontified t face font-lock-comment-face)) . -2) (undo-tree-id0 . -1) (#("2" 0 1 (fontified t face font-lock-comment-face)) . -3) (undo-tree-id1 . -1) 4) nil (26106 18505 845053 309000) 0 nil])
([nil nil ((2 . 14)) nil (26106 18505 845039 697000) 0 nil])
([nil nil ((14 . 15)) nil (26106 18505 845038 860000) 0 nil])
([nil nil ((15 . 17)) nil (26106 18505 845037 541000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25 . 26) (nil fontified nil 17 . 26) (17 . 26)) nil (26106 18505 845033 393000) 0 nil])
([nil nil ((26 . 27) (t 26106 18505 990484 201000)) nil (26106 18516 499980 208000) 0 nil])
([nil nil ((27 . 29)) nil (26106 18516 499977 655000) 0 nil])
([nil nil ((nil rear-nonsticky nil 116 . 117) (nil fontified nil 29 . 117) (29 . 117)) nil (26106 18516 499971 715000) 0 nil])
([nil nil ((117 . 138) (t 26106 18516 677122 829000)) nil (26106 18525 159690 23000) 0 nil])
([nil nil ((138 . 140)) nil (26106 18525 159688 257000) 0 nil])
([nil nil ((95 . 97) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 95) (94 . 95) (140 . 141)) nil (26106 18525 159683 448000) 0 nil])
([nil nil ((#("ad  " 0 4 (fontified t face font-lock-comment-face)) . -139) (undo-tree-id12 . -3) (undo-tree-id13 . -4) 143 (t 26106 18525 312862 769000)) nil (26106 18527 992361 713000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -135) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 139) nil (26106 18527 992358 754000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -131) (undo-tree-id8 . -4) (undo-tree-id9 . -4) 135) nil (26106 18527 992355 946000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -127) (undo-tree-id6 . -4) (undo-tree-id7 . -4) 131) nil (26106 18527 992353 7000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -123) (undo-tree-id4 . -4) (undo-tree-id5 . -4) 127) nil (26106 18527 992349 562000) 0 nil])
([nil nil ((#("as " 0 3 (fontified t face font-lock-comment-face)) . -120) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 123) nil (26106 18527 992343 834000) 0 nil])
([nil nil ((400 . 403) (t 26106 18528 114784 167000)) nil (26106 18636 763086 904000) 0 nil])
([nil nil ((403 . 424)) nil (26106 18636 763085 769000) 0 nil])
([nil nil ((424 . 445)) nil (26106 18636 763085 76000) 0 nil])
([nil nil ((445 . 466)) nil (26106 18636 763084 259000) 0 nil])
([nil nil ((466 . 471)) nil (26106 18636 763083 522000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 471) (470 . 471) (471 . 479)) nil (26106 18636 763082 550000) 0 nil])
([nil nil ((479 . 500)) nil (26106 18636 763081 258000) 0 nil])
([nil nil ((500 . 501)) nil (26106 18636 763080 285000) 0 nil])
([nil nil ((#("
d d d d d d d d d d d d d d dioj sdoj asdpoifj apdsoijf apdfji apodsij
fpaosdj faodj fpajsd fpoasjd f" 0 1 (fontified t) 1 39 (fontified t) 39 72 (fontified t) 72 102 (fontified t)) . 399) (undo-tree-id0 . -102) (undo-tree-id1 . -1) (undo-tree-id2 . -72) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -72) (undo-tree-id6 . -102) (undo-tree-id7 . -102)) nil (26106 18636 763077 909000) 0 nil])
([nil nil ((399 . 400)) nil (26106 18636 763055 930000) 0 nil])
([nil nil ((399 . 400) (t 26106 18636 952369 646000)) nil (26106 18639 404330 447000) 0 nil])
([nil nil ((123 . 124) (t 26106 18639 559364 869000)) nil (26106 18918 484249 543000) 0 nil])
([nil nil ((125 . 128)) nil (26106 18918 484244 542000) 0 nil])
([nil nil ((183 . 187) (t 26106 18918 616890 240000)) nil (26106 18923 947408 644000) 0 nil])
([nil nil ((182 . 183) (t 26106 18924 108355 873000)) nil (26106 19021 244722 98000) 0 nil])
([nil nil ((410 . 430) (t 26106 19021 398441 375000)) nil (26106 19053 554764 617000) 0 nil])
([nil nil ((#("aeofijapeifjpaeofij " 0 20 (fontified t)) . -410) (undo-tree-id21 . -20) 430) nil (26106 19053 554763 464000) 0 nil])
([nil nil ((410 . 418)) nil (26106 19053 554761 817000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -416) (undo-tree-id19 . -1) (#("0" 0 1 (fontified t)) . -417) (undo-tree-id20 . -1) 418) nil (26106 19053 554760 557000) 0 nil])
([nil nil ((416 . 417)) nil (26106 19053 554757 905000) 0 nil])
([nil nil ((417 . 418)) nil (26106 19053 554757 146000) 0 nil])
([nil nil ((418 . 421)) nil (26106 19053 554756 450000) 0 nil])
([nil nil ((421 . 438)) nil (26106 19053 554755 475000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -437) (undo-tree-id16 . -1) (undo-tree-id17 . 1) (undo-tree-id18 . -1) 438) nil (26106 19053 554754 315000) 0 nil])
([nil nil ((437 . 440)) nil (26106 19053 554750 980000) 0 nil])
([nil nil ((440 . 445)) nil (26106 19053 554750 96000) 0 nil])
([nil nil ((445 . 447)) nil (26106 19053 554749 231000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -445) (undo-tree-id14 . -1) (#("e" 0 1 (fontified t)) . -446) (undo-tree-id15 . -1) 447) nil (26106 19053 554747 900000) 0 nil])
([nil nil ((445 . 454)) nil (26106 19053 554745 142000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . -447) (undo-tree-id13 . -7) 454) nil (26106 19053 554744 237000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -445) (undo-tree-id11 . -2) (undo-tree-id12 . -2) 447) nil (26106 19053 554742 181000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -441) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) 445) nil (26106 19053 554739 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -440) (undo-tree-id1 . -1) (undo-tree-id2 . 1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 441) nil (26106 19053 554734 290000) 0 nil])
([nil nil ((440 . 445)) nil (26106 19053 554727 848000) 0 nil])
([nil nil ((445 . 453)) nil (26106 19053 554726 966000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -452) (undo-tree-id0 . -1) 453) nil (26106 19053 554725 388000) 0 nil])
([nil nil ((452 . 456)) nil (26106 19053 554713 582000) 0 nil])
([nil nil ((456 . 457)) nil (26106 19053 554709 301000) 0 nil])
([nil nil ((457 . 458) (t 26106 19053 754356 54000)) nil (26106 19183 711998 891000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -457) (undo-tree-id27 . -1) 458) nil (26106 19186 29045 41000) 0 nil])
([nil nil ((1 . 458) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination. 

B =   \"1c0111001f010100061a024b53535009181c\".decode(\"hex\")
C =    \"686974207468652062756c6c277320657965\".decode(\"hex\")
def xorz(X, Y):
    M,N=[ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i]^N[i]) for i in range(len(X))])
print(xorz(B,C).encode('hex'))
print(\"\\n\")

fuck =0
def xoasfasd(x, i )  :
    return    0
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 26 (fontified t face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-delimiter-face) 28 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 120 (fontified t face font-lock-comment-face) 120 121 (fontified t) 121 122 (fontified t face font-lock-variable-name-face) 122 127 (fontified t) 127 165 (fontified t face font-lock-string-face) 165 173 (fontified t) 173 178 (fontified t face font-lock-string-face) 178 180 (fontified t) 180 181 (fontified t face font-lock-variable-name-face) 181 182 (fontified t) 182 187 (fontified t) 187 225 (fontified t face font-lock-string-face) 225 233 (fontified t) 233 238 (fontified t face font-lock-string-face) 238 240 (fontified t) 240 243 (fontified t face font-lock-keyword-face) 243 244 (fontified t) 244 248 (fontified t face font-lock-function-name-face) 248 260 (fontified t) 260 261 (fontified t face font-lock-variable-name-face) 261 262 (fontified t) 262 263 (fontified t face font-lock-variable-name-face) 263 265 (fontified t) 265 268 (fontified t face font-lock-builtin-face) 268 272 (fontified t) 272 275 (fontified t face font-lock-keyword-face) 275 278 (fontified t) 278 280 (fontified t face font-lock-keyword-face) 280 286 (fontified t) 286 289 (fontified t face font-lock-builtin-face) 289 293 (fontified t) 293 296 (fontified t face font-lock-keyword-face) 296 299 (fontified t) 299 301 (fontified t face font-lock-keyword-face) 301 309 (fontified t) 309 315 (fontified t face font-lock-keyword-face) 315 316 (fontified t) 316 318 (fontified t face font-lock-string-face) 318 325 (fontified t) 325 328 (fontified t face font-lock-builtin-face) 328 340 (fontified t) 340 343 (fontified t face font-lock-keyword-face) 343 346 (fontified t) 346 348 (fontified t face font-lock-keyword-face) 348 349 (fontified t) 349 354 (fontified t face font-lock-builtin-face) 354 355 (fontified t) 355 358 (fontified t face font-lock-builtin-face) 358 365 (fontified t) 365 370 (fontified t face font-lock-builtin-face) 370 388 (fontified t) 388 393 (fontified t face font-lock-string-face) 393 396 (fontified t) 396 401 (fontified t face font-lock-builtin-face) 401 402 (fontified t) 402 406 (fontified t face font-lock-string-face) 406 409 (fontified t) 409 413 (fontified t face font-lock-variable-name-face) 413 417 (fontified t) 417 420 (fontified t face font-lock-keyword-face) 420 421 (fontified t) 421 429 (fontified t face font-lock-function-name-face) 429 440 (fontified t) 440 444 (fontified t) 444 450 (fontified t face font-lock-keyword-face) 450 456 (fontified t)) . 1) (undo-tree-id30 . -184) (undo-tree-id31 . -184) (undo-tree-id32 . -456) (undo-tree-id33 . -456) (undo-tree-id34 . -456) (undo-tree-id35 . -121) (undo-tree-id36 . -121) (undo-tree-id37 . -127) (undo-tree-id38 . -121) (undo-tree-id39 . -121) (undo-tree-id40 . -127) (undo-tree-id41 . -180) (undo-tree-id42 . -180) (undo-tree-id43 . -187) (undo-tree-id44 . -180) (undo-tree-id45 . -180) (undo-tree-id46 . -187) (undo-tree-id47 . -309) (undo-tree-id48 . -309) (undo-tree-id49 . -365) (undo-tree-id50 . -365) (undo-tree-id51 . -396) (undo-tree-id52 . -396)) ((1 . 457) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

B = \"1c0111001f010100061a024b53535009181c\".decode(\"hex\")
C = \"686974207468652062756c6c277320657965\".decode(\"hex\")


def xorz(X, Y):
    M, N = [ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i] ^ N[i]) for i in range(len(X))])


print(xorz(B, C).encode(\"hex\"))
print(\"\\n\")

fuck = 0


def xoasfasd(x, i):
    return 0
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 26 (fontified t face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-delimiter-face) 28 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 119 (fontified t face font-lock-comment-face) 119 120 (fontified t) 120 121 (fontified t face font-lock-variable-name-face) 121 124 (fontified t) 124 162 (fontified t face font-lock-string-face) 162 170 (fontified t) 170 175 (fontified t face font-lock-string-face) 175 177 (fontified t) 177 178 (fontified t face font-lock-variable-name-face) 178 181 (fontified t) 181 219 (fontified t face font-lock-string-face) 219 227 (fontified t) 227 232 (fontified t face font-lock-string-face) 232 236 (fontified t) 236 239 (fontified t face font-lock-keyword-face) 239 240 (fontified t) 240 244 (fontified t face font-lock-function-name-face) 244 256 (fontified t) 256 257 (fontified t face font-lock-variable-name-face) 257 259 (fontified t) 259 260 (fontified t face font-lock-variable-name-face) 260 264 (fontified t) 264 267 (fontified t face font-lock-builtin-face) 267 271 (fontified t) 271 274 (fontified t face font-lock-keyword-face) 274 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 285 (fontified t) 285 288 (fontified t face font-lock-builtin-face) 288 292 (fontified t) 292 295 (fontified t face font-lock-keyword-face) 295 298 (fontified t) 298 300 (fontified t face font-lock-keyword-face) 300 308 (fontified t) 308 314 (fontified t face font-lock-keyword-face) 314 315 (fontified t) 315 317 (fontified t face font-lock-string-face) 317 324 (fontified t) 324 327 (fontified t face font-lock-builtin-face) 327 341 (fontified t) 341 344 (fontified t face font-lock-keyword-face) 344 347 (fontified t) 347 349 (fontified t face font-lock-keyword-face) 349 350 (fontified t) 350 355 (fontified t face font-lock-builtin-face) 355 356 (fontified t) 356 359 (fontified t face font-lock-builtin-face) 359 368 (fontified t) 368 373 (fontified t face font-lock-builtin-face) 373 392 (fontified t) 392 397 (fontified t face font-lock-string-face) 397 400 (fontified t) 400 405 (fontified t face font-lock-builtin-face) 405 406 (fontified t) 406 410 (fontified t face font-lock-string-face) 410 413 (fontified t) 413 417 (fontified t face font-lock-variable-name-face) 417 424 (fontified t) 424 427 (fontified t face font-lock-keyword-face) 427 428 (fontified t) 428 436 (fontified t face font-lock-function-name-face) 436 448 (fontified t) 448 454 (fontified t face font-lock-keyword-face) 454 457 (fontified t)) . 1) (undo-tree-id28 . -456) (undo-tree-id29 . -444) (t 26106 19183 852940 919000)) (26106 19187 399425 939000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -423) (undo-tree-id58 . -1) 424 (t 26106 19183 852940 919000)) nil (26106 19203 124735 592000) 0 nil])
([nil nil ((#("
def xoasfasd(x, i):
    return 0
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 13 (fontified t face font-lock-function-name-face) 13 25 (fontified t) 25 31 (fontified t face font-lock-keyword-face) 31 34 (fontified t)) . -423) (undo-tree-id55 . -34) (undo-tree-id56 . -34) (undo-tree-id57 . -34) 457) nil (26106 19203 124731 183000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t face font-lock-function-name-face)) . -244) (undo-tree-id54 . -1) 245) nil (26106 19203 124724 174000) 0 nil])
([nil current ((#("z" 0 1 (fontified t)) . -377) (undo-tree-id53 . -1) 378) nil (26106 19203 124716 400000) 0 nil])
nil
