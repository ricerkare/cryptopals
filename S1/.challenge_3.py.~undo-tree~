(undo-tree-save-format-version . 1)
"70b3ae204564f1fc205fd1e1e13cb838964fa67d"
[nil nil nil nil (26106 36310 682157 639000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1294 . 1295) (nil fontified nil 1275 . 1295) (nil fontified nil 1265 . 1275) (nil fontified nil 1243 . 1265) (nil fontified nil 1233 . 1243) (nil fontified nil 1226 . 1233) (nil fontified nil 1221 . 1226) (nil fontified nil 1195 . 1221) (nil fontified nil 1193 . 1195) (nil fontified nil 1185 . 1193) (nil fontified nil 1183 . 1185) (nil fontified nil 1180 . 1183) (nil fontified nil 1177 . 1180) (nil fontified nil 1161 . 1177) (nil fontified nil 1158 . 1161) (nil fontified nil 1149 . 1158) (nil fontified nil 1143 . 1149) (nil fontified nil 1138 . 1143) (nil fontified nil 1133 . 1138) (nil fontified nil 1109 . 1133) (nil fontified nil 1104 . 1109) (nil fontified nil 1084 . 1104) (nil fontified nil 1062 . 1084) (nil fontified nil 1059 . 1062) (nil fontified nil 1057 . 1059) (nil fontified nil 989 . 1057) (nil fontified nil 986 . 989) (nil fontified nil 976 . 986) (nil fontified nil 974 . 976) (nil fontified nil 971 . 974) (nil fontified nil 968 . 971) (nil fontified nil 941 . 968) (nil fontified nil 939 . 941) (nil fontified nil 926 . 939) (nil fontified nil 924 . 926) (nil fontified nil 910 . 924) (nil fontified nil 907 . 910) (nil fontified nil 904 . 907) (nil fontified nil 901 . 904) (nil fontified nil 889 . 901) (nil fontified nil 887 . 889) (nil fontified nil 874 . 887) (nil fontified nil 871 . 874) (nil fontified nil 865 . 871) (nil fontified nil 862 . 865) (nil fontified nil 859 . 862) (nil fontified nil 856 . 859) (nil fontified nil 843 . 856) (nil fontified nil 841 . 843) (nil fontified nil 819 . 841) (nil fontified nil 817 . 819) (nil fontified nil 814 . 817) (nil fontified nil 811 . 814) (nil fontified nil 795 . 811) (nil fontified nil 772 . 795) (nil fontified nil 771 . 772) (nil fontified nil 764 . 771) (nil fontified nil 754 . 764) (nil fontified nil 753 . 754) (nil fontified nil 750 . 753) (nil fontified nil 728 . 750) (nil fontified nil 725 . 728) (nil fontified nil 706 . 725) (nil fontified nil 703 . 706) (nil fontified nil 695 . 703) (nil fontified nil 692 . 695) (nil fontified nil 691 . 692) (nil fontified nil 689 . 691) (nil fontified nil 677 . 689) (nil fontified nil 675 . 677) (nil fontified nil 672 . 675) (nil fontified nil 669 . 672) (nil fontified nil 663 . 669) (nil fontified nil 658 . 663) (nil fontified nil 657 . 658) (nil fontified nil 655 . 657) (nil fontified nil 652 . 655) (nil fontified nil 649 . 652) (nil fontified nil 646 . 649) (nil fontified nil 642 . 646) (nil fontified nil 615 . 642) (nil fontified nil 611 . 615) (nil fontified nil 596 . 611) (nil fontified nil 572 . 596) (nil fontified nil 571 . 572) (nil fontified nil 567 . 571) (nil fontified nil 566 . 567) (nil fontified nil 564 . 566) (nil fontified nil 561 . 564) (nil fontified nil 558 . 561) (nil fontified nil 545 . 558) (nil fontified nil 527 . 545) (nil fontified nil 514 . 527) (nil fontified nil 508 . 514) (nil fontified nil 506 . 508) (nil fontified nil 495 . 506) (nil fontified nil 494 . 495) (nil fontified nil 358 . 494) (nil fontified nil 357 . 358) (nil fontified nil 354 . 357) (nil fontified nil 348 . 354) (nil fontified nil 347 . 348) (nil fontified nil 342 . 347) (nil fontified nil 317 . 342) (nil fontified nil 312 . 317) (nil fontified nil 279 . 312) (nil fontified nil 277 . 279) (nil fontified nil 269 . 277) (nil fontified nil 267 . 269) (nil fontified nil 260 . 267) (nil fontified nil 257 . 260) (nil fontified nil 254 . 257) (nil fontified nil 248 . 254) (nil fontified nil 236 . 248) (nil fontified nil 232 . 236) (nil fontified nil 221 . 232) (nil fontified nil 220 . 221) (nil fontified nil 212 . 220) (nil fontified nil 209 . 212) (nil fontified nil 202 . 209) (nil fontified nil 199 . 202) (nil fontified nil 183 . 199) (nil fontified nil 180 . 183) (nil fontified nil 159 . 180) (nil fontified nil 156 . 159) (nil fontified nil 149 . 156) (nil fontified nil 146 . 149) (nil fontified nil 130 . 146) (nil fontified nil 127 . 130) (nil fontified nil 107 . 127) (nil fontified nil 102 . 107) (nil fontified nil 101 . 102) (nil fontified nil 99 . 101) (nil fontified nil 96 . 99) (nil fontified nil 93 . 96) (nil fontified nil 89 . 93) (nil fontified nil 88 . 89) (nil fontified nil 86 . 88) (nil fontified nil 81 . 86) (nil fontified nil 73 . 81) (nil fontified nil 3 . 73) (nil fontified nil 2 . 3) (nil fontified nil 1 . 2) (1 . 1295) (t . -1)) nil (26106 36310 682146 828000) 0 nil])
([nil nil ((1295 . 1296) (t 26106 36310 737830 298000)) nil (26106 36317 866836 615000) 0 nil])
([nil nil ((1296 . 1297)) nil (26106 36317 866830 828000) 0 nil])
([nil nil ((3 . 4) (t 26106 36317 917858 184000)) nil (26106 36322 217177 551000) 0 nil])
([nil nil ((#("from freqfuncts import *
" 0 4 (face font-lock-keyword-face fontified t) 4 16 (fontified t) 16 22 (face font-lock-keyword-face fontified t) 22 25 (fontified t)) . 233) (undo-tree-id0 . -25) (undo-tree-id1 . -25) (undo-tree-id2 . -25) 258 (t 26106 36322 264874 179000)) nil (26106 36372 17993 414000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25 . 26) (nil fontified nil 23 . 26) (nil fontified nil 17 . 23) (nil fontified nil 5 . 17) (nil fontified nil 1 . 5) (1 . 26)) nil (26106 36372 17978 828000) 0 nil])
([nil nil ((26 . 27)) nil (26106 36397 415141 223000) 0 nil])
([nil nil ((1 . 3)) nil (26106 36402 814591 957000) 0 nil] [nil nil ((#("from freqfuncts import *

A= '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'.decode('hex')
B=[]
for i in range(26):
    B.append([chr(97+i), xorz(A, chr(97+i)*len(A))])
    B.append([chr(65+i), xorz(A, chr(65+i)*len(A))])

#==========
for [i,j] in B:
    if checkFreq(j, .17) == 1:
        print i, j, checkFreq(j, .17)
print('\\n\\n')

#okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
#==========


import os
os.chdir('/home/nan/crypt/')
words = [i for i in open('wlist/wlist_match3.txt').read().split('\\n')]
words.pop()
sepwords = [list() for i in range(26)]
" 0 4 (face font-lock-keyword-face fontified t) 4 16 (fontified t) 16 22 (face font-lock-keyword-face fontified t) 22 24 (fontified t) 24 25 (rear-nonsticky t fontified t) 25 26 (fontified t) 26 27 (face font-lock-variable-name-face fontified t) 27 29 (fontified t) 29 99 (face font-lock-string-face fontified t) 99 107 (fontified t) 107 112 (face font-lock-string-face fontified t) 112 114 (fontified t) 114 115 (face font-lock-variable-name-face fontified t) 115 119 (fontified t) 119 122 (face font-lock-keyword-face fontified t) 122 125 (fontified t) 125 127 (face font-lock-keyword-face fontified t) 127 128 (fontified t) 128 133 (face font-lock-builtin-face fontified t) 133 153 (fontified t) 153 156 (face font-lock-builtin-face fontified t) 156 172 (fontified t) 172 175 (face font-lock-builtin-face fontified t) 175 182 (fontified t) 182 185 (face font-lock-builtin-face fontified t) 185 206 (fontified t) 206 209 (face font-lock-builtin-face fontified t) 209 225 (fontified t) 225 228 (face font-lock-builtin-face fontified t) 228 235 (fontified t) 235 238 (face font-lock-builtin-face fontified t) 238 246 (fontified t) 246 247 (face font-lock-comment-delimiter-face fontified t) 247 258 (face font-lock-comment-face fontified t) 258 261 (face font-lock-keyword-face fontified t) 261 268 (fontified t) 268 270 (face font-lock-keyword-face fontified t) 270 274 (fontified t) 274 278 (fontified t) 278 280 (face font-lock-keyword-face fontified t) 280 313 (fontified t) 313 318 (face font-lock-builtin-face fontified t) 318 343 (fontified t) 343 348 (face font-lock-builtin-face fontified t) 348 349 (fontified t) 349 355 (face font-lock-string-face fontified t) 355 358 (fontified t) 358 359 (face font-lock-comment-delimiter-face fontified t) 359 495 (face font-lock-comment-face fontified t) 495 496 (face font-lock-comment-delimiter-face fontified t) 496 507 (face font-lock-comment-face fontified t) 507 509 (fontified t) 509 515 (face font-lock-keyword-face fontified t) 515 528 (fontified t) 528 546 (face font-lock-string-face fontified t) 546 559 (fontified t) 559 562 (face font-lock-keyword-face fontified t) 562 565 (fontified t) 565 567 (face font-lock-keyword-face fontified t) 567 568 (fontified t) 568 572 (face font-lock-builtin-face fontified t) 572 573 (fontified t) 573 597 (face font-lock-string-face fontified t) 597 612 (fontified t) 612 616 (face font-lock-string-face fontified t) 616 643 (fontified t) 643 647 (face font-lock-builtin-face fontified t) 647 650 (fontified t) 650 653 (face font-lock-keyword-face fontified t) 653 656 (fontified t) 656 658 (face font-lock-keyword-face fontified t) 658 659 (fontified t) 659 664 (face font-lock-builtin-face fontified t) 664 670 (fontified t)) . 1) (undo-tree-id13 . -670) (undo-tree-id14 . -29) (undo-tree-id15 . -258) (undo-tree-id16 . -258) (undo-tree-id17 . -670) (undo-tree-id18 . -631) (undo-tree-id19 . -670)) ((1 . 671)) (26106 36396 339134 227000) 0 nil] [nil nil ((#("for i in words:
    if 'a'<=i[0]<='z':
        sepwords[ord(i[0])-97].append(i)

def checkWords(LOL): #for string of words>=0
    words=0
    for i in LOL.split():
        if i.isalpha() and ((len(i)>1 and i[0]!=i[1]) or i.lower()=='a')  and (i.islower() or i.isupper() or i.istitle()):
            for j in sepwords[ord(i[0])- (i[0].isupper())*65 - (i[0].islower())*97]:
                if i.lower() == j.lower():
                    words+=1
                    break
    return [words, len(LOL.split())]

for i in B:
    if checkWords(i[1])[0] > 0: print(i[1], '(words: ',checkWords(i[1])[0], ' out of ',checkWords(i[1]))

 
" 0 3 (face font-lock-keyword-face fontified t) 3 6 (fontified t) 6 8 (face font-lock-keyword-face fontified t) 8 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-string-face fontified t) 26 34 (fontified t) 34 37 (face font-lock-string-face fontified t) 37 56 (fontified t) 56 59 (face font-lock-builtin-face fontified t) 59 81 (fontified t) 81 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 95 (face font-lock-function-name-face fontified t) 95 102 (fontified t) 102 103 (face font-lock-comment-delimiter-face fontified t) 103 126 (face font-lock-comment-face fontified t) 126 142 (fontified t) 142 145 (face font-lock-keyword-face fontified t) 145 148 (fontified t) 148 150 (face font-lock-keyword-face fontified t) 150 172 (fontified t) 172 174 (face font-lock-keyword-face fontified t) 174 187 (fontified t) 187 190 (face font-lock-keyword-face fontified t) 190 193 (fontified t) 193 196 (face font-lock-builtin-face fontified t) 196 202 (fontified t) 202 205 (face font-lock-keyword-face fontified t) 205 218 (fontified t) 218 220 (face font-lock-keyword-face fontified t) 220 232 (fontified t) 232 235 (face font-lock-string-face fontified t) 235 238 (fontified t) 238 241 (face font-lock-keyword-face fontified t) 241 255 (fontified t) 255 257 (face font-lock-keyword-face fontified t) 257 270 (fontified t) 270 272 (face font-lock-keyword-face fontified t) 272 299 (fontified t) 299 302 (face font-lock-keyword-face fontified t) 302 305 (fontified t) 305 307 (face font-lock-keyword-face fontified t) 307 317 (fontified t) 317 320 (face font-lock-builtin-face fontified t) 320 388 (fontified t) 388 390 (face font-lock-keyword-face fontified t) 390 393 (fontified t) 393 415 (fontified t) 415 435 (fontified t) 435 440 (fontified t) 440 464 (fontified t) 464 469 (face font-lock-keyword-face fontified t) 469 474 (fontified t) 474 480 (face font-lock-keyword-face fontified t) 480 489 (fontified t) 489 492 (face font-lock-builtin-face fontified t) 492 508 (fontified t) 508 511 (face font-lock-keyword-face fontified t) 511 514 (fontified t) 514 516 (face font-lock-keyword-face fontified t) 516 524 (fontified t) 524 526 (face font-lock-keyword-face fontified t) 526 552 (fontified t) 552 557 (face font-lock-builtin-face fontified t) 557 564 (fontified t) 564 574 (face font-lock-string-face fontified t) 574 596 (fontified t) 596 606 (face font-lock-string-face fontified t) 606 625 (fontified t) 625 626 (fontified t rear-nonsticky t) 626 627 (fontified t) 627 628 (fontified t)) . 671) (undo-tree-id3 . -628) (undo-tree-id4 . -627) (undo-tree-id5 . -42) (undo-tree-id6 . -42) (undo-tree-id7 . -628) (undo-tree-id8 . -628) (undo-tree-id9 . -628) 1299 (t 26106 36372 87013 353000)) ((671 . 1299) (t 26106 36383 938035 483000)) (26106 36383 879106 397000) 0 nil])
([nil nil ((29 . 31) (t 26106 36402 869062 965000)) nil (26106 36427 944473 244000) 0 nil])
([nil nil ((1 . 738) (#("for i in words:
    if 'a'<=i[0]<='z':
        sepwords[ord(i[0])-97].append(i)

def checkWords(LOL): #for string of words>=0
    words=0
    for i in LOL.split():
        if i.isalpha() and ((len(i)>1 and i[0]!=i[1]) or i.lower()=='a')  and (i.islower() or i.isupper() or i.istitle()):
            for j in sepwords[ord(i[0])- (i[0].isupper())*65 - (i[0].islower())*97]:
                if i.lower() == j.lower():
                    words+=1
                    break
    return [words, len(LOL.split())]

for i in B:
    if checkWords(i[1])[0] > 0: print(i[1], '(words: ',checkWords(i[1])[0], ' out of ',checkWords(i[1]))

 
" 0 3 (face font-lock-keyword-face fontified t) 3 6 (fontified t) 6 8 (face font-lock-keyword-face fontified t) 8 16 (fontified t) 16 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-string-face fontified t) 26 34 (fontified t) 34 37 (face font-lock-string-face fontified t) 37 56 (fontified t) 56 59 (face font-lock-builtin-face fontified t) 59 81 (fontified t) 81 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 95 (face font-lock-function-name-face fontified t) 95 102 (fontified t) 102 103 (face font-lock-comment-delimiter-face fontified t) 103 126 (face font-lock-comment-face fontified t) 126 130 (fontified t) 130 135 (face font-lock-variable-name-face fontified t) 135 142 (fontified t) 142 145 (face font-lock-keyword-face fontified t) 145 148 (fontified t) 148 150 (face font-lock-keyword-face fontified t) 150 172 (fontified t) 172 174 (face font-lock-keyword-face fontified t) 174 187 (fontified t) 187 190 (face font-lock-keyword-face fontified t) 190 193 (fontified t) 193 196 (face font-lock-builtin-face fontified t) 196 202 (fontified t) 202 205 (face font-lock-keyword-face fontified t) 205 218 (fontified t) 218 220 (face font-lock-keyword-face fontified t) 220 232 (fontified t) 232 235 (face font-lock-string-face fontified t) 235 238 (fontified t) 238 241 (face font-lock-keyword-face fontified t) 241 255 (fontified t) 255 257 (face font-lock-keyword-face fontified t) 257 270 (fontified t) 270 272 (face font-lock-keyword-face fontified t) 272 299 (fontified t) 299 302 (face font-lock-keyword-face fontified t) 302 305 (fontified t) 305 307 (face font-lock-keyword-face fontified t) 307 317 (fontified t) 317 320 (face font-lock-builtin-face fontified t) 320 388 (fontified t) 388 390 (face font-lock-keyword-face fontified t) 390 393 (fontified t) 393 415 (fontified t) 415 435 (fontified t) 435 440 (face font-lock-variable-name-face fontified t) 440 464 (fontified t) 464 469 (face font-lock-keyword-face fontified t) 469 474 (fontified t) 474 480 (face font-lock-keyword-face fontified t) 480 489 (fontified t) 489 492 (face font-lock-builtin-face fontified t) 492 508 (fontified t) 508 511 (face font-lock-keyword-face fontified t) 511 514 (fontified t) 514 516 (face font-lock-keyword-face fontified t) 516 524 (fontified t) 524 526 (face font-lock-keyword-face fontified t) 526 552 (fontified t) 552 557 (face font-lock-builtin-face fontified t) 557 564 (fontified t) 564 574 (face font-lock-string-face fontified t) 574 596 (fontified t) 596 606 (face font-lock-string-face fontified t) 606 625 (fontified t) 625 626 (fontified t rear-nonsticky t) 626 627 (fontified t) 627 628 (fontified t)) . 1) (undo-tree-id10 . -627) (undo-tree-id11 . -42) (undo-tree-id12 . -42)) ((1 . 629) (#("for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 3 (face font-lock-keyword-face fontified t) 3 6 (fontified t) 6 8 (face font-lock-keyword-face fontified t) 8 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-string-face fontified t) 26 38 (fontified t) 38 41 (face font-lock-string-face fontified t) 41 60 (fontified t) 60 63 (face font-lock-builtin-face fontified t) 63 88 (fontified t) 88 91 (face font-lock-keyword-face fontified t) 91 92 (fontified t) 92 102 (face font-lock-function-name-face fontified t) 102 110 (fontified t) 110 112 (face font-lock-comment-delimiter-face fontified t) 112 135 (face font-lock-comment-face fontified t) 135 139 (fontified t) 139 144 (face font-lock-variable-name-face fontified t) 144 153 (fontified t) 153 156 (face font-lock-keyword-face fontified t) 156 159 (fontified t) 159 161 (face font-lock-keyword-face fontified t) 161 183 (fontified t) 183 185 (face font-lock-keyword-face fontified t) 185 224 (fontified t) 224 227 (face font-lock-keyword-face fontified t) 227 230 (fontified t) 230 233 (face font-lock-builtin-face fontified t) 233 241 (fontified t) 241 244 (face font-lock-keyword-face fontified t) 244 259 (fontified t) 259 261 (face font-lock-keyword-face fontified t) 261 275 (fontified t) 275 278 (face font-lock-string-face fontified t) 278 292 (fontified t) 292 295 (face font-lock-keyword-face fontified t) 295 309 (fontified t) 309 311 (face font-lock-keyword-face fontified t) 311 324 (fontified t) 324 326 (face font-lock-keyword-face fontified t) 326 363 (fontified t) 363 366 (face font-lock-keyword-face fontified t) 366 369 (fontified t) 369 371 (face font-lock-keyword-face fontified t) 371 398 (fontified t) 398 401 (face font-lock-builtin-face fontified t) 401 487 (fontified t) 487 489 (face font-lock-keyword-face fontified t) 489 534 (fontified t) 534 539 (face font-lock-variable-name-face fontified t) 539 565 (fontified t) 565 570 (face font-lock-keyword-face fontified t) 570 575 (fontified t) 575 581 (face font-lock-keyword-face fontified t) 581 590 (fontified t) 590 593 (face font-lock-builtin-face fontified t) 593 610 (fontified t) 610 613 (face font-lock-keyword-face fontified t) 613 616 (fontified t) 616 618 (face font-lock-keyword-face fontified t) 618 626 (fontified t) 626 628 (face font-lock-keyword-face fontified t) 628 662 (fontified t) 662 667 (face font-lock-builtin-face fontified t) 667 674 (fontified t) 674 684 (face font-lock-string-face fontified t) 684 707 (fontified t) 707 717 (face font-lock-string-face fontified t) 717 737 (fontified t)) . 1) (t 26106 36393 628050 723000)) (26106 36393 577525 259000) 0 nil])
nil
([nil nil ((324 . 325)) nil (26106 36427 944472 55000) 0 nil])
nil
([nil nil ((348 . 349)) nil (26106 36427 944470 696000) 0 nil])
([nil nil ((1 . 1434) (#("# from freqfuncts import *

# A= '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'.decode('hex')
B=[]
for i in range(26):
    B.append([chr(97+i), xorz(A, chr(97+i)*len(A))])
    B.append([chr(65+i), xorz(A, chr(65+i)*len(A))])

#==========
for [i,j] in B:
    if checkFreq(j, .17) == 1:
        print (i, j, checkFreq(j, .17))
print('\\n\\n')

#okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
#==========


import os
os.chdir('/home/nan/crypt/')
words = [i for i in open('wlist/wlist_match3.txt').read().split('\\n')]
words.pop()
sepwords = [list() for i in range(26)]
for i in words:
    if 'a'<=i[0]<='z':
        sepwords[ord(i[0])-97].append(i)

def checkWords(LOL): #for string of words>=0
    words=0
    for i in LOL.split():
        if i.isalpha() and ((len(i)>1 and i[0]!=i[1]) or i.lower()=='a')  and (i.islower() or i.isupper() or i.istitle()):
            for j in sepwords[ord(i[0])- (i[0].isupper())*65 - (i[0].islower())*97]:
                if i.lower() == j.lower():
                    words+=1
                    break
    return [words, len(LOL.split())]

for i in B:
    if checkWords(i[1])[0] > 0: print(i[1], '(words: ',checkWords(i[1])[0], ' out of ',checkWords(i[1]))

 
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 6 (face font-lock-comment-face fontified t) 6 18 (face font-lock-comment-face fontified t) 18 24 (face font-lock-comment-face fontified t) 24 26 (face font-lock-comment-face fontified t) 26 27 (face font-lock-comment-face rear-nonsticky t fontified t) 27 28 (fontified t) 28 30 (face font-lock-comment-delimiter-face fontified t) 30 31 (face font-lock-comment-face fontified t) 31 33 (face font-lock-comment-face fontified t) 33 103 (face font-lock-comment-face fontified t) 103 111 (face font-lock-comment-face fontified t) 111 116 (face font-lock-comment-face fontified t) 116 118 (face font-lock-comment-face fontified t) 118 119 (face font-lock-variable-name-face fontified t) 119 123 (fontified t) 123 126 (face font-lock-keyword-face fontified t) 126 129 (fontified t) 129 131 (face font-lock-keyword-face fontified t) 131 132 (fontified t) 132 137 (face font-lock-builtin-face fontified t) 137 157 (fontified t) 157 160 (face font-lock-builtin-face fontified t) 160 176 (fontified t) 176 179 (face font-lock-builtin-face fontified t) 179 186 (fontified t) 186 189 (face font-lock-builtin-face fontified t) 189 210 (fontified t) 210 213 (face font-lock-builtin-face fontified t) 213 229 (fontified t) 229 232 (face font-lock-builtin-face fontified t) 232 239 (fontified t) 239 242 (face font-lock-builtin-face fontified t) 242 250 (fontified t) 250 251 (face font-lock-comment-delimiter-face fontified t) 251 262 (face font-lock-comment-face fontified t) 262 265 (face font-lock-keyword-face fontified t) 265 272 (fontified t) 272 274 (face font-lock-keyword-face fontified t) 274 278 (fontified t) 278 282 (fontified t) 282 284 (face font-lock-keyword-face fontified t) 284 309 (fontified t) 309 317 (fontified t) 317 322 (face font-lock-builtin-face fontified t) 322 349 (fontified t) 349 354 (face font-lock-builtin-face fontified t) 354 355 (fontified t) 355 361 (face font-lock-string-face fontified t) 361 364 (fontified t) 364 365 (face font-lock-comment-delimiter-face fontified t) 365 501 (face font-lock-comment-face fontified t) 501 502 (face font-lock-comment-delimiter-face fontified t) 502 513 (face font-lock-comment-face fontified t) 513 515 (fontified t) 515 521 (face font-lock-keyword-face fontified t) 521 534 (fontified t) 534 552 (face font-lock-string-face fontified t) 552 554 (fontified t) 554 559 (face font-lock-variable-name-face fontified t) 559 565 (fontified t) 565 568 (face font-lock-keyword-face fontified t) 568 571 (fontified t) 571 573 (face font-lock-keyword-face fontified t) 573 574 (fontified t) 574 578 (face font-lock-builtin-face fontified t) 578 579 (fontified t) 579 603 (face font-lock-string-face fontified t) 603 618 (fontified t) 618 622 (face font-lock-string-face fontified t) 622 637 (fontified t) 637 645 (face font-lock-variable-name-face fontified t) 645 649 (fontified t) 649 653 (face font-lock-builtin-face fontified t) 653 656 (fontified t) 656 659 (face font-lock-keyword-face fontified t) 659 662 (fontified t) 662 664 (face font-lock-keyword-face fontified t) 664 665 (fontified t) 665 670 (face font-lock-builtin-face fontified t) 670 676 (fontified t) 676 679 (face font-lock-keyword-face fontified t) 679 682 (fontified t) 682 684 (face font-lock-keyword-face fontified t) 684 692 (fontified t) 692 696 (fontified t) 696 698 (face font-lock-keyword-face fontified t) 698 699 (fontified t) 699 702 (face font-lock-string-face fontified t) 702 710 (fontified t) 710 713 (face font-lock-string-face fontified t) 713 732 (fontified t) 732 735 (face font-lock-builtin-face fontified t) 735 757 (fontified t) 757 760 (face font-lock-keyword-face fontified t) 760 761 (fontified t) 761 771 (face font-lock-function-name-face fontified t) 771 778 (fontified t) 778 779 (face font-lock-comment-delimiter-face fontified t) 779 802 (face font-lock-comment-face fontified t) 802 806 (fontified t) 806 811 (face font-lock-variable-name-face fontified t) 811 818 (fontified t) 818 821 (face font-lock-keyword-face fontified t) 821 824 (fontified t) 824 826 (face font-lock-keyword-face fontified t) 826 848 (fontified t) 848 850 (face font-lock-keyword-face fontified t) 850 863 (fontified t) 863 866 (face font-lock-keyword-face fontified t) 866 869 (fontified t) 869 872 (face font-lock-builtin-face fontified t) 872 878 (fontified t) 878 881 (face font-lock-keyword-face fontified t) 881 894 (fontified t) 894 896 (face font-lock-keyword-face fontified t) 896 908 (fontified t) 908 911 (face font-lock-string-face fontified t) 911 914 (fontified t) 914 917 (face font-lock-keyword-face fontified t) 917 931 (fontified t) 931 933 (face font-lock-keyword-face fontified t) 933 946 (fontified t) 946 948 (face font-lock-keyword-face fontified t) 948 975 (fontified t) 975 978 (face font-lock-keyword-face fontified t) 978 981 (fontified t) 981 983 (face font-lock-keyword-face fontified t) 983 993 (fontified t) 993 996 (face font-lock-builtin-face fontified t) 996 1064 (fontified t) 1064 1066 (face font-lock-keyword-face fontified t) 1066 1069 (fontified t) 1069 1091 (fontified t) 1091 1111 (fontified t) 1111 1116 (face font-lock-variable-name-face fontified t) 1116 1140 (fontified t) 1140 1145 (face font-lock-keyword-face fontified t) 1145 1150 (fontified t) 1150 1156 (face font-lock-keyword-face fontified t) 1156 1165 (fontified t) 1165 1168 (face font-lock-builtin-face fontified t) 1168 1184 (fontified t) 1184 1187 (face font-lock-keyword-face fontified t) 1187 1190 (fontified t) 1190 1192 (face font-lock-keyword-face fontified t) 1192 1200 (fontified t) 1200 1202 (face font-lock-keyword-face fontified t) 1202 1228 (fontified t) 1228 1233 (face font-lock-builtin-face fontified t) 1233 1240 (fontified t) 1240 1250 (face font-lock-string-face fontified t) 1250 1272 (fontified t) 1272 1282 (face font-lock-string-face fontified t) 1282 1301 (fontified t) 1301 1302 (fontified t rear-nonsticky t) 1302 1303 (fontified t) 1303 1304 (fontified t)) . 1) (undo-tree-id20 . -349) (undo-tree-id21 . -33) (undo-tree-id22 . -324) (undo-tree-id23 . -1303) (undo-tree-id24 . -718) (undo-tree-id25 . -718) (undo-tree-id26 . -262) (undo-tree-id27 . -262) (undo-tree-id28 . -676) (undo-tree-id29 . -637) (undo-tree-id30 . -676) (undo-tree-id31 . -317) (undo-tree-id32 . -317) (undo-tree-id33 . -317) (undo-tree-id34 . -317) (undo-tree-id35 . -317) (undo-tree-id36 . -317) (undo-tree-id37 . -317) (undo-tree-id38 . -317) (undo-tree-id39 . -317) (undo-tree-id40 . -317) (undo-tree-id41 . -317) (undo-tree-id42 . -317) (undo-tree-id43 . -317) (undo-tree-id44 . -317) (undo-tree-id45 . -317) (undo-tree-id46 . -317) (undo-tree-id47 . -317) (undo-tree-id48 . -317) (undo-tree-id49 . -317) (undo-tree-id50 . -317) (undo-tree-id51 . -317) (undo-tree-id52 . -317) (undo-tree-id53 . -317) (undo-tree-id54 . -317) (undo-tree-id55 . -317) (undo-tree-id56 . -317) (undo-tree-id57 . -317) (undo-tree-id58 . -349) (undo-tree-id59 . -349) (undo-tree-id60 . -525) (undo-tree-id61 . -525) (undo-tree-id62 . -554) (undo-tree-id63 . -554) (undo-tree-id64 . -562) (undo-tree-id65 . -554) (undo-tree-id66 . -554) (undo-tree-id67 . -562) (undo-tree-id68 . -696) (undo-tree-id69 . -696) (undo-tree-id70 . -696) (undo-tree-id71 . -696) (undo-tree-id72 . -848) (undo-tree-id73 . -848) (undo-tree-id74 . -1200) (undo-tree-id75 . -1200) (undo-tree-id76 . -1200) (undo-tree-id77 . -1200) (undo-tree-id78 . -309) 325) nil (26106 36427 944463 597000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 29) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 29) (t 26106 36428 44085 571000)) nil (26106 36504 278176 296000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-keyword-face fontified t)) . 1) (#(" " 0 1 (fontified t)) . 1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1)) nil (26106 36504 278159 381000) 0 nil])
([nil nil ((1 . 2) (t 26106 36504 335070 762000)) nil (26106 36505 736363 222000) 0 nil])
([nil nil ((1 . 1431) (#("from freqfuncts import *

A= '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'.decode('hex')
B = []
for i in range(26):
    B.append([chr(97 + i), xorz(A, chr(97 + i) * len(A))])
    B.append([chr(65 + i), xorz(A, chr(65 + i) * len(A))])

# ==========
for [i, j] in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


import os

os.chdir(\"/home/nan/crypt/\")
words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]
for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 1 (face font-lock-keyword-face fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 16 (fontified t) 16 22 (face font-lock-keyword-face fontified t) 22 25 (fontified t) 25 26 (fontified t) 26 27 (face font-lock-variable-name-face fontified t) 27 29 (fontified t) 29 99 (face font-lock-string-face fontified t) 99 107 (fontified t) 107 112 (face font-lock-string-face fontified t) 112 114 (fontified t) 114 115 (face font-lock-variable-name-face fontified t) 115 121 (fontified t) 121 124 (face font-lock-keyword-face fontified t) 124 127 (fontified t) 127 129 (face font-lock-keyword-face fontified t) 129 130 (fontified t) 130 135 (face font-lock-builtin-face fontified t) 135 155 (fontified t) 155 158 (face font-lock-builtin-face fontified t) 158 176 (fontified t) 176 179 (face font-lock-builtin-face fontified t) 179 190 (fontified t) 190 193 (face font-lock-builtin-face fontified t) 193 214 (fontified t) 214 217 (face font-lock-builtin-face fontified t) 217 235 (fontified t) 235 238 (face font-lock-builtin-face fontified t) 238 249 (fontified t) 249 252 (face font-lock-builtin-face fontified t) 252 260 (fontified t) 260 262 (face font-lock-comment-delimiter-face fontified t) 262 273 (face font-lock-comment-face fontified t) 273 276 (face font-lock-keyword-face fontified t) 276 284 (fontified t) 284 286 (face font-lock-keyword-face fontified t) 286 294 (fontified t) 294 296 (face font-lock-keyword-face fontified t) 296 330 (fontified t) 330 335 (face font-lock-builtin-face fontified t) 335 362 (fontified t) 362 367 (face font-lock-builtin-face fontified t) 367 368 (fontified t) 368 374 (face font-lock-string-face fontified t) 374 377 (fontified t) 377 379 (face font-lock-comment-delimiter-face fontified t) 379 515 (face font-lock-comment-face fontified t) 515 517 (face font-lock-comment-delimiter-face fontified t) 517 528 (face font-lock-comment-face fontified t) 528 530 (fontified t) 530 536 (face font-lock-keyword-face fontified t) 536 550 (fontified t) 550 568 (face font-lock-string-face fontified t) 568 581 (fontified t) 581 584 (face font-lock-keyword-face fontified t) 584 587 (fontified t) 587 589 (face font-lock-keyword-face fontified t) 589 590 (fontified t) 590 594 (face font-lock-builtin-face fontified t) 594 595 (fontified t) 595 619 (face font-lock-string-face fontified t) 619 634 (fontified t) 634 638 (face font-lock-string-face fontified t) 638 665 (fontified t) 665 669 (face font-lock-builtin-face fontified t) 669 672 (fontified t) 672 675 (face font-lock-keyword-face fontified t) 675 678 (fontified t) 678 680 (face font-lock-keyword-face fontified t) 680 681 (fontified t) 681 686 (face font-lock-builtin-face fontified t) 686 692 (fontified t) 692 695 (face font-lock-keyword-face fontified t) 695 698 (fontified t) 698 700 (face font-lock-keyword-face fontified t) 700 712 (fontified t) 712 714 (face font-lock-keyword-face fontified t) 714 715 (fontified t) 715 718 (face font-lock-string-face fontified t) 718 730 (fontified t) 730 733 (face font-lock-string-face fontified t) 733 752 (fontified t) 752 755 (face font-lock-builtin-face fontified t) 755 780 (fontified t) 780 783 (face font-lock-keyword-face fontified t) 783 784 (fontified t) 784 794 (face font-lock-function-name-face fontified t) 794 802 (fontified t) 802 804 (face font-lock-comment-delimiter-face fontified t) 804 827 (face font-lock-comment-face fontified t) 827 845 (fontified t) 845 848 (face font-lock-keyword-face fontified t) 848 851 (fontified t) 851 853 (face font-lock-keyword-face fontified t) 853 875 (fontified t) 875 877 (face font-lock-keyword-face fontified t) 877 916 (fontified t) 916 919 (face font-lock-keyword-face fontified t) 919 922 (fontified t) 922 925 (face font-lock-builtin-face fontified t) 925 933 (fontified t) 933 936 (face font-lock-keyword-face fontified t) 936 951 (fontified t) 951 953 (face font-lock-keyword-face fontified t) 953 967 (fontified t) 967 970 (face font-lock-string-face fontified t) 970 984 (fontified t) 984 987 (face font-lock-keyword-face fontified t) 987 1001 (fontified t) 1001 1003 (face font-lock-keyword-face fontified t) 1003 1016 (fontified t) 1016 1018 (face font-lock-keyword-face fontified t) 1018 1055 (fontified t) 1055 1058 (face font-lock-keyword-face fontified t) 1058 1061 (fontified t) 1061 1063 (face font-lock-keyword-face fontified t) 1063 1090 (fontified t) 1090 1093 (face font-lock-builtin-face fontified t) 1093 1179 (fontified t) 1179 1181 (face font-lock-keyword-face fontified t) 1181 1257 (fontified t) 1257 1262 (face font-lock-keyword-face fontified t) 1262 1267 (fontified t) 1267 1273 (face font-lock-keyword-face fontified t) 1273 1282 (fontified t) 1282 1285 (face font-lock-builtin-face fontified t) 1285 1302 (fontified t) 1302 1305 (face font-lock-keyword-face fontified t) 1305 1308 (fontified t) 1308 1310 (face font-lock-keyword-face fontified t) 1310 1318 (fontified t) 1318 1320 (face font-lock-keyword-face fontified t) 1320 1354 (fontified t) 1354 1359 (face font-lock-builtin-face fontified t) 1359 1366 (fontified t) 1366 1376 (face font-lock-string-face fontified t) 1376 1399 (fontified t) 1399 1409 (face font-lock-string-face fontified t) 1409 1429 (fontified t)) . 1) (undo-tree-id83 . -26) (undo-tree-id84 . -1) (undo-tree-id85 . -26) (undo-tree-id86 . -26) (undo-tree-id87 . -26) (undo-tree-id88 . -26) (undo-tree-id89 . -320) (undo-tree-id90 . -26) (undo-tree-id91 . -26) (undo-tree-id92 . -29) (undo-tree-id93 . -26) (undo-tree-id94 . -26) (undo-tree-id95 . -29) (undo-tree-id96 . -362) (undo-tree-id97 . -362) (undo-tree-id98 . -541) (undo-tree-id99 . -541) (undo-tree-id100 . -570) (undo-tree-id101 . -570) (undo-tree-id102 . -578) (undo-tree-id103 . -570) (undo-tree-id104 . -570) (undo-tree-id105 . -578) (undo-tree-id106 . -712) (undo-tree-id107 . -712) (undo-tree-id108 . -712) (undo-tree-id109 . -712) (undo-tree-id110 . -875) (undo-tree-id111 . -875) (undo-tree-id112 . -875) (undo-tree-id113 . -1354) (undo-tree-id114 . -1354) (undo-tree-id115 . -1354) (undo-tree-id116 . -1354) 2) nil (26106 36505 736356 686000) 0 nil])
([nil nil ((123 . 125) (t 26106 36505 785069 421000)) nil (26106 36513 707863 487000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -124) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 125 (t 26106 36513 758061 416000)) nil (26106 36542 434309 898000) 0 nil])
([nil nil ((695 . 696)) nil (26106 36542 434306 570000) 0 nil])
([nil nil ((#("crypt/" 0 6 (face font-lock-string-face fontified t)) . -564) (undo-tree-id149 . -6) 570) nil (26106 36542 434305 408000) 0 nil])
([nil nil ((#("nan/" 0 4 (face font-lock-string-face fontified t)) . -560) (undo-tree-id148 . -4) 564) nil (26106 36542 434294 966000) 0 nil])
([nil nil ((#("home/" 0 5 (face font-lock-string-face fontified t)) . -555) (undo-tree-id147 . -5) 560) nil (26106 36542 434292 611000) 0 nil])
([nil nil ((#("os.chdir(\"/\")" 0 9 (fontified t) 9 12 (face font-lock-string-face fontified t) 12 13 (fontified t)) . 544) (undo-tree-id146 . -13)) nil (26106 36542 434290 261000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 544) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1)) nil (26106 36542 434287 949000) 0 nil])
([nil nil ((#("import os" 0 6 (face font-lock-keyword-face fontified t) 6 9 (fontified t)) . 533) (undo-tree-id140 . -9)) nil (26106 36542 434282 197000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 533) (undo-tree-id139 . -1)) nil (26106 36542 434280 40000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 533) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1)) nil (26106 36542 434373 466000) 0 nil])
([nil nil ((31 . 42) (t 26106 36543 172023 114000)) nil (26107 55073 590702 419000) 0 nil] [nil nil ((#("words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]" 0 5 (face font-lock-variable-name-face fontified t) 5 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 17 (fontified t) 17 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 24 (face font-lock-builtin-face fontified t) 24 25 (fontified t) 25 49 (face font-lock-string-face fontified t) 49 64 (fontified t) 64 68 (face font-lock-string-face fontified t) 68 70 (fontified t)) . 533) (undo-tree-id117 . -8) (undo-tree-id118 . -8) (undo-tree-id119 . -8) (undo-tree-id120 . -8) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -70)) ((533 . 603)) (26106 36542 434256 725000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -41) (undo-tree-id13 . -1) 42) nil (26107 55073 590701 202000) 0 nil])
nil
([nil nil ((41 . 42)) nil (26107 55073 590699 309000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -125) (undo-tree-id10 . -1) (undo-tree-id11 . 1) (undo-tree-id12 . -1) 126) nil (26107 55073 590698 141000) 0 nil])
([nil nil ((#("hex\"" 0 4 (fontified t face font-lock-string-face)) . -121) (undo-tree-id9 . -4) 125) nil (26107 55073 590694 321000) 0 nil])
([nil nil ((#("decode(\"" 0 7 (fontified t) 7 8 (fontified t face font-lock-string-face)) . -113) (undo-tree-id8 . -8) 121) nil (26107 55073 590692 357000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -112) (undo-tree-id7 . -1) 113) nil (26107 55073 590690 195000) 0 nil])
([nil nil ((112 . 113)) nil (26107 55073 590688 407000) 0 nil])
([nil nil ((1 . 2)) nil (26107 55073 590687 585000) 0 nil])
([nil nil ((2 . 3)) nil (26107 55073 590686 493000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id6 . -1) 2) nil (26107 55073 590685 282000) 0 nil])
([nil nil ((1 . 5)) nil (26107 55073 590683 219000) 0 nil])
([nil nil ((10 . 11)) nil (26107 55073 590682 312000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -10) (undo-tree-id5 . -1) 11) nil (26107 55073 590681 270000) 0 nil])
([nil nil ((#("freqfuncts" 0 10 (fontified t)) . -11) (undo-tree-id4 . -10) 21) nil (26107 55073 590679 187000) 0 nil])
([nil nil ((11 . 19)) nil (26107 55073 590677 114000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -15) (undo-tree-id0 . -1) (#("r" 0 1 (fontified t)) . -16) (undo-tree-id1 . -1) (#("e" 0 1 (fontified t)) . -17) (undo-tree-id2 . -1) (#("q" 0 1 (fontified t)) . -18) (undo-tree-id3 . -1) 19) nil (26107 55073 590675 30000) 0 nil])
([nil nil ((15 . 20)) nil (26107 55073 590660 141000) 0 nil])
([nil nil ((5 . 11)) nil (26107 55073 590659 179000) 0 nil])
([nil nil ((11 . 20)) nil (26107 55073 590657 468000) 0 nil])
([nil nil ((20 . 30)) nil (26107 55073 590652 189000) 0 nil])
([nil nil ((54 . 55) (t 26107 55073 832799 626000)) nil (26107 55774 334317 742000) 0 nil])
([nil nil ((55 . 69)) nil (26107 55774 334316 813000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -68) (undo-tree-id112 . -1) 69) nil (26107 55774 334315 932000) 0 nil])
([nil nil ((68 . 72)) nil (26107 55774 334314 251000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -71) (undo-tree-id111 . -1) 72) nil (26107 55774 334313 354000) 0 nil])
([nil nil ((71 . 77)) nil (26107 55774 334311 680000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -75) (undo-tree-id109 . -1) (#("t" 0 1 (fontified t)) . -76) (undo-tree-id110 . -1) 77) nil (26107 55774 334310 625000) 0 nil])
([nil nil ((75 . 77)) nil (26107 55774 334308 93000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -75) (undo-tree-id107 . -1) (#("t" 0 1 (fontified t)) . -76) (undo-tree-id108 . -1) 77) nil (26107 55774 334307 21000) 0 nil])
([nil nil ((75 . 88)) nil (26107 55774 334304 380000) 0 nil])
([nil nil ((105 . 106)) nil (26107 55774 334303 668000) 0 nil])
([nil nil ((207 . 211) (#("    " 0 4 (fontified nil)) . 206) (undo-tree-id106 . -4) (205 . 211)) nil (26107 55774 334302 510000) 0 nil])
([nil nil ((206 . 210)) nil (26107 55774 334300 544000) 0 nil])
([nil nil ((210 . 212)) nil (26107 55774 334299 788000) 0 nil])
([nil nil ((212 . 214)) nil (26107 55774 334299 92000) 0 nil])
([nil nil ((#("ap" 0 2 (fontified t)) . -212) (undo-tree-id105 . -2) 214) nil (26107 55774 334298 152000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -210) (undo-tree-id103 . -1) (#("." 0 1 (fontified t)) . -211) (undo-tree-id104 . -1) 212) nil (26107 55774 334296 74000) 0 nil])
([nil nil ((210 . 219)) nil (26107 55774 334293 333000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -201) (undo-tree-id101 . -1) (#("6" 0 1 (fontified t)) . -202) (undo-tree-id102 . -1) 203) nil (26107 55774 334292 185000) 0 nil])
([nil nil ((201 . 202)) nil (26107 55774 334288 787000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -201) (undo-tree-id100 . -1) 202) nil (26107 55774 334287 754000) 0 nil])
([nil nil ((201 . 204)) nil (26107 55774 334285 946000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -203) (undo-tree-id97 . -1) (undo-tree-id98 . 1) (undo-tree-id99 . -1) 204) nil (26107 55774 334284 927000) 0 nil])
([nil nil ((219 . 221)) nil (26107 55774 334279 620000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -219) (undo-tree-id95 . -1) (#("6" 0 1 (fontified t)) . -220) (undo-tree-id96 . -1) 221) nil (26107 55774 334278 448000) 0 nil])
([nil nil ((219 . 220)) nil (26107 55774 334275 838000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -219) (undo-tree-id94 . -1) 220) nil (26107 55774 334274 933000) 0 nil])
([nil nil ((219 . 220)) nil (26107 55774 334273 322000) 0 nil])
([nil nil ((220 . 221)) nil (26107 55774 334272 607000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -220) (undo-tree-id93 . -1) 221) nil (26107 55774 334271 684000) 0 nil])
([nil nil ((205 . 210)) nil (26107 55774 334270 64000) 0 nil])
([nil nil ((210 . 213)) nil (26107 55774 334269 331000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -211) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -212) (undo-tree-id92 . -1) 213) nil (26107 55774 334268 179000) 0 nil])
([nil nil ((211 . 218)) nil (26107 55774 334265 617000) 0 nil])
([nil nil ((218 . 222)) nil (26107 55774 334264 914000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -221) (undo-tree-id90 . -1) 222) nil (26107 55774 334263 964000) 0 nil])
([nil nil ((221 . 222)) nil (26107 55774 334262 362000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -210) (undo-tree-id89 . -1) 211) nil (26107 55774 334261 465000) 0 nil])
([nil nil ((210 . 221)) nil (26107 55774 334259 719000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -219) (undo-tree-id87 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -220) (undo-tree-id88 . -1) 221) nil (26107 55774 334258 538000) 0 nil])
([nil nil ((219 . 222)) nil (26107 55774 334256 2000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -220) (undo-tree-id85 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -221) (undo-tree-id86 . -1) 222) nil (26107 55774 334254 950000) 0 nil])
([nil nil ((220 . 222)) nil (26107 55774 334252 337000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -221) (undo-tree-id84 . -1) 222) nil (26107 55774 334251 126000) 0 nil])
([nil nil ((221 . 223)) nil (26107 55774 334249 474000) 0 nil])
([nil nil ((#("ord" 0 3 (fontified t face font-lock-variable-name-face)) . -220) (undo-tree-id83 . -3) 223) nil (26107 55774 334248 499000) 0 nil])
([nil nil ((#("lowercase_" 0 10 (fontified t face font-lock-variable-name-face)) . -210) (undo-tree-id82 . -10) 220) nil (26107 55774 334246 699000) 0 nil])
([nil nil ((210 . 213)) nil (26107 55774 334245 62000) 0 nil])
([nil nil ((224 . 229)) nil (26107 55774 334244 344000) 0 nil])
([nil nil ((229 . 234)) nil (26107 55774 334243 549000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -233) (undo-tree-id81 . -1) 234) nil (26107 55774 334242 576000) 0 nil])
([nil nil ((233 . 243)) nil (26107 55774 334240 358000) 0 nil])
([nil nil ((#("    B.append([" 0 14 (fontified t)) . 244) (undo-tree-id80 . -14)) nil (26107 55774 334239 386000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -210) (undo-tree-id77 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -211) (undo-tree-id78 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -212) (undo-tree-id79 . -1) 213) nil (26107 55774 334237 369000) 0 nil])
([nil nil ((210 . 213)) nil (26107 55774 334233 970000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -229) (undo-tree-id74 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -230) (undo-tree-id75 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -231) (undo-tree-id76 . -1) 232) nil (26107 55774 334232 711000) 0 nil])
([nil nil ((229 . 231)) nil (26107 55774 334229 225000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -230) (undo-tree-id73 . -1) 231) nil (26107 55774 334228 295000) 0 nil])
([nil nil ((230 . 232)) nil (26107 55774 334226 703000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -212) (undo-tree-id72 . -1) 213) nil (26107 55774 334225 770000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -230) (undo-tree-id71 . -1) 231) nil (26107 55774 334223 978000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -211) (undo-tree-id70 . -1) 212) nil (26107 55774 334222 120000) 0 nil])
([nil nil ((211 . 215)) nil (26107 55774 334220 430000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -231) (undo-tree-id69 . -1) 232) nil (26107 55774 334219 508000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -231) (undo-tree-id68 . -1) 232) nil (26107 55774 334217 670000) 0 nil])
([nil nil ((231 . 237)) nil (26107 55774 334216 2000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -234) (undo-tree-id65 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -235) (undo-tree-id66 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -236) (undo-tree-id67 . -1) 237) nil (26107 55774 334214 603000) 0 nil])
([nil nil ((234 . 236)) nil (26107 55774 334209 394000) 0 nil])
([nil nil ((248 . 252)) nil (26107 55774 334208 566000) 0 nil])
([nil nil ((252 . 267)) nil (26107 55774 334207 788000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-builtin-face)) . -264) (undo-tree-id62 . -1) (#("d" 0 1 (fontified t)) . -265) (undo-tree-id63 . -1) (#("(" 0 1 (fontified t)) . -266) (undo-tree-id64 . -1) 267) nil (26107 55774 334206 477000) 0 nil])
([nil nil ((264 . 266)) nil (26107 55774 334202 942000) 0 nil])
([nil nil ((#("chr(" 0 3 (fontified t face font-lock-builtin-face) 3 4 (fontified t)) . -262) (undo-tree-id61 . -4) 266) nil (26107 55774 334201 992000) 0 nil])
([nil nil ((262 . 266)) nil (26107 55774 334200 339000) 0 nil])
([nil nil ((266 . 284)) nil (26107 55774 334199 629000) 0 nil])
([nil nil ((284 . 288)) nil (26107 55774 334198 879000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -287) (undo-tree-id60 . -1) 288) nil (26107 55774 334198 2000) 0 nil])
([nil nil ((287 . 308)) nil (26107 55774 334195 527000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -307) (undo-tree-id59 . -1) 308) nil (26107 55774 334194 623000) 0 nil])
([nil nil ((307 . 319)) nil (26107 55774 334192 967000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -318) (undo-tree-id56 . -1) (undo-tree-id57 . 1) (undo-tree-id58 . -1) 319) nil (26107 55774 334191 916000) 0 nil])
([nil nil ((318 . 320)) nil (26107 55774 334188 798000) 0 nil])
([nil nil ((320 . 325)) nil (26107 55774 334187 979000) 0 nil])
([nil nil ((nil rear-nonsticky nil 397 . 398) (nil fontified nil 386 . 398) (nil fontified nil 383 . 386) (nil fontified nil 369 . 383) (nil fontified nil 366 . 369) (nil fontified nil 365 . 366) (nil fontified nil 360 . 365) (nil fontified nil 338 . 360) (nil fontified nil 335 . 338) (nil fontified nil 325 . 335) (325 . 398)) nil (26107 55774 334186 782000) 0 nil])
([nil nil ((#("lower" 0 5 (fontified nil)) . -370) (375 . 380) (#("lower" 0 5 (fontified t)) . -339) (344 . 349) 338) nil (26107 55774 334183 923000) 0 nil])
([nil nil ((522 . 523)) nil (26107 55774 334182 383000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -522) (undo-tree-id55 . -1) 523) nil (26107 55774 334181 505000) 0 nil])
([nil nil ((394 . 395)) nil (26107 55774 334179 840000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -394) (undo-tree-id54 . -1) 395) nil (26107 55774 334178 872000) 0 nil])
([nil nil ((#("    
    
    B.append([chr(97 + i), xorz(A, chr(97 + i) * len(A))])
    B.append([chr(65 + i), xorz(A, chr(65 + i) * len(A))])
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (fontified t) 5 10 (fontified t) 10 24 (fontified t) 24 27 (fontified t face font-lock-builtin-face) 27 45 (fontified t) 45 48 (fontified t face font-lock-builtin-face) 48 59 (fontified t) 59 62 (fontified t face font-lock-builtin-face) 62 83 (fontified t) 83 86 (fontified t face font-lock-builtin-face) 86 104 (fontified t) 104 107 (fontified t face font-lock-builtin-face) 107 118 (fontified t) 118 121 (fontified t face font-lock-builtin-face) 121 128 (fontified t)) . -394) (undo-tree-id47 . -69) (undo-tree-id48 . -16) (undo-tree-id49 . -69) (undo-tree-id50 . -4) (undo-tree-id51 . -128) (undo-tree-id52 . -128) (undo-tree-id53 . -128) 522) nil (26107 55774 334176 794000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -412) (undo-tree-id46 . -1) 413) nil (26107 55774 334170 649000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -416) (undo-tree-id43 . -1) (undo-tree-id44 . 1) (undo-tree-id45 . -1) 417) nil (26107 55774 334168 706000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face font-lock-variable-name-face)) . -90) (undo-tree-id42 . -1) 91) nil (26107 55774 334165 163000) 0 nil])
([nil nil ((90 . 102)) nil (26107 55774 334163 507000) 0 nil])
([nil nil ((#("A" 0 1 (fontified nil)) . -431) (432 . 444) (#("A" 0 1 (fontified t)) . -390) (391 . 403) (#("A" 0 1 (fontified nil)) . -336) (337 . 349) (#("A" 0 1 (fontified t)) . -295) (296 . 308) 259) nil (26107 55774 334162 36000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -342) (undo-tree-id41 . -6) 348) nil (26107 55774 334159 697000) 0 nil])
([nil nil ((342 . 349)) nil (26107 55774 334158 69000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -438) (undo-tree-id40 . -6) 444) nil (26107 55774 334157 118000) 0 nil])
([nil nil ((438 . 445)) nil (26107 55774 334155 435000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -301) (undo-tree-id39 . -6) 307) nil (26107 55774 334154 457000) 0 nil])
([nil nil ((301 . 308)) nil (26107 55774 334151 806000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -398) (undo-tree-id38 . -6) 404) nil (26107 55774 334150 805000) 0 nil])
([nil nil ((398 . 405)) nil (26107 55774 334148 892000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t face font-lock-variable-name-face)) . -96) (undo-tree-id37 . -6) 102) nil (26107 55774 334147 848000) 0 nil])
([nil nil ((96 . 102)) nil (26107 55774 334146 72000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -100) (undo-tree-id35 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -101) (undo-tree-id36 . -1) 102) nil (26107 55774 334144 725000) 0 nil])
([nil nil ((100 . 103)) nil (26107 55775 979462 714000) 0 nil])
([nil nil ((1 . 1687) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\")
B = []

for i in range(26):
    lower = ord(\"a\")
    upper = ord(\"A\")
    B.append([chr(lower), xor_bytes(xored_message, bytes(chr(lower + i) * len(xored_message)))])
    B.append([chr(upper), xor_bytes(xored_message, bytes(chr(upper + i) * len(xored_message)))])

# ==========
for i, j in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 29 (fontified t) 29 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 117 (fontified t) 117 187 (fontified t face font-lock-string-face) 187 188 (fontified t) 188 189 (fontified t) 189 190 (fontified t face font-lock-variable-name-face) 190 197 (fontified t) 197 200 (fontified t face font-lock-keyword-face) 200 203 (fontified t) 203 205 (fontified t face font-lock-keyword-face) 205 206 (fontified t) 206 211 (fontified t face font-lock-builtin-face) 211 214 (fontified t) 214 217 (fontified t) 217 221 (fontified t) 221 226 (fontified t face font-lock-variable-name-face) 226 229 (fontified t) 229 232 (fontified t face font-lock-builtin-face) 232 233 (fontified t) 233 236 (fontified t face font-lock-string-face) 236 238 (fontified t) 238 242 (fontified t) 242 247 (fontified t face font-lock-variable-name-face) 247 250 (fontified t) 250 253 (fontified t face font-lock-builtin-face) 253 254 (fontified t) 254 257 (fontified t face font-lock-string-face) 257 258 (fontified t) 258 259 (fontified t) 259 273 (fontified t) 273 276 (fontified t face font-lock-builtin-face) 276 295 (fontified t) 295 308 (fontified t) 308 310 (fontified t) 310 315 (fontified t face font-lock-builtin-face) 315 316 (fontified t) 316 319 (fontified t face font-lock-builtin-face) 319 333 (fontified t) 333 336 (fontified t face font-lock-builtin-face) 336 337 (fontified t) 337 350 (fontified t) 350 356 (fontified t) 356 360 (fontified t) 360 370 (fontified t) 370 373 (fontified t face font-lock-builtin-face) 373 374 (fontified t) 374 379 (fontified t) 379 392 (fontified t) 392 405 (fontified t) 405 407 (fontified t) 407 412 (fontified t face font-lock-builtin-face) 412 413 (fontified t) 413 416 (fontified t face font-lock-builtin-face) 416 417 (fontified t) 417 422 (fontified t) 422 430 (fontified t) 430 433 (fontified t face font-lock-builtin-face) 433 434 (fontified t) 434 447 (fontified t) 447 453 (fontified t) 453 454 (fontified t) 454 456 (fontified t face font-lock-comment-delimiter-face) 456 467 (fontified t face font-lock-comment-face) 467 470 (fontified t face font-lock-keyword-face) 470 476 (fontified t) 476 478 (fontified t face font-lock-keyword-face) 478 482 (fontified t) 482 486 (fontified t) 486 488 (fontified t face font-lock-keyword-face) 488 522 (fontified t) 522 527 (fontified t face font-lock-builtin-face) 527 554 (fontified t) 554 559 (fontified t face font-lock-builtin-face) 559 560 (fontified t) 560 566 (fontified t face font-lock-string-face) 566 569 (fontified t) 569 571 (fontified t face font-lock-comment-delimiter-face) 571 707 (fontified t face font-lock-comment-face) 707 709 (fontified t face font-lock-comment-delimiter-face) 709 720 (fontified t face font-lock-comment-face) 720 722 (fontified t) 722 727 (fontified t) 727 733 (fontified t) 733 736 (fontified t face font-lock-keyword-face) 736 739 (fontified t) 739 741 (fontified t face font-lock-keyword-face) 741 742 (fontified t) 742 746 (fontified t face font-lock-builtin-face) 746 747 (fontified t) 747 771 (fontified t face font-lock-string-face) 771 786 (fontified t) 786 790 (fontified t face font-lock-string-face) 790 805 (fontified t) 805 813 (fontified t) 813 817 (fontified t) 817 821 (fontified t face font-lock-builtin-face) 821 824 (fontified t) 824 827 (fontified t face font-lock-keyword-face) 827 830 (fontified t) 830 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 838 (fontified t face font-lock-builtin-face) 838 845 (fontified t) 845 848 (fontified t face font-lock-keyword-face) 848 851 (fontified t) 851 853 (fontified t face font-lock-keyword-face) 853 865 (fontified t) 865 867 (fontified t face font-lock-keyword-face) 867 868 (fontified t) 868 871 (fontified t face font-lock-string-face) 871 883 (fontified t) 883 886 (fontified t face font-lock-string-face) 886 905 (fontified t) 905 908 (fontified t face font-lock-builtin-face) 908 933 (fontified t) 933 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 947 (fontified t face font-lock-function-name-face) 947 955 (fontified t) 955 957 (fontified t face font-lock-comment-delimiter-face) 957 980 (fontified t face font-lock-comment-face) 980 984 (fontified t) 984 989 (fontified t) 989 998 (fontified t) 998 1001 (fontified t face font-lock-keyword-face) 1001 1004 (fontified t) 1004 1006 (fontified t face font-lock-keyword-face) 1006 1028 (fontified t) 1028 1030 (fontified t face font-lock-keyword-face) 1030 1069 (fontified t) 1069 1072 (fontified t face font-lock-keyword-face) 1072 1075 (fontified t) 1075 1078 (fontified t face font-lock-builtin-face) 1078 1086 (fontified t) 1086 1089 (fontified t face font-lock-keyword-face) 1089 1104 (fontified t) 1104 1106 (fontified t face font-lock-keyword-face) 1106 1120 (fontified t) 1120 1123 (fontified t face font-lock-string-face) 1123 1137 (fontified t) 1137 1140 (fontified t face font-lock-keyword-face) 1140 1154 (fontified t) 1154 1156 (fontified t face font-lock-keyword-face) 1156 1169 (fontified t) 1169 1171 (fontified t face font-lock-keyword-face) 1171 1208 (fontified t) 1208 1211 (fontified t face font-lock-keyword-face) 1211 1214 (fontified t) 1214 1216 (fontified t face font-lock-keyword-face) 1216 1243 (fontified t) 1243 1246 (fontified t face font-lock-builtin-face) 1246 1332 (fontified t) 1332 1334 (fontified t face font-lock-keyword-face) 1334 1379 (fontified t) 1379 1384 (fontified t) 1384 1410 (fontified t) 1410 1415 (fontified t face font-lock-keyword-face) 1415 1420 (fontified t) 1420 1426 (fontified t face font-lock-keyword-face) 1426 1435 (fontified t) 1435 1438 (fontified t face font-lock-builtin-face) 1438 1455 (fontified t) 1455 1458 (fontified t face font-lock-keyword-face) 1458 1461 (fontified t) 1461 1463 (fontified t face font-lock-keyword-face) 1463 1471 (fontified t) 1471 1473 (fontified t face font-lock-keyword-face) 1473 1500 (fontified t) 1500 1507 (fontified t) 1507 1512 (fontified t face font-lock-builtin-face) 1512 1519 (fontified t) 1519 1529 (fontified t face font-lock-string-face) 1529 1552 (fontified t) 1552 1562 (fontified t face font-lock-string-face) 1562 1582 (fontified t)) . 1) (undo-tree-id115 . -259) (undo-tree-id116 . -722) (undo-tree-id117 . -793) (undo-tree-id118 . -453) (undo-tree-id119 . -453) (undo-tree-id120 . -453) (undo-tree-id121 . -360) (undo-tree-id122 . -360) (undo-tree-id123 . -360) (undo-tree-id124 . -373) (undo-tree-id125 . -373) (undo-tree-id126 . -453) (undo-tree-id127 . -453) (undo-tree-id128 . -453) (undo-tree-id129 . -467) (undo-tree-id130 . -195) (undo-tree-id131 . -453) (undo-tree-id132 . -102) (undo-tree-id133 . -259) (undo-tree-id134 . -89) 103) nil (26107 55777 188178 634000) 0 nil] [nil nil ((1 . 1687) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\")
B = []

for i in range(26):
    lower = ord(\"a\")
    upper = ord(\"A\")
    B.append([chr(lower), xor_bytes(xored_message, bytes(chr(lower + i) * len(xored_message)))])
    B.append([chr(upper), xor_bytes(xored_message, bytes(chr(upper + i) * len(xored_message)))])

# ==========
for i, j in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 29 (fontified t) 29 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 87 (fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 117 (fontified t) 117 187 (fontified t face font-lock-string-face) 187 188 (fontified t) 188 189 (fontified t) 189 190 (fontified t face font-lock-variable-name-face) 190 197 (fontified t) 197 200 (fontified t face font-lock-keyword-face) 200 203 (fontified t) 203 205 (fontified t face font-lock-keyword-face) 205 206 (fontified t) 206 211 (fontified t face font-lock-builtin-face) 211 214 (fontified t) 214 217 (fontified t) 217 221 (fontified t) 221 226 (fontified t face font-lock-variable-name-face) 226 229 (fontified t) 229 232 (fontified t face font-lock-builtin-face) 232 233 (fontified t) 233 236 (fontified t face font-lock-string-face) 236 238 (fontified t) 238 242 (fontified t) 242 247 (fontified t face font-lock-variable-name-face) 247 250 (fontified t) 250 253 (fontified t face font-lock-builtin-face) 253 254 (fontified t) 254 257 (fontified t face font-lock-string-face) 257 258 (fontified t) 258 259 (fontified t) 259 273 (fontified t) 273 276 (fontified t face font-lock-builtin-face) 276 295 (fontified t) 295 308 (fontified t) 308 310 (fontified t) 310 315 (fontified t face font-lock-builtin-face) 315 316 (fontified t) 316 319 (fontified t face font-lock-builtin-face) 319 333 (fontified t) 333 336 (fontified t face font-lock-builtin-face) 336 337 (fontified t) 337 350 (fontified t) 350 356 (fontified t) 356 360 (fontified t) 360 370 (fontified t) 370 373 (fontified t face font-lock-builtin-face) 373 374 (fontified t) 374 379 (fontified t) 379 392 (fontified t) 392 405 (fontified t) 405 407 (fontified t) 407 412 (fontified t face font-lock-builtin-face) 412 413 (fontified t) 413 416 (fontified t face font-lock-builtin-face) 416 417 (fontified t) 417 422 (fontified t) 422 430 (fontified t) 430 433 (fontified t face font-lock-builtin-face) 433 434 (fontified t) 434 447 (fontified t) 447 453 (fontified t) 453 454 (fontified t) 454 456 (fontified t face font-lock-comment-delimiter-face) 456 467 (fontified t face font-lock-comment-face) 467 470 (fontified t face font-lock-keyword-face) 470 476 (fontified t) 476 478 (fontified t face font-lock-keyword-face) 478 482 (fontified t) 482 486 (fontified t) 486 488 (fontified t face font-lock-keyword-face) 488 522 (fontified t) 522 527 (fontified t face font-lock-builtin-face) 527 554 (fontified t) 554 559 (fontified t face font-lock-builtin-face) 559 560 (fontified t) 560 566 (fontified t face font-lock-string-face) 566 569 (fontified t) 569 571 (fontified t face font-lock-comment-delimiter-face) 571 707 (fontified t face font-lock-comment-face) 707 709 (fontified t face font-lock-comment-delimiter-face) 709 720 (fontified t face font-lock-comment-face) 720 722 (fontified t) 722 727 (fontified t) 727 733 (fontified t) 733 736 (fontified t face font-lock-keyword-face) 736 739 (fontified t) 739 741 (fontified t face font-lock-keyword-face) 741 742 (fontified t) 742 746 (fontified t face font-lock-builtin-face) 746 747 (fontified t) 747 771 (fontified t face font-lock-string-face) 771 786 (fontified t) 786 790 (fontified t face font-lock-string-face) 790 805 (fontified t) 805 813 (fontified t) 813 817 (fontified t) 817 821 (fontified t face font-lock-builtin-face) 821 824 (fontified t) 824 827 (fontified t face font-lock-keyword-face) 827 830 (fontified t) 830 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 838 (fontified t face font-lock-builtin-face) 838 845 (fontified t) 845 848 (fontified t face font-lock-keyword-face) 848 851 (fontified t) 851 853 (fontified t face font-lock-keyword-face) 853 865 (fontified t) 865 867 (fontified t face font-lock-keyword-face) 867 868 (fontified t) 868 871 (fontified t face font-lock-string-face) 871 883 (fontified t) 883 886 (fontified t face font-lock-string-face) 886 905 (fontified t) 905 908 (fontified t face font-lock-builtin-face) 908 933 (fontified t) 933 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 947 (fontified t face font-lock-function-name-face) 947 955 (fontified t) 955 957 (fontified t face font-lock-comment-delimiter-face) 957 980 (fontified t face font-lock-comment-face) 980 984 (fontified t) 984 989 (fontified t) 989 998 (fontified t) 998 1001 (fontified t face font-lock-keyword-face) 1001 1004 (fontified t) 1004 1006 (fontified t face font-lock-keyword-face) 1006 1028 (fontified t) 1028 1030 (fontified t face font-lock-keyword-face) 1030 1069 (fontified t) 1069 1072 (fontified t face font-lock-keyword-face) 1072 1075 (fontified t) 1075 1078 (fontified t face font-lock-builtin-face) 1078 1086 (fontified t) 1086 1089 (fontified t face font-lock-keyword-face) 1089 1104 (fontified t) 1104 1106 (fontified t face font-lock-keyword-face) 1106 1120 (fontified t) 1120 1123 (fontified t face font-lock-string-face) 1123 1137 (fontified t) 1137 1140 (fontified t face font-lock-keyword-face) 1140 1154 (fontified t) 1154 1156 (fontified t face font-lock-keyword-face) 1156 1169 (fontified t) 1169 1171 (fontified t face font-lock-keyword-face) 1171 1208 (fontified t) 1208 1211 (fontified t face font-lock-keyword-face) 1211 1214 (fontified t) 1214 1216 (fontified t face font-lock-keyword-face) 1216 1243 (fontified t) 1243 1246 (fontified t face font-lock-builtin-face) 1246 1332 (fontified t) 1332 1334 (fontified t face font-lock-keyword-face) 1334 1379 (fontified t) 1379 1384 (fontified t) 1384 1410 (fontified t) 1410 1415 (fontified t face font-lock-keyword-face) 1415 1420 (fontified t) 1420 1426 (fontified t face font-lock-keyword-face) 1426 1435 (fontified t) 1435 1438 (fontified t face font-lock-builtin-face) 1438 1455 (fontified t) 1455 1458 (fontified t face font-lock-keyword-face) 1458 1461 (fontified t) 1461 1463 (fontified t face font-lock-keyword-face) 1463 1471 (fontified t) 1471 1473 (fontified t face font-lock-keyword-face) 1473 1507 (fontified t) 1507 1512 (fontified t face font-lock-builtin-face) 1512 1519 (fontified t) 1519 1529 (fontified t face font-lock-string-face) 1529 1552 (fontified t) 1552 1562 (fontified t face font-lock-string-face) 1562 1582 (fontified t)) . 1) (undo-tree-id14 . -259) (undo-tree-id15 . -722) (undo-tree-id16 . -793) (undo-tree-id17 . -453) (undo-tree-id18 . -453) (undo-tree-id19 . -453) (undo-tree-id20 . -360) (undo-tree-id21 . -360) (undo-tree-id22 . -360) (undo-tree-id23 . -373) (undo-tree-id24 . -373) (undo-tree-id25 . -453) (undo-tree-id26 . -453) (undo-tree-id27 . -453) (undo-tree-id28 . -467) (undo-tree-id29 . -195) (undo-tree-id30 . -453) (undo-tree-id31 . -102) (undo-tree-id32 . -259) (undo-tree-id33 . -722) (undo-tree-id34 . -89) 103) ((1 . 1583) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)
B = []

for i in range(26):
    lower = ord(\"a\")
    upper = ord(\"A\")
    B.append(
        [
            chr(lower),
            xor_bytes(xored_message, bytes(chr(lower + i) * len(xored_message))),
        ]
    )
    B.append(
        [
            chr(upper),
            xor_bytes(xored_message, bytes(chr(upper + i) * len(xored_message))),
        ]
    )

# ==========
for i, j in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 195 (fontified t) 195 196 (fontified t face font-lock-variable-name-face) 196 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 217 (fontified t face font-lock-builtin-face) 217 227 (fontified t) 227 232 (fontified t face font-lock-variable-name-face) 232 235 (fontified t) 235 238 (fontified t face font-lock-builtin-face) 238 239 (fontified t) 239 242 (fontified t face font-lock-string-face) 242 248 (fontified t) 248 253 (fontified t face font-lock-variable-name-face) 253 256 (fontified t) 256 259 (fontified t face font-lock-builtin-face) 259 260 (fontified t) 260 263 (fontified t face font-lock-string-face) 263 301 (fontified t) 301 304 (fontified t face font-lock-builtin-face) 304 350 (fontified t) 350 355 (fontified t face font-lock-builtin-face) 355 356 (fontified t) 356 359 (fontified t face font-lock-builtin-face) 359 373 (fontified t) 373 376 (fontified t face font-lock-builtin-face) 376 447 (fontified t) 447 450 (fontified t face font-lock-builtin-face) 450 496 (fontified t) 496 501 (fontified t face font-lock-builtin-face) 501 502 (fontified t) 502 505 (fontified t face font-lock-builtin-face) 505 519 (fontified t) 519 522 (fontified t face font-lock-builtin-face) 522 558 (fontified t) 558 560 (fontified t face font-lock-comment-delimiter-face) 560 571 (fontified t face font-lock-comment-face) 571 574 (fontified t face font-lock-keyword-face) 574 580 (fontified t) 580 582 (fontified t face font-lock-keyword-face) 582 590 (fontified t) 590 592 (fontified t face font-lock-keyword-face) 592 626 (fontified t) 626 631 (fontified t face font-lock-builtin-face) 631 658 (fontified t) 658 663 (fontified t face font-lock-builtin-face) 663 664 (fontified t) 664 670 (fontified t face font-lock-string-face) 670 673 (fontified t) 673 675 (fontified t face font-lock-comment-delimiter-face) 675 811 (fontified t face font-lock-comment-face) 811 813 (fontified t face font-lock-comment-delimiter-face) 813 824 (fontified t face font-lock-comment-face) 824 837 (fontified t) 837 840 (fontified t face font-lock-keyword-face) 840 843 (fontified t) 843 845 (fontified t face font-lock-keyword-face) 845 846 (fontified t) 846 850 (fontified t face font-lock-builtin-face) 850 851 (fontified t) 851 875 (fontified t face font-lock-string-face) 875 890 (fontified t) 890 894 (fontified t face font-lock-string-face) 894 921 (fontified t) 921 925 (fontified t face font-lock-builtin-face) 925 928 (fontified t) 928 931 (fontified t face font-lock-keyword-face) 931 934 (fontified t) 934 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 942 (fontified t face font-lock-builtin-face) 942 949 (fontified t) 949 952 (fontified t face font-lock-keyword-face) 952 955 (fontified t) 955 957 (fontified t face font-lock-keyword-face) 957 969 (fontified t) 969 971 (fontified t face font-lock-keyword-face) 971 972 (fontified t) 972 975 (fontified t face font-lock-string-face) 975 987 (fontified t) 987 990 (fontified t face font-lock-string-face) 990 1009 (fontified t) 1009 1012 (fontified t face font-lock-builtin-face) 1012 1037 (fontified t) 1037 1040 (fontified t face font-lock-keyword-face) 1040 1041 (fontified t) 1041 1051 (fontified t face font-lock-function-name-face) 1051 1059 (fontified t) 1059 1061 (fontified t face font-lock-comment-delimiter-face) 1061 1084 (fontified t face font-lock-comment-face) 1084 1102 (fontified t) 1102 1105 (fontified t face font-lock-keyword-face) 1105 1108 (fontified t) 1108 1110 (fontified t face font-lock-keyword-face) 1110 1132 (fontified t) 1132 1134 (fontified t face font-lock-keyword-face) 1134 1173 (fontified t) 1173 1176 (fontified t face font-lock-keyword-face) 1176 1179 (fontified t) 1179 1182 (fontified t face font-lock-builtin-face) 1182 1190 (fontified t) 1190 1193 (fontified t face font-lock-keyword-face) 1193 1208 (fontified t) 1208 1210 (fontified t face font-lock-keyword-face) 1210 1224 (fontified t) 1224 1227 (fontified t face font-lock-string-face) 1227 1241 (fontified t) 1241 1244 (fontified t face font-lock-keyword-face) 1244 1258 (fontified t) 1258 1260 (fontified t face font-lock-keyword-face) 1260 1273 (fontified t) 1273 1275 (fontified t face font-lock-keyword-face) 1275 1312 (fontified t) 1312 1315 (fontified t face font-lock-keyword-face) 1315 1318 (fontified t) 1318 1320 (fontified t face font-lock-keyword-face) 1320 1347 (fontified t) 1347 1350 (fontified t face font-lock-builtin-face) 1350 1436 (fontified t) 1436 1438 (fontified t face font-lock-keyword-face) 1438 1500 (fontified t) 1500 1514 (fontified t) 1514 1519 (fontified t face font-lock-keyword-face) 1519 1520 (fontified t)) . 1) (undo-tree-id113 . -102) (undo-tree-id114 . -89) (t 26107 55774 393281 313000)) (26107 55774 334136 339000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -393) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . 1) (undo-tree-id203 . -1) (#("," 0 1 (fontified t)) . -394) (undo-tree-id204 . -1) (undo-tree-id205 . -1) 395 (t 26107 55777 324541 702000)) nil (26107 55876 800779 187000) 0 nil])
nil
([nil nil ((393 . 394)) nil (26107 55876 800773 155000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -539) (undo-tree-id199 . -1) 540) nil (26107 55876 800771 499000) 0 nil])
([nil nil ((1 . 1687) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)
B = []

for i in range(26):
    lower = ord(\"a\")
    upper = ord(\"A\")
    B.append(
        [
            chr(lower),
            xor_bytes(xored_message, bytes(chr(lower + i) * len(xored_message)))
        ]
    )
    B.append(
        [
            chr(upper),
            xor_bytes(xored_message, bytes(chr(upper + i) * len(xored_message)))
        ]
    )

# ==========
for i, j in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 195 (fontified t) 195 196 (fontified t face font-lock-variable-name-face) 196 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 217 (fontified t face font-lock-builtin-face) 217 227 (fontified t) 227 232 (fontified t face font-lock-variable-name-face) 232 235 (fontified t) 235 238 (fontified t face font-lock-builtin-face) 238 239 (fontified t) 239 242 (fontified t face font-lock-string-face) 242 248 (fontified t) 248 253 (fontified t face font-lock-variable-name-face) 253 256 (fontified t) 256 259 (fontified t face font-lock-builtin-face) 259 260 (fontified t) 260 263 (fontified t face font-lock-string-face) 263 301 (fontified t) 301 304 (fontified t face font-lock-builtin-face) 304 313 (fontified t) 313 350 (fontified t) 350 355 (fontified t face font-lock-builtin-face) 355 356 (fontified t) 356 359 (fontified t face font-lock-builtin-face) 359 373 (fontified t) 373 376 (fontified t face font-lock-builtin-face) 376 394 (fontified t) 394 446 (fontified t) 446 449 (fontified t face font-lock-builtin-face) 449 458 (fontified t) 458 495 (fontified t) 495 500 (fontified t face font-lock-builtin-face) 500 501 (fontified t) 501 504 (fontified t face font-lock-builtin-face) 504 518 (fontified t) 518 521 (fontified t face font-lock-builtin-face) 521 539 (fontified t) 539 556 (fontified t) 556 558 (fontified t face font-lock-comment-delimiter-face) 558 569 (fontified t face font-lock-comment-face) 569 572 (fontified t face font-lock-keyword-face) 572 578 (fontified t) 578 580 (fontified t face font-lock-keyword-face) 580 588 (fontified t) 588 590 (fontified t face font-lock-keyword-face) 590 624 (fontified t) 624 629 (fontified t face font-lock-builtin-face) 629 656 (fontified t) 656 661 (fontified t face font-lock-builtin-face) 661 662 (fontified t) 662 668 (fontified t face font-lock-string-face) 668 671 (fontified t) 671 673 (fontified t face font-lock-comment-delimiter-face) 673 809 (fontified t face font-lock-comment-face) 809 811 (fontified t face font-lock-comment-delimiter-face) 811 822 (fontified t face font-lock-comment-face) 822 835 (fontified t) 835 838 (fontified t face font-lock-keyword-face) 838 841 (fontified t) 841 843 (fontified t face font-lock-keyword-face) 843 844 (fontified t) 844 848 (fontified t face font-lock-builtin-face) 848 849 (fontified t) 849 873 (fontified t face font-lock-string-face) 873 888 (fontified t) 888 892 (fontified t face font-lock-string-face) 892 919 (fontified t) 919 923 (fontified t face font-lock-builtin-face) 923 926 (fontified t) 926 929 (fontified t face font-lock-keyword-face) 929 932 (fontified t) 932 934 (fontified t face font-lock-keyword-face) 934 935 (fontified t) 935 940 (fontified t face font-lock-builtin-face) 940 947 (fontified t) 947 950 (fontified t face font-lock-keyword-face) 950 953 (fontified t) 953 955 (fontified t face font-lock-keyword-face) 955 967 (fontified t) 967 969 (fontified t face font-lock-keyword-face) 969 970 (fontified t) 970 973 (fontified t face font-lock-string-face) 973 985 (fontified t) 985 988 (fontified t face font-lock-string-face) 988 1007 (fontified t) 1007 1010 (fontified t face font-lock-builtin-face) 1010 1035 (fontified t) 1035 1038 (fontified t face font-lock-keyword-face) 1038 1039 (fontified t) 1039 1049 (fontified t face font-lock-function-name-face) 1049 1057 (fontified t) 1057 1059 (fontified t face font-lock-comment-delimiter-face) 1059 1082 (fontified t face font-lock-comment-face) 1082 1100 (fontified t) 1100 1103 (fontified t face font-lock-keyword-face) 1103 1106 (fontified t) 1106 1108 (fontified t face font-lock-keyword-face) 1108 1130 (fontified t) 1130 1132 (fontified t face font-lock-keyword-face) 1132 1171 (fontified t) 1171 1174 (fontified t face font-lock-keyword-face) 1174 1177 (fontified t) 1177 1180 (fontified t face font-lock-builtin-face) 1180 1188 (fontified t) 1188 1191 (fontified t face font-lock-keyword-face) 1191 1206 (fontified t) 1206 1208 (fontified t face font-lock-keyword-face) 1208 1222 (fontified t) 1222 1225 (fontified t face font-lock-string-face) 1225 1239 (fontified t) 1239 1242 (fontified t face font-lock-keyword-face) 1242 1256 (fontified t) 1256 1258 (fontified t face font-lock-keyword-face) 1258 1271 (fontified t) 1271 1273 (fontified t face font-lock-keyword-face) 1273 1310 (fontified t) 1310 1313 (fontified t face font-lock-keyword-face) 1313 1316 (fontified t) 1316 1318 (fontified t face font-lock-keyword-face) 1318 1345 (fontified t) 1345 1348 (fontified t face font-lock-builtin-face) 1348 1434 (fontified t) 1434 1436 (fontified t face font-lock-keyword-face) 1436 1498 (fontified t) 1498 1512 (fontified t) 1512 1517 (fontified t face font-lock-keyword-face) 1517 1518 (fontified t) 1518 1522 (fontified t) 1522 1528 (fontified t face font-lock-keyword-face) 1528 1537 (fontified t) 1537 1540 (fontified t face font-lock-builtin-face) 1540 1557 (fontified t) 1557 1560 (fontified t face font-lock-keyword-face) 1560 1563 (fontified t) 1563 1565 (fontified t face font-lock-keyword-face) 1565 1573 (fontified t) 1573 1575 (fontified t face font-lock-keyword-face) 1575 1609 (fontified t) 1609 1614 (fontified t face font-lock-builtin-face) 1614 1621 (fontified t) 1621 1631 (fontified t face font-lock-string-face) 1631 1654 (fontified t) 1654 1664 (fontified t face font-lock-string-face) 1664 1684 (fontified t)) . 1) (undo-tree-id135 . -313) (undo-tree-id136 . -394) (undo-tree-id137 . -538) (undo-tree-id138 . -392) (undo-tree-id139 . -824) (undo-tree-id140 . -824) (undo-tree-id141 . -832) (undo-tree-id142 . -824) (undo-tree-id143 . -824) (undo-tree-id144 . -832) (undo-tree-id145 . -967) (undo-tree-id146 . -967) (undo-tree-id147 . -967) (undo-tree-id148 . -967) (undo-tree-id149 . -1130) (undo-tree-id150 . -1130) (undo-tree-id151 . -1130) (undo-tree-id152 . -1609) (undo-tree-id153 . -1609) (undo-tree-id154 . -1609) (undo-tree-id155 . -1609) (undo-tree-id156 . -656) (undo-tree-id157 . -656) (undo-tree-id158 . -824) (undo-tree-id159 . -824) (undo-tree-id160 . -832) (undo-tree-id161 . -824) (undo-tree-id162 . -824) (undo-tree-id163 . -832) (undo-tree-id164 . -967) (undo-tree-id165 . -967) (undo-tree-id166 . -967) (undo-tree-id167 . -967) (undo-tree-id168 . -1130) (undo-tree-id169 . -1130) (undo-tree-id170 . -1130) (undo-tree-id171 . -1609) (undo-tree-id172 . -1609) (undo-tree-id173 . -1609) (undo-tree-id174 . -1609) (undo-tree-id175 . -458) (undo-tree-id176 . 1147) (undo-tree-id177 . -538) (undo-tree-id178 . 1205) (undo-tree-id179 . -480) (undo-tree-id180 . -656) (undo-tree-id181 . -656) (undo-tree-id182 . -824) (undo-tree-id183 . -824) (undo-tree-id184 . -832) (undo-tree-id185 . -824) (undo-tree-id186 . -824) (undo-tree-id187 . -832) (undo-tree-id188 . -967) (undo-tree-id189 . -967) (undo-tree-id190 . -967) (undo-tree-id191 . -967) (undo-tree-id192 . -1130) (undo-tree-id193 . -1130) (undo-tree-id194 . -1130) (undo-tree-id195 . -1609) (undo-tree-id196 . -1609) (undo-tree-id197 . -1609) (undo-tree-id198 . -1609) 539) nil (26107 55883 133026 640000) 0 nil])
([nil nil ((#("bytes(" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t)) . -351) (undo-tree-id236 . -6) 357 (t 26107 55876 989922 179000)) nil (26107 56066 654011 429000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 435) (t 26107 55876 989922 179000)) ((435 . 436)) (26107 55882 623558 622000) 0 nil])
([nil nil ((351 . 352)) nil (26107 56066 654009 276000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -540) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 541) ((540 . 541)) (26107 55882 623503 30000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -386) (undo-tree-id226 . -1) (undo-tree-id227 . 1) (undo-tree-id228 . -1) (#(")" 0 1 (fontified t)) . -387) (undo-tree-id229 . -1) (undo-tree-id230 . 1) (undo-tree-id231 . -1) (#(")" 0 1 (fontified t)) . -388) (undo-tree-id232 . -1) (undo-tree-id233 . 1) (undo-tree-id234 . -1) (#("," 0 1 (fontified t)) . -389) (undo-tree-id235 . -1) 390) nil (26107 56066 654007 286000) 0 nil])
nil
([nil nil ((386 . 394)) nil (26107 56066 653997 514000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -393) (undo-tree-id225 . -1) 394) nil (26107 56066 653996 394000) 0 nil])
([nil nil ((393 . 397)) nil (26107 56066 653994 554000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -396) (undo-tree-id224 . -1) 397) nil (26107 56066 653993 600000) 0 nil])
([nil nil ((396 . 404)) nil (26107 56066 653991 732000) 0 nil])
([nil nil ((#("bytes(chr(upper + i) * len(xored_message)))," 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t) 6 9 (fontified t face font-lock-builtin-face) 9 23 (fontified t) 23 26 (fontified t face font-lock-builtin-face) 26 44 (fontified t)) . 506)) nil (26107 56066 653990 837000) 0 nil])
([nil nil ((nil rear-nonsticky nil 549 . 550) (nil fontified nil 532 . 550) (nil fontified nil 529 . 532) (nil fontified nil 515 . 529) (nil fontified nil 512 . 515) (nil fontified nil 511 . 512) (nil fontified nil 506 . 511) (506 . 550)) nil (26107 56066 653989 670000) 0 nil])
([nil nil ((nil rear-nonsticky nil 558 . 559) (nil fontified nil 558 . 559) (nil fontified nil 551 . 558) (nil fontified nil 527 . 551) (nil fontified nil 524 . 527) (nil fontified nil 510 . 524) (nil fontified nil 507 . 510) (nil fontified nil 506 . 507) (506 . 559) (#("bytes(chr(upper + i) * len(xored_message)))," 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t) 6 9 (fontified t face font-lock-builtin-face) 9 23 (fontified t) 23 26 (fontified t face font-lock-builtin-face) 26 43 (fontified t) 43 44 (fontified t rear-nonsticky t)) . -506) (undo-tree-id223 . -44) 550) nil (26107 56066 653986 935000) 0 nil])
([nil nil ((#("lower" 0 5 (fontified t)) . -511) (undo-tree-id222 . -5) 516) nil (26107 56066 653983 332000) 0 nil])
([nil nil ((511 . 517)) nil (26107 56066 653981 447000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -515) (undo-tree-id220 . -1) (#("r" 0 1 (fontified t)) . -516) (undo-tree-id221 . -1) 517) nil (26107 56066 653980 201000) 0 nil])
([nil nil ((515 . 517)) nil (26107 56066 653977 207000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -516) (undo-tree-id219 . -1) 517) nil (26107 56066 653976 245000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -514) (undo-tree-id217 . -1) (#("e" 0 1 (fontified t)) . -515) (undo-tree-id218 . -1) 516) nil (26107 56066 653973 827000) 0 nil])
([nil nil ((514 . 516)) nil (26107 56066 653970 196000) 0 nil])
([nil nil ((404 . 405)) nil (26107 56066 653969 461000) 0 nil])
([nil nil ((560 . 561)) nil (26107 56066 653968 610000) 0 nil])
([nil nil ((311 . 315)) nil (26107 56066 653967 816000) 0 nil])
([nil nil ((471 . 475)) nil (26107 56066 653966 967000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -474) (undo-tree-id216 . -1) 475) nil (26107 56066 653965 497000) 0 nil])
([nil nil ((474 . 475)) nil (26107 56066 653962 634000) 0 nil])
([nil nil ((1 . 1777) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)
B = []

for i in range(26):
    lower = ord(\"a\")
    upper = ord(\"A\")
    B.append(
        [
            chr(lower + i),
            xor_bytes(xored_message, (chr(lower + i) * len(xored_message)).encode(\"ascii\"))
        ]
    )
    B.append(
        [
            chr(upper + i),
            xor_bytes(xored_message, (chr(upper + i) * len(xored_message)).encode(\"ascii\"))
        ]
    )

# ==========
for i, j in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 195 (fontified t) 195 196 (fontified t face font-lock-variable-name-face) 196 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 217 (fontified t face font-lock-builtin-face) 217 227 (fontified t) 227 232 (fontified t face font-lock-variable-name-face) 232 235 (fontified t) 235 238 (fontified t face font-lock-builtin-face) 238 239 (fontified t) 239 242 (fontified t face font-lock-string-face) 242 248 (fontified t) 248 253 (fontified t face font-lock-variable-name-face) 253 256 (fontified t) 256 259 (fontified t face font-lock-builtin-face) 259 260 (fontified t) 260 263 (fontified t face font-lock-string-face) 263 289 (fontified t) 289 301 (fontified t) 301 304 (fontified t face font-lock-builtin-face) 304 317 (fontified t) 317 355 (fontified t) 355 358 (fontified t face font-lock-builtin-face) 358 372 (fontified t) 372 375 (fontified t face font-lock-builtin-face) 375 399 (fontified t) 399 406 (fontified t face font-lock-string-face) 406 408 (fontified t) 408 409 (fontified t) 409 439 (fontified t) 439 448 (fontified t) 448 449 (fontified t) 449 461 (fontified t) 461 464 (fontified t face font-lock-builtin-face) 464 477 (fontified t) 477 514 (fontified t) 514 515 (fontified t) 515 518 (fontified t face font-lock-builtin-face) 518 532 (fontified t) 532 535 (fontified t face font-lock-builtin-face) 535 559 (fontified t) 559 566 (fontified t face font-lock-string-face) 566 567 (rear-nonsticky t fontified t) 567 568 (fontified t) 568 569 (fontified t) 569 579 (fontified t) 579 586 (fontified t) 586 588 (fontified t face font-lock-comment-delimiter-face) 588 599 (fontified t face font-lock-comment-face) 599 602 (fontified t face font-lock-keyword-face) 602 608 (fontified t) 608 610 (fontified t face font-lock-keyword-face) 610 618 (fontified t) 618 620 (fontified t face font-lock-keyword-face) 620 654 (fontified t) 654 659 (fontified t face font-lock-builtin-face) 659 686 (fontified t) 686 691 (fontified t face font-lock-builtin-face) 691 692 (fontified t) 692 698 (fontified t face font-lock-string-face) 698 701 (fontified t) 701 703 (fontified t face font-lock-comment-delimiter-face) 703 839 (fontified t face font-lock-comment-face) 839 841 (fontified t face font-lock-comment-delimiter-face) 841 852 (fontified t face font-lock-comment-face) 852 865 (fontified t) 865 868 (fontified t face font-lock-keyword-face) 868 871 (fontified t) 871 873 (fontified t face font-lock-keyword-face) 873 874 (fontified t) 874 878 (fontified t face font-lock-builtin-face) 878 879 (fontified t) 879 903 (fontified t face font-lock-string-face) 903 918 (fontified t) 918 922 (fontified t face font-lock-string-face) 922 949 (fontified t) 949 953 (fontified t face font-lock-builtin-face) 953 956 (fontified t) 956 959 (fontified t face font-lock-keyword-face) 959 962 (fontified t) 962 964 (fontified t face font-lock-keyword-face) 964 965 (fontified t) 965 970 (fontified t face font-lock-builtin-face) 970 977 (fontified t) 977 980 (fontified t face font-lock-keyword-face) 980 983 (fontified t) 983 985 (fontified t face font-lock-keyword-face) 985 997 (fontified t) 997 999 (fontified t face font-lock-keyword-face) 999 1000 (fontified t) 1000 1003 (fontified t face font-lock-string-face) 1003 1015 (fontified t) 1015 1018 (fontified t face font-lock-string-face) 1018 1037 (fontified t) 1037 1040 (fontified t face font-lock-builtin-face) 1040 1065 (fontified t) 1065 1068 (fontified t face font-lock-keyword-face) 1068 1069 (fontified t) 1069 1079 (fontified t face font-lock-function-name-face) 1079 1087 (fontified t) 1087 1089 (fontified t face font-lock-comment-delimiter-face) 1089 1112 (fontified t face font-lock-comment-face) 1112 1130 (fontified t) 1130 1133 (fontified t face font-lock-keyword-face) 1133 1136 (fontified t) 1136 1138 (fontified t face font-lock-keyword-face) 1138 1160 (fontified t) 1160 1162 (fontified t face font-lock-keyword-face) 1162 1201 (fontified t) 1201 1204 (fontified t face font-lock-keyword-face) 1204 1207 (fontified t) 1207 1210 (fontified t face font-lock-builtin-face) 1210 1218 (fontified t) 1218 1221 (fontified t face font-lock-keyword-face) 1221 1236 (fontified t) 1236 1238 (fontified t face font-lock-keyword-face) 1238 1252 (fontified t) 1252 1255 (fontified t face font-lock-string-face) 1255 1269 (fontified t) 1269 1272 (fontified t face font-lock-keyword-face) 1272 1286 (fontified t) 1286 1288 (fontified t face font-lock-keyword-face) 1288 1301 (fontified t) 1301 1303 (fontified t face font-lock-keyword-face) 1303 1340 (fontified t) 1340 1343 (fontified t face font-lock-keyword-face) 1343 1346 (fontified t) 1346 1348 (fontified t face font-lock-keyword-face) 1348 1375 (fontified t) 1375 1378 (fontified t face font-lock-builtin-face) 1378 1464 (fontified t) 1464 1466 (fontified t face font-lock-keyword-face) 1466 1528 (fontified t) 1528 1542 (fontified t) 1542 1547 (fontified t face font-lock-keyword-face) 1547 1548 (fontified t) 1548 1552 (fontified t) 1552 1558 (fontified t face font-lock-keyword-face) 1558 1567 (fontified t) 1567 1570 (fontified t face font-lock-builtin-face) 1570 1587 (fontified t) 1587 1590 (fontified t face font-lock-keyword-face) 1590 1593 (fontified t) 1593 1595 (fontified t face font-lock-keyword-face) 1595 1603 (fontified t) 1603 1605 (fontified t face font-lock-keyword-face) 1605 1639 (fontified t) 1639 1644 (fontified t face font-lock-builtin-face) 1644 1651 (fontified t) 1651 1661 (fontified t face font-lock-string-face) 1661 1684 (fontified t) 1684 1694 (fontified t face font-lock-string-face) 1694 1714 (fontified t)) . 1) (undo-tree-id208 . -585) (undo-tree-id209 . -474) (undo-tree-id210 . -439) (undo-tree-id211 . -585) (undo-tree-id212 . -407) (undo-tree-id213 . -514) (undo-tree-id214 . -310) (undo-tree-id215 . -449) 475) nil (26107 56066 653957 139000) 0 nil])
([nil nil ((662 . 663) (t 26107 56066 746100 532000)) nil (26107 56105 62671 839000) 0 nil])
([nil nil ((#("checkFreq" 0 9 (fontified t)) . -685) (undo-tree-id266 . -9) 694 (t 26107 56105 191223 583000)) nil (26107 56584 761708 527000) 0 nil])
([nil nil ((685 . 695)) nil (26107 56584 761703 438000) 0 nil])
([nil nil ((#("17" 0 2 (fontified t)) . -701) (undo-tree-id265 . -2) 703) nil (26107 56584 761701 73000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -699) (undo-tree-id264 . -2) 701) nil (26107 56584 761696 262000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -697) (undo-tree-id262 . -1) (#(" " 0 1 (fontified t)) . -698) (undo-tree-id263 . -1) 699) nil (26107 56584 761691 246000) 0 nil])
([nil nil ((649 . 653) (#("    " 0 4 (fontified nil)) . 648) (undo-tree-id261 . -4) (647 . 653)) nil (26107 56584 761683 866000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -649) (undo-tree-id260 . -4) 653) nil (26107 56584 761678 807000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -648) (undo-tree-id259 . -1) 649) nil (26107 56584 761672 175000) 0 nil])
([nil nil ((648 . 653)) nil (26107 56584 761668 99000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -649) (undo-tree-id258 . -4) 653) nil (26107 56584 761665 790000) 0 nil])
([nil nil ((649 . 654)) nil (26107 56584 761661 681000) 0 nil])
([nil nil ((#("Add" 0 3 (fontified t face font-lock-comment-face)) . -651) (undo-tree-id257 . -3) 654) nil (26107 56584 761659 308000) 0 nil])
([nil nil ((651 . 672)) nil (26107 56584 761655 25000) 0 nil])
([nil nil ((672 . 685)) nil (26107 56584 761653 204000) 0 nil])
([nil nil ((685 . 697)) nil (26107 56584 761651 286000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-comment-face)) . -695) (undo-tree-id255 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -696) (undo-tree-id256 . -1) 697) nil (26107 56584 761648 303000) 0 nil])
([nil nil ((695 . 701)) nil (26107 56584 761641 697000) 0 nil])
([nil nil ((701 . 702) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 700) (undo-tree-id254 . -1) (701 . 702)) nil (26107 56584 761639 104000) 0 nil])
([nil nil ((702 . 705)) nil (26107 56584 761634 113000) 0 nil])
([nil nil ((#("dec" 0 3 (fontified t)) . -702) (undo-tree-id253 . -3) 705) nil (26107 56584 761631 878000) 0 nil])
([nil nil ((702 . 714)) nil (26107 56584 761627 551000) 0 nil])
([nil nil ((#("plaintext = " 0 9 (fontified t face font-lock-variable-name-face) 9 12 (fontified t)) . -702) (undo-tree-id252 . -12) 714) nil (26107 56584 761625 306000) 0 nil])
([nil nil ((702 . 710)) nil (26107 56584 761620 745000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -709) (undo-tree-id251 . -1) 710) nil (26107 56584 761618 242000) 0 nil])
([nil nil ((709 . 720)) nil (26107 56584 761613 892000) 0 nil])
([nil nil ((#("message = " 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t)) . -710) (undo-tree-id250 . -10) 720) nil (26107 56584 761611 593000) 0 nil])
([nil nil ((#("decoded_" 0 8 (fontified t)) . -702) (undo-tree-id249 . -8) 710) nil (26107 56584 761606 685000) 0 nil])
([nil nil ((702 . 707)) nil (26107 56584 761602 91000) 0 nil])
([nil nil ((#("plain" 0 5 (fontified t)) . -702) (undo-tree-id248 . -5) 707) nil (26107 56584 761599 886000) 0 nil])
([nil nil ((702 . 706)) nil (26107 56584 761595 92000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -702) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t)) . -703) (undo-tree-id245 . -1) (#("c" 0 1 (fontified t)) . -704) (undo-tree-id246 . -1) (#("o" 0 1 (fontified t)) . -705) (undo-tree-id247 . -1) 706) nil (26107 56584 761591 299000) 0 nil])
([nil nil ((702 . 713)) nil (26107 56584 761579 288000) 0 nil])
([nil nil ((#("plaintext= " 0 9 (fontified t face font-lock-variable-name-face) 9 11 (fontified t)) . -702) (undo-tree-id243 . -11) 713) nil (26107 56584 761576 120000) 0 nil])
([nil nil ((702 . 703)) nil (26107 56584 761571 840000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -702) (undo-tree-id242 . -1) 703) nil (26107 56584 761569 555000) 0 nil])
([nil nil ((702 . 710)) nil (26107 56584 761565 175000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -709) (undo-tree-id241 . -1) 710) nil (26107 56584 761562 813000) 0 nil])
([nil nil ((709 . 714)) nil (26107 56584 761558 5000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -713) (undo-tree-id240 . -1) 714) nil (26107 56584 761555 559000) 0 nil])
([nil nil ((713 . 722)) nil (26107 56584 761550 133000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -721) (undo-tree-id239 . -1) 722) nil (26107 56584 761814 281000) 0 nil])
([nil nil ((721 . 725)) nil (26107 56695 14970 236000) 0 nil] [nil nil ((#("message = " 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t)) . -711) (undo-tree-id237 . -10) (undo-tree-id238 . -10) 721) ((711 . 721)) (26107 56584 761533 544000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -271) (undo-tree-id283 . -1) (#("a" 0 1 (fontified t)) . -272) (undo-tree-id284 . -1) (#("p" 0 1 (fontified t)) . -273) (undo-tree-id285 . -1) (#("p" 0 1 (fontified t)) . -274) (undo-tree-id286 . -1) (#("e" 0 1 (fontified t)) . -275) (undo-tree-id287 . -1) (#("n" 0 1 (fontified t)) . -276) (undo-tree-id288 . -1) (#("d" 0 1 (fontified t)) . -277) (undo-tree-id289 . -1) (#("(" 0 1 (fontified t)) . -278) (undo-tree-id290 . -1) 279) nil (26107 56695 14967 20000) 0 nil])
nil
([nil nil ((#("[" 0 1 (fontified t)) . -200) (undo-tree-id282 . -1) 201) nil (26107 56695 14955 688000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -200) (undo-tree-id279 . -1) (undo-tree-id280 . 1) (undo-tree-id281 . -1) 201) nil (26107 56695 14952 897000) 0 nil])
([nil nil ((200 . 206)) nil (26107 56695 14948 682000) 0 nil])
([nil nil ((275 . 276)) nil (26107 56695 14947 659000) 0 nil])
([nil nil ((#("chr(lower + i)" 0 3 (fontified t face font-lock-builtin-face) 3 14 (fontified t)) . 299) (undo-tree-id273 . -14) (undo-tree-id274 . -14) (undo-tree-id275 . 1) (undo-tree-id276 . -14) (undo-tree-id277 . 11) (undo-tree-id278 . -4) 313) nil (26107 56695 14946 10000) 0 nil])
([nil nil ((nil rear-nonsticky nil 289 . 290) (nil fontified nil 279 . 290) (nil fontified nil 276 . 279) (276 . 290)) nil (26107 56695 14937 941000) 0 nil])
([nil nil ((290 . 291)) nil (26107 56695 14936 21000) 0 nil])
([nil nil ((291 . 294)) nil (26107 56697 324666 501000) 0 nil])
([nil nil ((#("xor_bytes(
                xored_message, (chr(lower + i) * len(xored_message)).encode(\"ascii\")
            )" 0 43 (fontified t) 43 46 (fontified t face font-lock-builtin-face) 46 60 (fontified t) 60 63 (fontified t face font-lock-builtin-face) 63 87 (fontified t) 87 94 (fontified t face font-lock-string-face) 94 109 (fontified t)) . 331) (undo-tree-id291 . -109) (undo-tree-id292 . -96) (undo-tree-id293 . 1) (undo-tree-id294 . -109) (undo-tree-id295 . 100) (undo-tree-id296 . -10)) ((331 . 440)) (26107 56698 141126 94000) 0 nil])
([nil nil ((nil rear-nonsticky nil 402 . 403) (nil fontified nil 388 . 390) (nil fontified nil 294 . 305) (294 . 403)) ((#("xor_bytes(
                xored_message, (chr(lower + i) * len(xored_message)).encode(\"ascii\")
            )" 0 11 (fontified nil) 11 43 (fontified nil) 43 46 (fontified nil face font-lock-builtin-face) 46 60 (fontified nil) 60 63 (fontified nil face font-lock-builtin-face) 63 87 (fontified nil) 87 94 (fontified nil face font-lock-string-face) 94 96 (fontified nil) 96 108 (fontified nil) 108 109 (fontified nil rear-nonsticky nil)) . 294) (nil fontified t 294 . 305) (nil fontified t 388 . 390) (nil rear-nonsticky t 402 . 403)) (26107 56698 588922 41000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -470) (undo-tree-id297 . -1) 471) nil (26107 56704 983169 446000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -463) (undo-tree-id346 . -1) (#("a" 0 1 (fontified t)) . -464) (undo-tree-id347 . -1) (#("p" 0 1 (fontified t)) . -465) (undo-tree-id348 . -1) (#("p" 0 1 (fontified t)) . -466) (undo-tree-id349 . -1) (#("e" 0 1 (fontified t)) . -467) (undo-tree-id350 . -1) (#("n" 0 1 (fontified t)) . -468) (undo-tree-id351 . -1) (#("d" 0 1 (fontified t)) . -469) (undo-tree-id352 . -1) 470) nil (26107 56978 553499 159000) 0 nil] [nil nil ((470 . 473)) ((#(" = " 0 3 (fontified t)) . 470) (undo-tree-id298 . -3)) (26107 56704 983101 723000) 0 nil])
([nil nil ((#("chr(upper + i)" 0 3 (fontified t face font-lock-builtin-face) 3 14 (fontified t)) . 486) 500) nil (26107 56978 553491 498000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 476 . 477) (nil fontified nil 466 . 477) (nil fontified nil 463 . 466) (463 . 477)) nil (26107 56978 553490 424000) 0 nil])
([nil nil ((477 . 481)) nil (26107 56978 553489 72000) 0 nil])
([nil nil ((#("xor_bytes(
                xored_message, (chr(upper + i) * len(xored_message)).encode(\"ascii\")
            )" 0 43 (fontified t) 43 46 (fontified t face font-lock-builtin-face) 46 60 (fontified t) 60 63 (fontified t face font-lock-builtin-face) 63 87 (fontified t) 87 94 (fontified t face font-lock-string-face) 94 109 (fontified t)) . 518) 627) nil (26107 56978 553488 178000) 0 nil])
([nil nil ((nil rear-nonsticky nil 589 . 590) (nil fontified nil 575 . 590) (nil fontified nil 568 . 575) (nil fontified nil 544 . 568) (nil fontified nil 541 . 544) (nil fontified nil 527 . 541) (nil fontified nil 524 . 527) (nil fontified nil 481 . 524) (481 . 590)) nil (26107 56978 553486 879000) 0 nil])
([nil nil ((463 . 464)) nil (26107 56978 553484 563000) 0 nil])
([nil nil ((#("        [
            ,
            ,
        ]
    )
" 0 10 (fontified t) 10 22 (fontified t) 22 24 (fontified t) 24 36 (fontified t) 36 38 (fontified t) 38 48 (fontified t) 48 54 (fontified t)) . -592) (undo-tree-id341 . -54) (undo-tree-id342 . -22) (undo-tree-id343 . -36) (undo-tree-id344 . -36) (undo-tree-id345 . -54) 646) nil (26107 56978 553483 451000) 0 nil])
([nil nil ((#("    )
" 0 6 (fontified t)) . -452) (undo-tree-id339 . -6) (undo-tree-id340 . -6) 458) nil (26107 56978 553478 370000) 0 nil])
([nil nil ((#("        [
            ,
            ,
        ]
" 0 10 (fontified t) 10 22 (fontified t) 22 24 (fontified t) 24 36 (fontified t) 36 38 (fontified t) 38 48 (fontified t)) . -404) (undo-tree-id334 . -36) (undo-tree-id335 . -36) (undo-tree-id336 . -48) (undo-tree-id337 . -48) (undo-tree-id338 . -48) 452) nil (26107 56978 553475 350000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t rear-nonsticky t)) . -402) (undo-tree-id331 . -1) (undo-tree-id332 . 1) (undo-tree-id333 . -1) 403) nil (26107 56978 553469 234000) 0 nil])
([nil nil ((402 . 403)) nil (26107 56978 553465 854000) 0 nil])
([nil nil ((#(")" 0 1 (rear-nonsticky t fontified t)) . -536) (undo-tree-id328 . -1) (undo-tree-id329 . 1) (undo-tree-id330 . -1) 537) nil (26107 56978 553464 720000) 0 nil])
([nil nil ((536 . 537)) nil (26107 56978 553461 50000) 0 nil])
([nil nil ((615 . 622)) nil (26107 56978 553460 286000) 0 nil])
([nil nil ((622 . 634)) nil (26107 56978 553459 579000) 0 nil])
([nil nil ((634 . 641)) nil (26107 56978 553458 758000) 0 nil])
([nil nil ((#("freq" 0 4 (fontified t)) . -637) (undo-tree-id327 . -4) 641) nil (26107 56978 553457 844000) 0 nil])
([nil nil ((#("char_" 0 5 (fontified t)) . -632) (undo-tree-id326 . -5) 637) nil (26107 56978 553455 894000) 0 nil])
([nil nil ((632 . 636)) nil (26107 56978 553454 189000) 0 nil])
([nil nil ((#("freq" 0 4 (fontified t)) . -632) (undo-tree-id325 . -4) 636) nil (26107 56978 553453 258000) 0 nil])
([nil nil ((#("original_message = max(B, key=lambda x: " 0 9 (fontified t face font-lock-variable-name-face) 9 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 22 (fontified t face font-lock-builtin-face) 22 30 (fontified t) 30 36 (fontified t face font-lock-keyword-face) 36 40 (fontified t)) . 592)) nil (26107 56978 553451 461000) 0 nil])
([nil nil ((592 . 597)) nil (26107 56978 553450 683000) 0 nil])
([nil nil ((#("freq_" 0 5 (fontified t)) . -592) (undo-tree-id324 . -5) 597) nil (26107 56978 553449 655000) 0 nil])
([nil nil ((592 . 601)) nil (26107 56978 553447 657000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -600) (undo-tree-id323 . -1) 601) nil (26107 56978 553446 655000) 0 nil])
([nil nil ((#("original" 0 8 (fontified t)) . -592) (undo-tree-id322 . -8) 600) nil (26107 56978 553444 270000) 0 nil])
([nil nil ((592 . 601)) nil (26107 56978 553442 504000) 0 nil])
([nil nil ((601 . 606)) nil (26107 56978 553441 660000) 0 nil])
([nil nil ((606 . 611)) nil (26107 56978 553440 838000) 0 nil])
([nil nil ((#("for char in B:" 0 3 (fontified t face font-lock-keyword-face) 3 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 14 (fontified t)) . 592)) nil (26107 56978 553439 890000) 0 nil])
([nil nil ((nil rear-nonsticky nil 645 . 646) (nil fontified nil 592 . 646) (592 . 646)) nil (26107 56978 553438 981000) 0 nil])
([nil nil ((592 . 599)) nil (26107 56978 553437 419000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -598) (undo-tree-id321 . -1) 599) nil (26107 56978 553436 372000) 0 nil])
([nil nil ((598 . 611)) nil (26107 56978 553433 836000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -590) (undo-tree-id320 . -1) 591) nil (26107 56978 553432 447000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -665) (undo-tree-id319 . -4) 669) nil (26107 56978 553429 228000) 0 nil])
([nil nil ((1 . 1759) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)
B = dict()

for i in range(26):
    lower = ord(\"a\")
    upper = ord(\"A\")
    B[chr(lower + i)] = xor_bytes(
                xored_message, (chr(lower + i) * len(xored_message)).encode(\"ascii\")
            )
    B[chr(upper + i)] = xor_bytes(
                xored_message, (chr(upper + i) * len(xored_message)).encode(\"ascii\")
            )

# Find the string with the highest frequency score.
original_message = max(B, key=lambda x: freq_score(B[x].decode(\"ascii\")))


# ==========

for i, j in B:
    if freq_score(j) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 195 (fontified t) 195 196 (fontified t face font-lock-variable-name-face) 196 199 (fontified t) 199 203 (fontified t face font-lock-builtin-face) 203 205 (fontified t) 205 206 (fontified t) 206 207 (fontified t) 207 210 (fontified t face font-lock-keyword-face) 210 213 (fontified t) 213 215 (fontified t face font-lock-keyword-face) 215 216 (fontified t) 216 221 (fontified t face font-lock-builtin-face) 221 231 (fontified t) 231 236 (fontified t face font-lock-variable-name-face) 236 239 (fontified t) 239 242 (fontified t face font-lock-builtin-face) 242 243 (fontified t) 243 246 (fontified t face font-lock-string-face) 246 252 (fontified t) 252 257 (fontified t face font-lock-variable-name-face) 257 260 (fontified t) 260 263 (fontified t face font-lock-builtin-face) 263 264 (fontified t) 264 267 (fontified t face font-lock-string-face) 267 269 (fontified t) 269 273 (fontified t) 273 274 (fontified t face font-lock-variable-name-face) 274 275 (fontified t) 275 278 (fontified t face font-lock-builtin-face) 278 288 (fontified t) 288 289 (fontified t rear-nonsticky t) 289 293 (fontified t) 293 304 (fontified t) 304 336 (fontified t) 336 339 (fontified t face font-lock-builtin-face) 339 353 (fontified t) 353 356 (fontified t face font-lock-builtin-face) 356 380 (fontified t) 380 387 (fontified t face font-lock-string-face) 387 389 (fontified t) 389 402 (fontified t) 402 403 (fontified t) 403 407 (fontified t) 407 408 (fontified t face font-lock-variable-name-face) 408 409 (fontified t) 409 412 (fontified t face font-lock-builtin-face) 412 422 (fontified t) 422 423 (rear-nonsticky t fontified t) 423 427 (fontified t) 427 438 (fontified t) 438 470 (fontified t) 470 473 (fontified t face font-lock-builtin-face) 473 487 (fontified t) 487 490 (fontified t face font-lock-builtin-face) 490 514 (fontified t) 514 521 (fontified t face font-lock-string-face) 521 523 (fontified t) 523 536 (fontified t) 536 537 (fontified t) 537 538 (fontified t) 538 540 (fontified t face font-lock-comment-delimiter-face) 540 589 (fontified t face font-lock-comment-face) 589 590 (fontified t face font-lock-comment-face) 590 606 (fontified t face font-lock-variable-name-face) 606 609 (fontified t) 609 612 (fontified t face font-lock-builtin-face) 612 620 (fontified t) 620 626 (fontified t face font-lock-keyword-face) 626 653 (fontified t) 653 660 (fontified t face font-lock-string-face) 660 662 (fontified t) 662 663 (rear-nonsticky t fontified t) 663 664 (fontified t) 664 665 (fontified t) 665 666 (fontified t) 666 668 (fontified t face font-lock-comment-delimiter-face) 668 679 (fontified t face font-lock-comment-face) 679 680 (fontified t) 680 683 (fontified t face font-lock-keyword-face) 683 689 (fontified t) 689 691 (fontified t face font-lock-keyword-face) 691 695 (fontified t) 695 699 (fontified t) 699 701 (fontified t face font-lock-keyword-face) 701 722 (fontified t) 722 730 (fontified t) 730 735 (fontified t face font-lock-builtin-face) 735 762 (fontified t) 762 767 (fontified t face font-lock-builtin-face) 767 768 (fontified t) 768 774 (fontified t face font-lock-string-face) 774 777 (fontified t) 777 779 (fontified t face font-lock-comment-delimiter-face) 779 915 (fontified t face font-lock-comment-face) 915 917 (fontified t face font-lock-comment-delimiter-face) 917 928 (fontified t face font-lock-comment-face) 928 930 (fontified t) 930 935 (fontified t) 935 941 (fontified t) 941 944 (fontified t face font-lock-keyword-face) 944 947 (fontified t) 947 949 (fontified t face font-lock-keyword-face) 949 950 (fontified t) 950 954 (fontified t face font-lock-builtin-face) 954 955 (fontified t) 955 979 (fontified t face font-lock-string-face) 979 994 (fontified t) 994 998 (fontified t face font-lock-string-face) 998 1013 (fontified t) 1013 1021 (fontified t) 1021 1025 (fontified t) 1025 1029 (fontified t face font-lock-builtin-face) 1029 1032 (fontified t) 1032 1035 (fontified t face font-lock-keyword-face) 1035 1038 (fontified t) 1038 1040 (fontified t face font-lock-keyword-face) 1040 1041 (fontified t) 1041 1046 (fontified t face font-lock-builtin-face) 1046 1053 (fontified t) 1053 1056 (fontified t face font-lock-keyword-face) 1056 1059 (fontified t) 1059 1061 (fontified t face font-lock-keyword-face) 1061 1073 (fontified t) 1073 1075 (fontified t face font-lock-keyword-face) 1075 1076 (fontified t) 1076 1079 (fontified t face font-lock-string-face) 1079 1091 (fontified t) 1091 1094 (fontified t face font-lock-string-face) 1094 1113 (fontified t) 1113 1116 (fontified t face font-lock-builtin-face) 1116 1141 (fontified t) 1141 1144 (fontified t face font-lock-keyword-face) 1144 1145 (fontified t) 1145 1155 (fontified t face font-lock-function-name-face) 1155 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1188 (fontified t face font-lock-comment-face) 1188 1192 (fontified t) 1192 1197 (fontified t) 1197 1206 (fontified t) 1206 1209 (fontified t face font-lock-keyword-face) 1209 1212 (fontified t) 1212 1214 (fontified t face font-lock-keyword-face) 1214 1236 (fontified t) 1236 1238 (fontified t face font-lock-keyword-face) 1238 1277 (fontified t) 1277 1280 (fontified t face font-lock-keyword-face) 1280 1283 (fontified t) 1283 1286 (fontified t face font-lock-builtin-face) 1286 1294 (fontified t) 1294 1297 (fontified t face font-lock-keyword-face) 1297 1312 (fontified t) 1312 1314 (fontified t face font-lock-keyword-face) 1314 1328 (fontified t) 1328 1331 (fontified t face font-lock-string-face) 1331 1345 (fontified t) 1345 1348 (fontified t face font-lock-keyword-face) 1348 1362 (fontified t) 1362 1364 (fontified t face font-lock-keyword-face) 1364 1377 (fontified t) 1377 1379 (fontified t face font-lock-keyword-face) 1379 1416 (fontified t) 1416 1419 (fontified t face font-lock-keyword-face) 1419 1422 (fontified t) 1422 1424 (fontified t face font-lock-keyword-face) 1424 1451 (fontified t) 1451 1454 (fontified t face font-lock-builtin-face) 1454 1514 (fontified t) 1514 1524 (fontified t) 1524 1540 (fontified t) 1540 1542 (fontified t face font-lock-keyword-face) 1542 1587 (fontified t) 1587 1592 (fontified t) 1592 1618 (fontified t) 1618 1623 (fontified t face font-lock-keyword-face) 1623 1628 (fontified t) 1628 1634 (fontified t face font-lock-keyword-face) 1634 1643 (fontified t) 1643 1646 (fontified t face font-lock-builtin-face) 1646 1650 (fontified t) 1650 1661 (fontified t) 1661 1663 (fontified t) 1663 1666 (fontified t face font-lock-keyword-face) 1666 1669 (fontified t) 1669 1671 (fontified t face font-lock-keyword-face) 1671 1679 (fontified t) 1679 1681 (fontified t face font-lock-keyword-face) 1681 1712 (fontified t) 1712 1715 (fontified t) 1715 1719 (fontified t face font-lock-builtin-face) 1719 1720 (fontified t face font-lock-builtin-face) 1720 1727 (fontified t) 1727 1733 (fontified t face font-lock-string-face) 1733 1737 (fontified t face font-lock-string-face) 1737 1757 (fontified t) 1757 1760 (fontified t) 1760 1770 (fontified t face font-lock-string-face) 1770 1790 (fontified t)) . 1) (undo-tree-id299 . -590) (undo-tree-id300 . -275) (undo-tree-id301 . -293) (undo-tree-id302 . -403) (undo-tree-id303 . -403) (undo-tree-id304 . -408) (undo-tree-id305 . -664) (undo-tree-id306 . -293) (undo-tree-id307 . -408) (undo-tree-id308 . -537) (undo-tree-id309 . -408) (undo-tree-id310 . -427) (undo-tree-id311 . -537) (undo-tree-id312 . -537) (undo-tree-id313 . -427) (undo-tree-id314 . -537) (undo-tree-id315 . -403) (undo-tree-id316 . -403) (undo-tree-id317 . -537) (undo-tree-id318 . -664) 665) nil (26107 56978 553422 707000) 0 nil])
([nil nil ((#("message" 0 7 (fontified t face font-lock-variable-name-face)) . -568) (undo-tree-id374 . -7) 575 (t 26107 56978 676816 372000)) nil (26107 57070 98386 780000) 0 nil])
([nil nil ((#("original_" 0 9 (fontified t face font-lock-variable-name-face)) . -559) (undo-tree-id373 . -9) 568) nil (26107 57070 98382 61000) 0 nil])
([nil nil ((559 . 563)) nil (26107 57070 98378 395000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -559) (undo-tree-id369 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -560) (undo-tree-id370 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -561) (undo-tree-id371 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -562) (undo-tree-id372 . -1) 563) nil (26107 57070 98375 360000) 0 nil])
([nil nil ((559 . 562)) nil (26107 57070 98365 571000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -559) (undo-tree-id366 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -560) (undo-tree-id367 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -561) (undo-tree-id368 . -1) 562) nil (26107 57070 98362 870000) 0 nil])
([nil nil ((559 . 565)) nil (26107 57070 98354 968000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -562) (undo-tree-id363 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -563) (undo-tree-id364 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -564) (undo-tree-id365 . -1) 565) nil (26107 57070 98351 943000) 0 nil])
([nil nil ((562 . 566)) nil (26107 57070 98343 232000) 0 nil])
([nil nil ((623 . 624)) nil (26107 57070 98341 683000) 0 nil])
([nil nil ((517 . 527)) nil (26107 57070 98340 90000) 0 nil])
([nil nil ((#("with" 0 4 (fontified t face font-lock-comment-face)) . -535) (undo-tree-id362 . -4) 539) nil (26107 57070 98338 117000) 0 nil])
([nil nil ((535 . 538)) nil (26107 57070 98334 235000) 0 nil])
([nil nil ((633 . 640)) nil (26107 57070 98332 697000) 0 nil])
([nil nil ((640 . 647)) nil (26107 57070 98331 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -646) (undo-tree-id361 . -1) 647) nil (26107 57070 98328 963000) 0 nil])
([nil nil ((646 . 649)) nil (26107 57070 98324 697000) 0 nil])
([nil nil ((#("the_" 0 4 (fontified t face font-lock-variable-name-face)) . -633) (undo-tree-id360 . -4) 637) nil (26107 57070 98322 645000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -643) (undo-tree-id358 . -1) (#(" " 0 1 (fontified t)) . -644) (undo-tree-id359 . -1) 645) nil (26107 57070 98317 578000) 0 nil])
([nil nil ((643 . 646)) nil (26107 57070 98308 553000) 0 nil])
([nil nil ((#("key" 0 3 (fontified t)) . -643) (undo-tree-id357 . -3) 646) nil (26107 57070 98306 501000) 0 nil])
([nil nil ((643 . 649)) nil (26107 57070 98302 278000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -648) (undo-tree-id354 . -1) (undo-tree-id355 . 1) (undo-tree-id356 . -1) 649) nil (26107 57070 98299 790000) 0 nil])
([nil nil ((648 . 649)) nil (26107 57070 517304 388000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face font-lock-variable-name-face)) . -196) (undo-tree-id383 . -1) 197) nil (26107 57123 183247 770000) 0 nil] [nil nil ((#("B" 0 1 (fontified t face font-lock-variable-name-face)) . -196) (undo-tree-id353 . -1) 197) ((196 . 197)) (26107 57070 98466 545000) 0 nil])
([nil nil ((196 . 212)) nil (26107 57123 183246 33000) 0 nil])
([nil nil ((196 . 204)) ((#("xor_dict" 0 8 (fontified t face font-lock-variable-name-face)) . 196) (undo-tree-id375 . -8)) (26107 57070 98264 349000) 0 nil])
([nil nil ((#("dict" 0 4 (fontified t face font-lock-variable-name-face)) . -208) (undo-tree-id382 . -4) 212) nil (26107 57123 183244 919000) 0 nil])
nil
([nil nil ((#("message_" 0 8 (fontified t face font-lock-variable-name-face)) . -200) (undo-tree-id381 . -8) 208) nil (26107 57123 183242 861000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t face font-lock-variable-name-face)) . -196) (undo-tree-id380 . -4) 200) nil (26107 57123 183240 850000) 0 nil])
([nil nil ((196 . 204)) nil (26107 57123 183238 45000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face font-lock-variable-name-face)) . -281) (undo-tree-id379 . -1) 282) nil (26107 57123 183237 3000) 0 nil])
([nil nil ((281 . 289)) nil (26107 57123 183234 837000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face font-lock-variable-name-face)) . -406) (undo-tree-id378 . -1) 407) nil (26107 57123 183233 804000) 0 nil])
([nil nil ((406 . 414)) nil (26107 57123 183231 820000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -603) (undo-tree-id377 . -1) 604) nil (26107 57123 183230 632000) 0 nil])
([nil nil ((603 . 606)) nil (26107 57123 183228 292000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -605) (undo-tree-id376 . -1) 606) nil (26107 57123 183226 630000) 0 nil])
([nil nil ((605 . 607)) nil (26107 57123 183217 364000) 0 nil])
([nil nil ((607 . 611)) nil (26107 57123 183212 888000) 0 nil])
([nil nil ((195 . 196) (t 26107 57123 267598 361000)) nil (26107 57167 859308 943000) 0 nil])
([nil nil ((196 . 198)) nil (26107 57167 859307 964000) 0 nil])
([nil nil ((198 . 203)) nil (26107 57167 859307 203000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-comment-face)) . -201) (undo-tree-id396 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -202) (undo-tree-id397 . -1) 203) nil (26107 57167 859306 12000) 0 nil])
([nil nil ((201 . 204)) nil (26107 57167 859303 87000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -201) (undo-tree-id393 . -1) (#(":" 0 1 (fontified t face font-lock-comment-face)) . -202) (undo-tree-id394 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -203) (undo-tree-id395 . -1) 204) nil (26107 57167 859301 766000) 0 nil])
([nil nil ((201 . 206)) nil (26107 57167 859298 230000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-comment-face)) . -203) (undo-tree-id390 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -204) (undo-tree-id391 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -205) (undo-tree-id392 . -1) 206) nil (26107 57167 859296 980000) 0 nil])
([nil nil ((203 . 216)) nil (26107 57167 859293 281000) 0 nil])
([nil nil ((216 . 234)) nil (26107 57167 859292 500000) 0 nil])
([nil nil ((#("letter " 0 7 (fontified t face font-lock-comment-face)) . -227) (undo-tree-id389 . -7) 234) nil (26107 57167 859291 473000) 0 nil])
([nil nil ((#("every " 0 6 (fontified t face font-lock-comment-face)) . -221) (undo-tree-id388 . -6) 227) nil (26107 57167 859289 610000) 0 nil])
([nil nil ((#("for " 0 4 (fontified t face font-lock-comment-face)) . -217) (undo-tree-id387 . -4) 221) nil (26107 57167 859287 707000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -216) (undo-tree-id386 . -1) 217) nil (26107 57167 859285 721000) 0 nil])
([nil nil ((216 . 222)) nil (26107 57167 859283 638000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -221) (undo-tree-id385 . -1) 222) nil (26107 57167 859282 658000) 0 nil])
([nil nil ((221 . 225)) nil (26107 57167 859280 295000) 0 nil])
([nil nil ((225 . 237)) nil (26107 57167 859279 445000) 0 nil])
([nil nil ((#("letter" 0 6 (fontified t face font-lock-comment-face)) . -231) (undo-tree-id384 . -6) 237) nil (26107 57167 859277 929000) 0 nil])
([nil nil ((231 . 252)) nil (26107 57167 859268 635000) 0 nil])
([nil nil ((252 . 253)) nil (26107 57167 859263 673000) 0 nil])
([nil nil ((#("

# ==========

for i, j in B:
    if freq_score(j) == 1:
        print(i, j, checkFreq(j, 0.17))
print(\"\\n\\n\")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open(\"wlist/wlist_match3.txt\").read().split(\"\\n\")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if \"a\" <= i[0] <= \"z\":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == \"a\")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], \"(words: \", checkWords(i[1])[0], \" out of \", checkWords(i[1]))
" 0 2 (fontified t) 2 4 (fontified t face font-lock-comment-delimiter-face) 4 15 (fontified t face font-lock-comment-face) 15 16 (fontified t) 16 19 (fontified t face font-lock-keyword-face) 19 25 (fontified t) 25 27 (fontified t face font-lock-keyword-face) 27 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 66 (fontified t) 66 71 (fontified t face font-lock-builtin-face) 71 98 (fontified t) 98 103 (fontified t face font-lock-builtin-face) 103 104 (fontified t) 104 110 (fontified t face font-lock-string-face) 110 113 (fontified t) 113 115 (fontified t face font-lock-comment-delimiter-face) 115 251 (fontified t face font-lock-comment-face) 251 253 (fontified t face font-lock-comment-delimiter-face) 253 264 (fontified t face font-lock-comment-face) 264 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 283 (fontified t) 283 285 (fontified t face font-lock-keyword-face) 285 286 (fontified t) 286 290 (fontified t face font-lock-builtin-face) 290 291 (fontified t) 291 315 (fontified t face font-lock-string-face) 315 330 (fontified t) 330 334 (fontified t face font-lock-string-face) 334 361 (fontified t) 361 365 (fontified t face font-lock-builtin-face) 365 368 (fontified t) 368 371 (fontified t face font-lock-keyword-face) 371 374 (fontified t) 374 376 (fontified t face font-lock-keyword-face) 376 377 (fontified t) 377 382 (fontified t face font-lock-builtin-face) 382 389 (fontified t) 389 392 (fontified t face font-lock-keyword-face) 392 395 (fontified t) 395 397 (fontified t face font-lock-keyword-face) 397 409 (fontified t) 409 411 (fontified t face font-lock-keyword-face) 411 412 (fontified t) 412 415 (fontified t face font-lock-string-face) 415 427 (fontified t) 427 430 (fontified t face font-lock-string-face) 430 449 (fontified t) 449 452 (fontified t face font-lock-builtin-face) 452 477 (fontified t) 477 480 (fontified t face font-lock-keyword-face) 480 481 (fontified t) 481 491 (fontified t face font-lock-function-name-face) 491 499 (fontified t) 499 501 (fontified t face font-lock-comment-delimiter-face) 501 524 (fontified t face font-lock-comment-face) 524 542 (fontified t) 542 545 (fontified t face font-lock-keyword-face) 545 548 (fontified t) 548 550 (fontified t face font-lock-keyword-face) 550 572 (fontified t) 572 574 (fontified t face font-lock-keyword-face) 574 613 (fontified t) 613 616 (fontified t face font-lock-keyword-face) 616 619 (fontified t) 619 622 (fontified t face font-lock-builtin-face) 622 630 (fontified t) 630 633 (fontified t face font-lock-keyword-face) 633 648 (fontified t) 648 650 (fontified t face font-lock-keyword-face) 650 664 (fontified t) 664 667 (fontified t face font-lock-string-face) 667 681 (fontified t) 681 684 (fontified t face font-lock-keyword-face) 684 698 (fontified t) 698 700 (fontified t face font-lock-keyword-face) 700 713 (fontified t) 713 715 (fontified t face font-lock-keyword-face) 715 752 (fontified t) 752 755 (fontified t face font-lock-keyword-face) 755 758 (fontified t) 758 760 (fontified t face font-lock-keyword-face) 760 787 (fontified t) 787 790 (fontified t face font-lock-builtin-face) 790 868 (fontified t) 868 876 (fontified t) 876 878 (fontified t face font-lock-keyword-face) 878 903 (fontified t) 903 923 (fontified t) 923 928 (fontified t) 928 954 (fontified t) 954 959 (fontified t face font-lock-keyword-face) 959 964 (fontified t) 964 970 (fontified t face font-lock-keyword-face) 970 979 (fontified t) 979 982 (fontified t face font-lock-builtin-face) 982 999 (fontified t) 999 1002 (fontified t face font-lock-keyword-face) 1002 1005 (fontified t) 1005 1007 (fontified t face font-lock-keyword-face) 1007 1015 (fontified t) 1015 1017 (fontified t face font-lock-keyword-face) 1017 1018 (fontified t) 1018 1043 (fontified t) 1043 1051 (fontified t) 1051 1056 (fontified t face font-lock-builtin-face) 1056 1057 (fontified t) 1057 1063 (fontified t) 1063 1073 (fontified t face font-lock-string-face) 1073 1096 (fontified t) 1096 1106 (fontified t face font-lock-string-face) 1106 1126 (fontified t)) . -736) (undo-tree-id418 . -1126) (undo-tree-id419 . -1126) 1862 (t 26107 57167 942528 724000)) nil (26107 57220 382020 841000) 0 nil])
([nil nil ((736 . 737)) nil (26107 57220 382018 172000) 0 nil])
([nil nil ((737 . 745)) nil (26107 57220 382017 465000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-string-face)) . -744) (undo-tree-id417 . -1) 745) nil (26107 57220 382016 495000) 0 nil])
([nil nil ((744 . 751)) nil (26107 57220 382014 741000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -750) (undo-tree-id416 . -1) 751) nil (26107 57220 382013 771000) 0 nil])
([nil nil ((750 . 756)) nil (26107 57220 382012 53000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -755) (undo-tree-id415 . -1) 756) nil (26107 57220 382011 142000) 0 nil])
([nil nil ((755 . 756)) nil (26107 57220 382009 412000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -754) (undo-tree-id413 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -755) (undo-tree-id414 . -1) 756) nil (26107 57220 382008 371000) 0 nil])
([nil nil ((754 . 761)) nil (26107 57220 382005 714000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -760) (undo-tree-id412 . -1) 761) nil (26107 57220 382004 783000) 0 nil])
([nil nil ((760 . 765)) nil (26107 57220 382003 15000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -764) (undo-tree-id411 . -1) 765) nil (26107 57220 382002 136000) 0 nil])
([nil nil ((764 . 767)) nil (26107 57220 382000 464000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -764) (undo-tree-id408 . -1) (#(" " 0 1 (fontified t)) . -765) (undo-tree-id409 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -766) (undo-tree-id410 . -1) 767) nil (26107 57220 381999 244000) 0 nil])
([nil nil ((764 . 765)) nil (26107 57220 381995 703000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -764) (undo-tree-id407 . -1) 765) nil (26107 57220 381994 782000) 0 nil])
([nil nil ((764 . 767)) nil (26107 57220 381993 82000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -764) (undo-tree-id404 . -1) (#(" " 0 1 (fontified t)) . -765) (undo-tree-id405 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -766) (undo-tree-id406 . -1) 767) nil (26107 57220 381991 569000) 0 nil])
([nil nil ((764 . 765)) nil (26107 57220 381987 792000) 0 nil])
([nil nil ((765 . 766)) nil (26107 57220 381987 82000) 0 nil])
([nil nil ((766 . 787)) nil (26107 57220 381986 387000) 0 nil])
([nil nil ((787 . 788)) nil (26107 57220 381985 688000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -787) (undo-tree-id403 . -1) 788) nil (26107 57220 381984 780000) 0 nil])
([nil nil ((787 . 788)) nil (26107 57220 381983 162000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -787) (undo-tree-id402 . -1) 788) nil (26107 57220 381982 235000) 0 nil])
([nil nil ((787 . 792)) nil (26107 57220 381980 355000) 0 nil])
([nil nil ((792 . 798)) nil (26107 57220 381979 558000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -797) (undo-tree-id401 . -1) 798) nil (26107 57220 381978 660000) 0 nil])
([nil nil ((797 . 798)) nil (26107 57220 381976 942000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -729) (undo-tree-id400 . -1) 730) nil (26107 57220 381976 50000) 0 nil])
([nil nil ((729 . 737)) nil (26107 57220 381972 846000) 0 nil])
([nil nil ((719 . 723)) nil (26107 57220 381972 85000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -721) (undo-tree-id398 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -722) (undo-tree-id399 . -1) 723) nil (26107 57220 381970 480000) 0 nil])
([nil nil ((721 . 727)) nil (26107 57220 381960 685000) 0 nil])
([nil nil ((727 . 728)) nil (26107 57220 381959 724000) 0 nil])
([nil nil ((806 . 815)) nil (26107 57220 381958 214000) 0 nil])
([nil nil ((823 . 824) 815) nil (26107 57220 381953 807000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -696) (undo-tree-id420 . -1) 697 (t 26107 57220 535349 632000)) nil (26107 57255 987772 385000) 0 nil])
([nil nil ((696 . 704)) nil (26107 57255 987759 483000) 0 nil])
([nil nil ((754 . 758) (t 26107 57256 97292 809000)) nil (26107 57265 457792 482000) 0 nil])
([nil nil ((833 . 849) (t 26107 57265 577344 734000)) nil (26107 57288 784620 395000) 0 nil])
([nil nil ((781 . 782) (t 26107 57288 855928 894000)) nil (26107 57305 488528 604000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -781) (undo-tree-id421 . -1) 782) nil (26107 57305 488526 729000) 0 nil])
([nil nil ((781 . 782)) nil (26107 57305 488516 411000) 0 nil])
([nil nil ((815 . 816)) nil (26107 57305 488512 84000) 0 nil])
([nil nil ((272 . 274) (t 26107 57305 550783 63000)) nil (26107 59005 585633 170000) 0 nil])
([nil nil ((274 . 278)) nil (26107 59005 585632 130000) 0 nil])
([nil nil ((#("def " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -274) (undo-tree-id445 . -4) 278) nil (26107 59005 585631 274000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -273) (undo-tree-id444 . -1) 274) nil (26107 59005 585629 408000) 0 nil])
([nil nil ((273 . 282)) nil (26107 59005 585627 658000) 0 nil])
([nil nil ((282 . 289)) nil (26107 59005 585626 944000) 0 nil])
([nil nil ((#("single" 0 6 (fontified t face font-lock-function-name-face)) . -283) (undo-tree-id443 . -6) 289) nil (26107 59005 585626 4000) 0 nil])
([nil nil ((#("breaK_" 0 6 (fontified t face font-lock-function-name-face)) . -277) (undo-tree-id442 . -6) 283) nil (26107 59005 585624 71000) 0 nil])
([nil nil ((277 . 298)) nil (26107 59005 585622 343000) 0 nil])
([nil nil ((298 . 299)) nil (26107 59005 585621 639000) 0 nil])
([nil nil ((299 . 302)) nil (26107 59005 585620 876000) 0 nil])
([nil nil ((302 . 307)) nil (26107 59005 585620 181000) 0 nil])
([nil nil ((272 . 273)) nil (26107 59005 585619 455000) 0 nil])
([nil nil ((273 . 290)) nil (26107 59005 585618 703000) 0 nil])
([nil nil ((#("single " 0 7 (fontified t face font-lock-comment-face)) . -283) (undo-tree-id440 . -7) (undo-tree-id441 . -7) 290) nil (26107 59005 585617 670000) 0 nil])
([nil nil ((#("a " 0 2 (fontified t face font-lock-comment-face)) . -281) (undo-tree-id438 . -2) (undo-tree-id439 . -2) 283) nil (26107 59005 585615 93000) 0 nil])
([nil nil ((#("Break " 0 6 (fontified t face font-lock-comment-face)) . -275) (undo-tree-id436 . -6) (undo-tree-id437 . -6) 281) nil (26107 59005 585612 193000) 0 nil])
([nil nil ((275 . 285)) nil (26107 59005 585609 680000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-comment-face)) . -284) (undo-tree-id435 . -1) 285) nil (26107 59005 585608 789000) 0 nil])
([nil nil ((284 . 291)) nil (26107 59005 585606 482000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-comment-face)) . -288) (undo-tree-id432 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -289) (undo-tree-id433 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -290) (undo-tree-id434 . -1) 291) nil (26107 59005 585605 133000) 0 nil])
([nil nil ((288 . 309)) nil (26107 59005 585584 953000) 0 nil])
([nil nil ((309 . 316)) nil (26107 59005 585584 173000) 0 nil])
([nil nil ((316 . 337)) nil (26107 59005 585583 468000) 0 nil])
([nil nil ((337 . 346)) nil (26107 59005 585582 685000) 0 nil])
([nil nil ((346 . 367)) nil (26107 59005 585581 971000) 0 nil])
([nil nil ((367 . 373)) nil (26107 59005 585581 197000) 0 nil])
([nil nil ((#("fa" 0 2 (fontified t face font-lock-comment-face)) . -371) (undo-tree-id431 . -2) 373) nil (26107 59005 585580 292000) 0 nil])
([nil nil ((#("ad " 0 3 (fontified t face font-lock-comment-face)) . -368) (undo-tree-id430 . -3) 371) nil (26107 59005 585578 410000) 0 nil])
([nil nil ((#("sdf " 0 4 (fontified t face font-lock-comment-face)) . -364) (undo-tree-id429 . -4) 368) nil (26107 59005 585576 354000) 0 nil])
([nil nil ((#("anadf " 0 6 (fontified t face font-lock-comment-face)) . -358) (undo-tree-id428 . -6) 364) nil (26107 59005 585573 671000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -354) (undo-tree-id424 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -355) (undo-tree-id425 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -356) (undo-tree-id426 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -357) (undo-tree-id427 . -1) 358) nil (26107 59005 585570 996000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 337) (335 . 337) (335 . 336) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 335) (334 . 335) (354 . 355)) nil (26107 59005 585565 658000) 0 nil])
([nil nil ((357 . 361)) nil (26107 59005 585563 969000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-comment-face)) . -360) (undo-tree-id423 . -1) 361) nil (26107 59005 585562 886000) 0 nil])
([nil nil ((360 . 363)) nil (26107 59005 585560 407000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-comment-face)) . -362) (undo-tree-id422 . -1) 363) nil (26107 59005 585558 370000) 0 nil])
([nil nil ((362 . 377)) nil (26107 59005 585545 392000) 0 nil])
([nil nil ((#("bytes." 0 6 (fontified t face font-lock-comment-face)) . -371) (undo-tree-id582 . -6) 377 (t 26107 59005 641671 635000)) nil (26107 59640 661027 126000) 0 nil])
([nil nil ((#("in " 0 3 (fontified t face font-lock-comment-face)) . -368) (undo-tree-id581 . -3) 371) nil (26107 59640 661024 391000) 0 nil])
([nil nil ((#("encoded " 0 8 (fontified t face font-lock-comment-face)) . -360) (undo-tree-id580 . -8) 368) nil (26107 59640 661022 540000) 0 nil])
([nil nil ((360 . 361)) nil (26107 59640 661020 785000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-comment-face)) . -360) (undo-tree-id579 . -1) 361) nil (26107 59640 661019 804000) 0 nil])
([nil nil ((360 . 374)) nil (26107 59640 661017 900000) 0 nil])
([nil nil ((404 . 409)) nil (26107 59640 661017 44000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -401) (undo-tree-id578 . -1) 402) nil (26107 59640 661016 55000) 0 nil])
([nil nil ((401 . 413)) nil (26107 59640 661014 307000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -407) (undo-tree-id577 . -6) 413) nil (26107 59640 661013 323000) 0 nil])
([nil nil ((#("xored_" 0 6 (fontified t)) . -401) (undo-tree-id576 . -6) 407) nil (26107 59640 661011 364000) 0 nil])
([nil nil ((401 . 402)) nil (26107 59640 661009 676000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -401) (undo-tree-id575 . -1) 402) nil (26107 59640 661008 658000) 0 nil])
([nil nil ((401 . 404)) nil (26107 59640 661006 989000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -401) (undo-tree-id572 . -1) (#("n" 0 1 (fontified t)) . -402) (undo-tree-id573 . -1) (#("c" 0 1 (fontified t)) . -403) (undo-tree-id574 . -1) 404) nil (26107 59640 661005 575000) 0 nil])
([nil nil ((401 . 408)) nil (26107 59640 661001 871000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -407) (undo-tree-id571 . -1) 408) nil (26107 59640 661000 916000) 0 nil])
([nil nil ((#("xored_" 0 6 (fontified t)) . -401) (undo-tree-id570 . -6) 407) nil (26107 59640 660998 984000) 0 nil])
([nil nil ((401 . 402)) nil (26107 59640 660997 217000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -401) (undo-tree-id569 . -1) 402) nil (26107 59640 660996 243000) 0 nil])
([nil nil ((401 . 402)) nil (26107 59640 660994 405000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -401) (undo-tree-id568 . -1) 402) nil (26107 59640 660993 414000) 0 nil])
([nil nil ((401 . 402)) nil (26107 59640 660991 683000) 0 nil])
([nil nil ((#("X" 0 1 (fontified t)) . -401) (undo-tree-id567 . -1) 402) nil (26107 59640 660990 746000) 0 nil])
([nil nil ((401 . 404)) nil (26107 59640 660988 946000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -401) (undo-tree-id564 . -1) (#("s" 0 1 (fontified t)) . -402) (undo-tree-id565 . -1) (#("g" 0 1 (fontified t)) . -403) (undo-tree-id566 . -1) 404) nil (26107 59640 660987 609000) 0 nil])
([nil nil ((401 . 405)) nil (26107 59640 660983 929000) 0 nil])
([nil nil ((#("S " 0 2 (fontified t face font-lock-comment-face)) . -355) (undo-tree-id562 . -1) (undo-tree-id563 . -2) 357) nil (26107 59640 660982 882000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -354) (undo-tree-id560 . -1) (undo-tree-id561 . -1) 355) nil (26107 59640 660979 973000) 0 nil])
([nil nil ((354 . 357)) nil (26107 59640 660976 628000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -356) (undo-tree-id559 . -1) 357) nil (26107 59640 660975 598000) 0 nil])
([nil nil ((356 . 364)) nil (26107 59640 660973 920000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -424) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) 425) nil (26107 59640 660972 861000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -420) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) 424) nil (26107 59640 660969 285000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -419) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) 420) nil (26107 59640 660965 622000) 0 nil])
([nil nil ((439 . 447) (#("    " 0 4 (fontified t)) . 439) (undo-tree-id549 . -4) 443) nil (26107 59640 660962 203000) 0 nil])
([nil nil ((464 . 472) (#("    " 0 4 (fontified t)) . 464) 471) nil (26107 59640 660959 836000) 0 nil])
([nil nil ((489 . 497) (#("    " 0 4 (fontified t)) . 489) 500) nil (26107 59640 660958 586000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -493) 504) nil (26107 59640 660957 306000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -489) 500) nil (26107 59640 660956 118000) 0 nil])
([nil nil ((489 . 497) 496) nil (26107 59640 660954 908000) 0 nil])
([nil nil ((543 . 547) 550) nil (26107 59640 660953 894000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -543) 554) nil (26107 59640 660952 729000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -539) 550) nil (26107 59640 660951 686000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -535) 546) nil (26107 59640 660950 587000) 0 nil])
([nil nil ((535 . 547) 542) nil (26107 59640 660949 480000) 0 nil])
([nil nil ((616 . 624) (#("    " 0 4 (fontified t)) . 616) 621) nil (26107 59640 660948 322000) 0 nil])
([nil nil ((#("Find" 0 4 (fontified t face font-lock-comment-face)) . -275) (undo-tree-id548 . -4) 279) nil (26107 59640 660947 2000) 0 nil])
([nil nil ((275 . 278)) nil (26107 59640 660945 342000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-comment-face)) . -275) (undo-tree-id545 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -276) (undo-tree-id546 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -277) (undo-tree-id547 . -1) 278) nil (26107 59640 660944 125000) 0 nil])
([nil nil ((275 . 282)) nil (26107 59640 660940 431000) 0 nil])
([nil nil ((337 . 338)) nil (26107 59640 660939 698000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -337) (undo-tree-id544 . -1) 338) nil (26107 59640 660938 648000) 0 nil])
([nil nil ((493 . 501) (#("        " 0 8 (fontified nil)) . 492) (undo-tree-id543 . -8) (491 . 501)) nil (26107 59640 660936 647000) 0 nil])
([nil nil ((501 . 502) (501 . 502)) nil (26107 59640 660934 586000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -497) (undo-tree-id542 . -4) 501) nil (26107 59640 660933 454000) 0 nil])
([nil nil ((497 . 505)) nil (26107 59640 660931 713000) 0 nil])
([nil nil ((505 . 511)) nil (26107 59640 660930 896000) 0 nil])
([nil nil ((492 . 500)) nil (26107 59640 660930 187000) 0 nil])
([nil nil ((500 . 508)) nil (26107 59640 660929 448000) 0 nil])
([nil nil ((#("dict" 0 4 (fontified t)) . -504) (undo-tree-id541 . -4) 508) nil (26107 59640 660928 513000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t)) . -500) (undo-tree-id540 . -4) 504) nil (26107 59640 660925 533000) 0 nil])
([nil nil ((500 . 508)) nil (26107 59640 660897 456000) 0 nil])
([nil nil ((#("dict" 0 4 (fontified t)) . -504) (undo-tree-id539 . -4) 508) nil (26107 59640 660896 401000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t)) . -500) (undo-tree-id538 . -4) 504) nil (26107 59640 660894 423000) 0 nil])
([nil nil ((500 . 503)) nil (26107 59640 660892 664000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -502) (undo-tree-id537 . -1) 503) nil (26107 59640 660891 489000) 0 nil])
([nil nil ((502 . 520)) nil (26107 59640 660889 688000) 0 nil])
([nil nil ((520 . 525)) nil (26107 59640 660888 947000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -523) (undo-tree-id535 . -1) (#("g" 0 1 (fontified t)) . -524) (undo-tree-id536 . -1) 525) nil (26107 59640 660887 793000) 0 nil])
([nil nil ((523 . 526)) nil (26107 59640 660885 91000) 0 nil])
([nil nil ((520 . 533)) nil (26107 59640 660884 357000) 0 nil])
([nil nil ((539 . 548)) nil (26107 59640 660883 556000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -546) (undo-tree-id533 . -1) (#("r" 0 1 (fontified t)) . -547) (undo-tree-id534 . -1) 548) nil (26107 59640 660882 480000) 0 nil])
([nil nil ((546 . 561)) nil (26107 59640 660879 778000) 0 nil])
([nil nil ((561 . 582)) nil (26107 59640 660879 25000) 0 nil])
([nil nil ((582 . 583)) nil (26107 59640 660878 227000) 0 nil])
([nil nil ((583 . 596)) nil (26107 59640 660877 422000) 0 nil])
([nil nil ((596 . 597)) nil (26107 59640 660876 693000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -592) 597) nil (26107 59640 660875 793000) 0 nil])
([nil nil ((593 . 602)) nil (26107 59640 660874 866000) 0 nil])
([nil nil ((602 . 605)) nil (26107 59640 660874 114000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -602) (undo-tree-id530 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -603) (undo-tree-id531 . -1) (#(" " 0 1 (fontified t)) . -604) (undo-tree-id532 . -1) 605) nil (26107 59640 660872 745000) 0 nil])
([nil nil ((602 . 605)) nil (26107 59640 660869 72000) 0 nil])
([nil nil ((417 . 422)) nil (26107 59640 660868 236000) 0 nil])
([nil nil ((422 . 432)) nil (26107 59640 660867 18000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -431) (undo-tree-id529 . -1) 432) nil (26107 59640 660866 27000) 0 nil])
([nil nil ((#("char_" 0 5 (fontified t)) . -426) (undo-tree-id528 . -5) 431) nil (26107 59640 660863 976000) 0 nil])
([nil nil ((426 . 428)) nil (26107 59640 660862 173000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -427) (undo-tree-id527 . -1) 428) nil (26107 59640 660861 100000) 0 nil])
([nil nil ((427 . 434)) nil (26107 59640 660859 309000) 0 nil])
([nil nil ((622 . 630)) nil (26107 59640 660858 541000) 0 nil])
([nil nil ((#("freq" 0 4 (fontified t)) . -626) (undo-tree-id526 . -4) 630) nil (26107 59640 660857 378000) 0 nil])
([nil nil ((#("max_" 0 4 (fontified t)) . -622) (undo-tree-id525 . -4) 626) nil (26107 59640 660855 411000) 0 nil])
([nil nil ((622 . 624)) nil (26107 59640 660853 647000) 0 nil])
([nil nil ((624 . 633)) nil (26107 59640 660852 878000) 0 nil])
([nil nil ((#("fre" 0 3 (fontified t)) . -630) (undo-tree-id524 . -3) 633) nil (26107 59640 660851 917000) 0 nil])
([nil nil ((#("char_" 0 5 (fontified t)) . -625) (undo-tree-id523 . -5) 630) nil (26107 59640 660850 78000) 0 nil])
([nil nil ((#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -622) (undo-tree-id522 . -3) 625) nil (26107 59640 660848 182000) 0 nil])
([nil nil ((622 . 632)) nil (26107 59640 660846 412000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -631) (undo-tree-id521 . -1) 632) nil (26107 59640 660845 424000) 0 nil])
([nil nil ((631 . 632)) nil (26107 59640 660843 718000) 0 nil])
([nil nil ((#("# key: xored message, trying every single letter as a key
xor_dict = dict()
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 57 (fontified t face font-lock-comment-face) 57 58 (fontified t face font-lock-comment-face) 58 66 (fontified t face font-lock-variable-name-face) 66 69 (fontified t) 69 73 (fontified t face font-lock-builtin-face) 73 76 (fontified t)) . 196) (undo-tree-id518 . -76) (undo-tree-id519 . -76) (undo-tree-id520 . -76)) nil (26107 59640 660842 656000) 0 nil])
([nil nil ((556 . 563)) nil (26107 59640 660838 944000) 0 nil])
([nil nil ((563 . 574)) nil (26107 59640 660838 41000) 0 nil])
([nil nil ((#("bytes" 0 5 (fontified t)) . -569) (undo-tree-id517 . -5) 574) nil (26107 59640 660836 945000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t)) . -565) (undo-tree-id516 . -4) 569) nil (26107 59640 660834 936000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -563) (undo-tree-id514 . -1) (#(" " 0 1 (fontified t)) . -564) (undo-tree-id515 . -1) 565) nil (26107 59640 660832 742000) 0 nil])
([nil nil ((#("xor" 0 3 (fontified t)) . -560) (undo-tree-id513 . -3) 563) nil (26107 59640 660829 486000) 0 nil])
([nil nil ((#("new_" 0 4 (fontified t)) . -556) (undo-tree-id512 . -4) 560) nil (26107 59640 660827 631000) 0 nil])
([nil nil ((#("freq(" 0 5 (fontified t)) . -551) (undo-tree-id511 . -5) 556) nil (26107 59640 660825 674000) 0 nil])
([nil nil ((#("char_" 0 5 (fontified t)) . -546) (undo-tree-id510 . -5) 551) nil (26107 59640 660823 821000) 0 nil])
([nil nil ((546 . 558)) nil (26107 59640 660822 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -557) (undo-tree-id509 . -1) 558) nil (26107 59640 660821 64000) 0 nil])
([nil nil ((557 . 563)) nil (26107 59640 660819 269000) 0 nil])
([nil nil ((563 . 566)) nil (26107 59640 660818 539000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -565) (undo-tree-id508 . -1) 566) nil (26107 59640 660817 477000) 0 nil])
([nil nil ((565 . 567)) nil (26107 59640 660815 706000) 0 nil])
([nil nil ((#("en" 0 2 (fontified t)) . -565) (undo-tree-id507 . -2) 567) nil (26107 59640 660814 781000) 0 nil])
([nil nil ((565 . 577)) nil (26107 59640 660813 57000) 0 nil])
([nil nil ((#("scii" 0 4 (fontified t face font-lock-string-face)) . -573) (undo-tree-id506 . -4) 577) nil (26107 59640 660812 55000) 0 nil])
([nil nil ((573 . 584)) nil (26107 59640 660810 319000) 0 nil])
([nil nil ((584 . 593)) nil (26107 59640 660809 561000) 0 nil])
([nil nil ((593 . 606)) nil (26107 59640 660808 814000) 0 nil])
([nil nil ((606 . 617)) nil (26107 59640 660807 996000) 0 nil])
([nil nil ((#("freq_score(new_xor.decode(\"ascii\"))" 0 26 (fontified t) 26 33 (fontified t face font-lock-string-face) 33 35 (fontified t)) . 546) (undo-tree-id504 . -35) (undo-tree-id505 . -35)) nil (26107 59640 660807 2000) 0 nil])
([nil nil ((534 . 543)) nil (26107 59640 660804 651000) 0 nil])
([nil nil ((543 . 546)) nil (26107 59640 660803 836000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -545) (undo-tree-id503 . -1) 546) nil (26107 59640 660802 685000) 0 nil])
([nil nil ((545 . 554)) nil (26107 59640 660800 745000) 0 nil])
([nil nil ((nil rear-nonsticky nil 588 . 589) (nil fontified nil 587 . 589) (nil fontified nil 580 . 587) (nil fontified nil 554 . 580) (554 . 589)) nil (26107 59640 660799 657000) 0 nil])
([nil nil ((601 . 609)) nil (26107 59640 660798 89000) 0 nil])
([nil nil ((645 . 648)) nil (26107 59640 660797 331000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -647) (undo-tree-id502 . -1) 648) nil (26107 59640 660796 354000) 0 nil])
([nil nil ((647 . 653)) nil (26107 59640 660794 464000) 0 nil])
([nil nil ((655 . 667) (#("            " 0 12 (fontified nil)) . 654) (undo-tree-id501 . -12) (653 . 667)) nil (26107 59640 660793 474000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -663) (undo-tree-id500 . -4) 667) nil (26107 59640 660791 340000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -659) (undo-tree-id499 . -4) 663) nil (26107 59640 660789 171000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -655) (undo-tree-id498 . -4) 659) nil (26107 59640 660787 70000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -653) (undo-tree-id496 . -1) (#("
" 0 1 (fontified t)) . -654) (undo-tree-id497 . -1) 655) nil (26107 59640 660784 461000) 0 nil])
([nil nil ((653 . 666)) nil (26107 59640 660781 775000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -662) (undo-tree-id495 . -4) 666) nil (26107 59640 660780 836000) 0 nil])
([nil nil ((662 . 666)) nil (26107 59640 660779 69000) 0 nil])
([nil nil ((666 . 672)) nil (26107 59640 660778 303000) 0 nil])
([nil nil ((432 . 441)) nil (26107 59640 660777 403000) 0 nil])
([nil nil ((441 . 442)) nil (26107 59640 660776 594000) 0 nil])
([nil nil ((442 . 448)) nil (26107 59640 660775 585000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -447) (undo-tree-id494 . -1) 448) nil (26107 59640 660774 463000) 0 nil])
([nil nil ((#("Lower" 0 5 (fontified t face font-lock-comment-face)) . -442) (undo-tree-id493 . -5) 447) nil (26107 59640 660772 310000) 0 nil])
([nil nil ((442 . 453)) nil (26107 59640 660770 366000) 0 nil])
([nil nil ((#("Lowercase " 0 10 (fontified t face font-lock-comment-face)) . -443) (undo-tree-id492 . -10) 453) nil (26107 59640 660769 446000) 0 nil])
([nil nil ((443 . 464)) nil (26107 59640 660767 755000) 0 nil])
([nil nil ((685 . 698)) nil (26107 59640 660766 881000) 0 nil])
([nil nil ((698 . 699)) nil (26107 59640 660766 91000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -698) (undo-tree-id491 . -1) 699) nil (26107 59640 660764 956000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -694) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) 698) nil (26107 59640 660762 810000) 0 nil])
([nil nil ((694 . 696)) nil (26107 59640 660758 551000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -695) (undo-tree-id486 . -1) 696) nil (26107 59640 660757 557000) 0 nil])
([nil nil ((695 . 698)) nil (26107 59640 660755 632000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-comment-face)) . -697) (undo-tree-id485 . -1) 698) nil (26107 59640 660754 623000) 0 nil])
([nil nil ((697 . 717)) nil (26107 59640 660752 777000) 0 nil])
([nil nil ((736 . 739)) nil (26107 59640 660751 994000) 0 nil])
([nil nil ((#("        new_xor = xor
" 0 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 21 (fontified t) 21 22 (fontified t)) . -718) (undo-tree-id482 . -22) (undo-tree-id483 . -22) (undo-tree-id484 . -22) 740) nil (26107 59640 660750 844000) 0 nil])
([nil nil ((719 . 727) (#("    " 0 4 (fontified nil)) . 719) (undo-tree-id481 . -4) (718 . 719)) nil (26107 59640 660747 84000) 0 nil])
([nil nil ((nil rear-nonsticky nil 938 . 939) (nil fontified nil 927 . 939) (nil fontified nil 919 . 927) (nil fontified nil 907 . 919) (nil fontified nil 905 . 907) (nil fontified nil 897 . 905) (nil fontified nil 894 . 897) (nil fontified nil 885 . 894) (nil fontified nil 883 . 885) (nil fontified nil 875 . 883) (nil fontified nil 874 . 875) (nil fontified nil 873 . 874) (nil fontified nil 872 . 873) (nil fontified nil 865 . 872) (nil fontified nil 839 . 865) (nil fontified nil 836 . 839) (nil fontified nil 828 . 836) (nil fontified nil 820 . 828) (nil fontified nil 810 . 820) (nil fontified nil 808 . 810) (nil fontified nil 801 . 808) (nil fontified nil 786 . 801) (nil fontified nil 783 . 786) (nil fontified nil 769 . 783) (nil fontified nil 766 . 769) (nil fontified nil 747 . 766) (nil fontified nil 733 . 747) (nil fontified nil 726 . 733) (nil fontified nil 718 . 726) (718 . 939)) nil (26107 59640 660743 520000) 0 nil])
([nil nil ((939 . 951)) nil (26107 59640 660737 351000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -947) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) 951) nil (26107 59640 660736 127000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -943) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) 947) nil (26107 59640 660730 768000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -939) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) 943) nil (26107 59640 660724 292000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -938) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 939) nil (26107 59640 660716 243000) 0 nil])
([nil nil ((947 . 951) 961) nil (26107 59640 660704 313000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -947) (undo-tree-id451 . -4) (undo-tree-id452 . -4) 965) nil (26107 59640 660702 320000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -943) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) 961) nil (26107 59640 660695 452000) 0 nil])
([nil nil ((746 . 747) (t 26107 59640 742561 227000)) nil (26107 59651 175156 674000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -746) (undo-tree-id583 . -1) 747 (t 26107 59651 258090 557000)) nil (26107 59653 586786 245000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -539) (undo-tree-id651 . -1) (undo-tree-id652 . 1) (undo-tree-id653 . -1) 540 (t 26107 59653 659891 726000)) nil (26107 59788 983893 85000) 0 nil])
([nil nil ((539 . 540)) nil (26107 59788 983887 210000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -555) (undo-tree-id648 . -1) (undo-tree-id649 . 1) (undo-tree-id650 . -1) 556) nil (26107 59788 983884 801000) 0 nil])
([nil nil ((555 . 556)) nil (26107 59788 983875 929000) 0 nil])
([nil nil ((#("
        xor_dict[chr(lower + i)] = xor_bytes(
            xored_message, (chr(lower + i) * len(xored_message)).encode(\"ascii\")
        )
    xor_dict[chr(upper + i)] = xor_bytes(
        xored_message, (chr(upper + i) * len(xored_message)).encode(\"ascii\")
    )
" 0 1 (fontified t) 1 9 (fontified t) 9 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-builtin-face) 21 47 (fontified t) 47 59 (fontified t) 59 75 (fontified t) 75 78 (fontified t face font-lock-builtin-face) 78 92 (fontified t) 92 95 (fontified t face font-lock-builtin-face) 95 119 (fontified t) 119 126 (fontified t face font-lock-string-face) 126 128 (fontified t) 128 136 (fontified t) 136 138 (fontified t) 138 142 (fontified t) 142 150 (fontified t face font-lock-variable-name-face) 150 151 (fontified t) 151 154 (fontified t face font-lock-builtin-face) 154 180 (fontified t) 180 204 (fontified t) 204 207 (fontified t face font-lock-builtin-face) 207 221 (fontified t) 221 224 (fontified t face font-lock-builtin-face) 224 248 (fontified t) 248 255 (fontified t face font-lock-string-face) 255 263 (fontified t)) . -959) (undo-tree-id636 . -150) (undo-tree-id637 . -263) (undo-tree-id638 . -9) (undo-tree-id639 . -9) (undo-tree-id640 . -9) (undo-tree-id641 . -36) (undo-tree-id642 . -142) (undo-tree-id643 . -142) (undo-tree-id644 . -142) (undo-tree-id645 . -169) (undo-tree-id646 . -263) (undo-tree-id647 . -263) 1222) nil (26107 59791 159611 395000) 0 nil])
([nil nil ((1 . 1183) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)

# Returns the key to a message that has been xored with a single
# character. Assume argument is of type bytes.
def break_single_char_xor(emsg):
    max_freq = 0
    for i in range(26):
        lower = ord(\"a\")
        upper = ord(\"A\")
        # Try lowercase letter.
        new_xor = xor_bytes(
            emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\")
        )
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
        # Try uppercase letter.
        new_xor = xor_bytes(
            emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\")
        )
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
    return the_key


# Find the key whose string has the highest frequency score.
the_key = max(xor_dict, key=lambda x: freq_score(xor_dict[x].decode(\"ascii\")))
original_message = xor_dict[the_key]

print(\"The key is:\", the_key)
print(\"The message is:\", original_message.decode(\"ascii\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 193 (fontified t) 193 195 (fontified t) 195 196 (fontified t) 196 198 (fontified t face font-lock-comment-delimiter-face) 198 205 (fontified t face font-lock-comment-face) 205 206 (fontified t face font-lock-comment-face) 206 261 (fontified t face font-lock-comment-face) 261 263 (fontified t face font-lock-comment-delimiter-face) 263 307 (fontified t face font-lock-comment-face) 307 308 (fontified t face font-lock-comment-face) 308 311 (fontified t face font-lock-keyword-face) 311 312 (fontified t) 312 333 (fontified t face font-lock-function-name-face) 333 341 (fontified t) 341 345 (fontified t) 345 353 (fontified t face font-lock-variable-name-face) 353 357 (fontified t) 357 358 (fontified t) 358 362 (fontified t) 362 365 (fontified t face font-lock-keyword-face) 365 368 (fontified t) 368 370 (fontified t face font-lock-keyword-face) 370 371 (fontified t) 371 376 (fontified t face font-lock-builtin-face) 376 382 (fontified t) 382 390 (fontified t) 390 395 (fontified t face font-lock-variable-name-face) 395 398 (fontified t) 398 401 (fontified t face font-lock-builtin-face) 401 402 (fontified t) 402 405 (fontified t face font-lock-string-face) 405 407 (fontified t) 407 415 (fontified t) 415 420 (fontified t face font-lock-variable-name-face) 420 423 (fontified t) 423 426 (fontified t face font-lock-builtin-face) 426 427 (fontified t) 427 430 (fontified t face font-lock-string-face) 430 432 (fontified t) 432 440 (fontified t) 440 442 (fontified t face font-lock-comment-delimiter-face) 442 463 (fontified t face font-lock-comment-face) 463 464 (fontified t face font-lock-comment-face) 464 472 (fontified t) 472 479 (fontified t face font-lock-variable-name-face) 479 493 (fontified t) 493 512 (fontified t) 512 515 (fontified t face font-lock-builtin-face) 515 529 (fontified t) 529 532 (fontified t face font-lock-builtin-face) 532 547 (fontified t) 547 554 (fontified t face font-lock-string-face) 554 555 (fontified t) 555 556 (fontified t) 556 566 (fontified t) 566 574 (fontified t) 574 582 (fontified t face font-lock-variable-name-face) 582 585 (fontified t) 585 611 (fontified t) 611 618 (fontified t face font-lock-string-face) 618 619 (fontified t) 619 620 (rear-nonsticky t fontified t) 620 621 (fontified t) 621 629 (fontified t) 629 631 (fontified t face font-lock-keyword-face) 631 640 (fontified t) 640 643 (fontified t) 643 651 (fontified t face font-lock-variable-name-face) 651 653 (fontified t) 653 665 (fontified t) 665 673 (fontified t) 673 685 (fontified t) 685 693 (fontified t) 693 695 (fontified t face font-lock-comment-delimiter-face) 695 716 (fontified t face font-lock-comment-face) 716 717 (fontified t face font-lock-comment-face) 717 725 (fontified t) 725 732 (fontified t face font-lock-variable-name-face) 732 746 (fontified t) 746 765 (fontified t) 765 768 (fontified t face font-lock-builtin-face) 768 782 (fontified t) 782 785 (fontified t face font-lock-builtin-face) 785 800 (fontified t) 800 807 (fontified t face font-lock-string-face) 807 809 (fontified t) 809 819 (fontified t) 819 827 (fontified t) 827 835 (fontified t face font-lock-variable-name-face) 835 838 (fontified t) 838 864 (fontified t) 864 871 (fontified t face font-lock-string-face) 871 872 (fontified t) 872 873 (rear-nonsticky t fontified t) 873 874 (fontified t) 874 882 (fontified t) 882 884 (fontified t face font-lock-keyword-face) 884 893 (fontified t) 893 896 (fontified t) 896 904 (fontified t face font-lock-variable-name-face) 904 906 (fontified t) 906 918 (fontified t) 918 926 (fontified t) 926 937 (fontified t) 937 938 (fontified t) 938 942 (fontified t) 942 948 (fontified t face font-lock-keyword-face) 948 956 (fontified t) 956 957 (fontified t) 957 958 (fontified t) 958 959 (fontified t) 959 961 (fontified t face font-lock-comment-delimiter-face) 961 1020 (fontified t face font-lock-comment-face) 1020 1027 (fontified t face font-lock-variable-name-face) 1027 1030 (fontified t) 1030 1033 (fontified t face font-lock-builtin-face) 1033 1048 (fontified t) 1048 1054 (fontified t face font-lock-keyword-face) 1054 1088 (fontified t) 1088 1095 (fontified t face font-lock-string-face) 1095 1099 (fontified t) 1099 1108 (fontified t) 1108 1115 (fontified t) 1115 1136 (fontified t) 1136 1137 (fontified t) 1137 1142 (fontified t face font-lock-builtin-face) 1142 1143 (fontified t) 1143 1155 (fontified t face font-lock-string-face) 1155 1156 (fontified t face font-lock-string-face) 1156 1167 (fontified t) 1167 1172 (fontified t face font-lock-builtin-face) 1172 1173 (fontified t) 1173 1174 (fontified t face font-lock-string-face) 1174 1186 (fontified t face font-lock-string-face) 1186 1189 (fontified t face font-lock-string-face) 1189 1190 (fontified t face font-lock-string-face) 1190 1216 (fontified t) 1216 1217 (fontified t face font-lock-string-face) 1217 1222 (fontified t face font-lock-string-face) 1222 1223 (fontified t face font-lock-string-face) 1223 1224 (fontified t) 1224 1225 (fontified t) 1225 1226 (fontified t)) . 1) (undo-tree-id656 . -958) (undo-tree-id657 . -1189) (undo-tree-id658 . -280) (undo-tree-id659 . -195) (undo-tree-id660 . -958) (undo-tree-id661 . -1136) (undo-tree-id662 . -1189) (undo-tree-id663 . -307) (undo-tree-id664 . -958) (undo-tree-id665 . -1226) (undo-tree-id666 . -362) (undo-tree-id667 . -362) (undo-tree-id668 . -195) (undo-tree-id669 . -632) (undo-tree-id670 . -585) (undo-tree-id671 . -464) (undo-tree-id672 . -717) (undo-tree-id673 . -717) (undo-tree-id674 . -958) (undo-tree-id675 . -89) (undo-tree-id676 . -89) (undo-tree-id677 . -89) (undo-tree-id678 . -105) (undo-tree-id679 . -390) (undo-tree-id680 . -390) (undo-tree-id681 . -398) (undo-tree-id682 . -415) (undo-tree-id683 . -415) (undo-tree-id684 . -423) (undo-tree-id685 . -472) (undo-tree-id686 . -472) (undo-tree-id687 . -472) (undo-tree-id688 . -482) (undo-tree-id689 . -574) (undo-tree-id690 . -574) (undo-tree-id691 . -585) (undo-tree-id692 . -725) (undo-tree-id693 . -725) (undo-tree-id694 . -725) (undo-tree-id695 . -735) (undo-tree-id696 . -827) (undo-tree-id697 . -827) (undo-tree-id698 . -838) (undo-tree-id699 . -1020) (undo-tree-id700 . -1020) (undo-tree-id701 . -1049) (undo-tree-id702 . -1137) (undo-tree-id703 . -1137) (undo-tree-id704 . -1167) (undo-tree-id705 . -1167) (undo-tree-id706 . -1167) (undo-tree-id707 . -1167) 959) nil (26107 59792 131112 452000) 0 nil] [nil nil ((1 . 1183) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)

# Returns the key to a message that has been xored with a single
# character. Assume argument is of type bytes.
def break_single_char_xor(emsg):
    max_freq = 0
    for i in range(26):
        lower = ord(\"a\")
        upper = ord(\"A\")
        # Try lowercase letter.
        new_xor = xor_bytes(
            emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\")
        )
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
        # Try uppercase letter.
        new_xor = xor_bytes(
            emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\")
        )
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
    return the_key


# Find the key whose string has the highest frequency score.
the_key = max(xor_dict, key=lambda x: freq_score(xor_dict[x].decode(\"ascii\")))
original_message = xor_dict[the_key]

print(\"The key is:\", the_key)
print(\"The message is:\", original_message.decode(\"ascii\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 193 (fontified t) 193 195 (fontified t) 195 196 (fontified t) 196 198 (fontified t face font-lock-comment-delimiter-face) 198 205 (fontified t face font-lock-comment-face) 205 206 (fontified t face font-lock-comment-face) 206 261 (fontified t face font-lock-comment-face) 261 263 (fontified t face font-lock-comment-delimiter-face) 263 307 (fontified t face font-lock-comment-face) 307 308 (fontified t face font-lock-comment-face) 308 311 (fontified t face font-lock-keyword-face) 311 312 (fontified t) 312 333 (fontified t face font-lock-function-name-face) 333 341 (fontified t) 341 345 (fontified t) 345 353 (fontified t face font-lock-variable-name-face) 353 357 (fontified t) 357 358 (fontified t) 358 362 (fontified t) 362 365 (fontified t face font-lock-keyword-face) 365 368 (fontified t) 368 370 (fontified t face font-lock-keyword-face) 370 371 (fontified t) 371 376 (fontified t face font-lock-builtin-face) 376 382 (fontified t) 382 390 (fontified t) 390 395 (fontified t face font-lock-variable-name-face) 395 398 (fontified t) 398 401 (fontified t face font-lock-builtin-face) 401 402 (fontified t) 402 405 (fontified t face font-lock-string-face) 405 407 (fontified t) 407 415 (fontified t) 415 420 (fontified t face font-lock-variable-name-face) 420 423 (fontified t) 423 426 (fontified t face font-lock-builtin-face) 426 427 (fontified t) 427 430 (fontified t face font-lock-string-face) 430 432 (fontified t) 432 440 (fontified t) 440 442 (fontified t face font-lock-comment-delimiter-face) 442 463 (fontified t face font-lock-comment-face) 463 464 (fontified t face font-lock-comment-face) 464 472 (fontified t) 472 479 (fontified t face font-lock-variable-name-face) 479 493 (fontified t) 493 512 (fontified t) 512 515 (fontified t face font-lock-builtin-face) 515 529 (fontified t) 529 532 (fontified t face font-lock-builtin-face) 532 547 (fontified t) 547 554 (fontified t face font-lock-string-face) 554 555 (fontified t) 555 556 (fontified t) 556 566 (fontified t) 566 574 (fontified t) 574 582 (fontified t face font-lock-variable-name-face) 582 585 (fontified t) 585 611 (fontified t) 611 618 (fontified t face font-lock-string-face) 618 619 (fontified t) 619 620 (rear-nonsticky t fontified t) 620 621 (fontified t) 621 629 (fontified t) 629 631 (fontified t face font-lock-keyword-face) 631 640 (fontified t) 640 643 (fontified t) 643 651 (fontified t face font-lock-variable-name-face) 651 653 (fontified t) 653 665 (fontified t) 665 673 (fontified t) 673 685 (fontified t) 685 693 (fontified t) 693 695 (fontified t face font-lock-comment-delimiter-face) 695 716 (fontified t face font-lock-comment-face) 716 717 (fontified t face font-lock-comment-face) 717 725 (fontified t) 725 732 (fontified t face font-lock-variable-name-face) 732 746 (fontified t) 746 765 (fontified t) 765 768 (fontified t face font-lock-builtin-face) 768 782 (fontified t) 782 785 (fontified t face font-lock-builtin-face) 785 800 (fontified t) 800 807 (fontified t face font-lock-string-face) 807 809 (fontified t) 809 819 (fontified t) 819 827 (fontified t) 827 835 (fontified t face font-lock-variable-name-face) 835 838 (fontified t) 838 864 (fontified t) 864 871 (fontified t face font-lock-string-face) 871 872 (fontified t) 872 873 (rear-nonsticky t fontified t) 873 874 (fontified t) 874 882 (fontified t) 882 884 (fontified t face font-lock-keyword-face) 884 893 (fontified t) 893 896 (fontified t) 896 904 (fontified t face font-lock-variable-name-face) 904 906 (fontified t) 906 918 (fontified t) 918 926 (fontified t) 926 937 (fontified t) 937 938 (fontified t) 938 942 (fontified t) 942 948 (fontified t face font-lock-keyword-face) 948 956 (fontified t) 956 957 (fontified t) 957 958 (fontified t) 958 959 (fontified t) 959 961 (fontified t face font-lock-comment-delimiter-face) 961 1020 (fontified t face font-lock-comment-face) 1020 1027 (fontified t face font-lock-variable-name-face) 1027 1030 (fontified t) 1030 1033 (fontified t face font-lock-builtin-face) 1033 1048 (fontified t) 1048 1054 (fontified t face font-lock-keyword-face) 1054 1088 (fontified t) 1088 1095 (fontified t face font-lock-string-face) 1095 1099 (fontified t) 1099 1108 (fontified t) 1108 1115 (fontified t) 1115 1136 (fontified t) 1136 1137 (fontified t) 1137 1142 (fontified t face font-lock-builtin-face) 1142 1143 (fontified t) 1143 1155 (fontified t face font-lock-string-face) 1155 1156 (fontified t face font-lock-string-face) 1156 1167 (fontified t) 1167 1172 (fontified t face font-lock-builtin-face) 1172 1173 (fontified t) 1173 1174 (fontified t face font-lock-string-face) 1174 1186 (fontified t face font-lock-string-face) 1186 1189 (fontified t face font-lock-string-face) 1189 1190 (fontified t face font-lock-string-face) 1190 1216 (fontified t) 1216 1217 (fontified t face font-lock-string-face) 1217 1222 (fontified t face font-lock-string-face) 1222 1223 (fontified t face font-lock-string-face) 1223 1224 (fontified t) 1224 1225 (fontified t) 1225 1226 (fontified t)) . 1) (undo-tree-id584 . -958) (undo-tree-id585 . -1189) (undo-tree-id586 . -280) (undo-tree-id587 . -195) (undo-tree-id588 . -958) (undo-tree-id589 . -1136) (undo-tree-id590 . -1189) (undo-tree-id591 . -307) (undo-tree-id592 . -958) (undo-tree-id593 . -1226) (undo-tree-id594 . -362) (undo-tree-id595 . -362) (undo-tree-id596 . -195) (undo-tree-id597 . -632) (undo-tree-id598 . -585) (undo-tree-id599 . -464) (undo-tree-id600 . -717) (undo-tree-id602 . -725) (undo-tree-id604 . -735) (undo-tree-id606 . -827) (undo-tree-id608 . -958) (undo-tree-id610 . -958) (undo-tree-id612 . -958) (undo-tree-id614 . -958) (undo-tree-id616 . -1020) (undo-tree-id618 . -1049) (undo-tree-id620 . -1137) (undo-tree-id622 . -1167) (undo-tree-id624 . -1167) (undo-tree-id625 . -717) (undo-tree-id626 . -958) (undo-tree-id628 . -1020) (undo-tree-id630 . -1137) (undo-tree-id632 . -1167) (undo-tree-id634 . -1167) 959) ((1 . 1227) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)

# Returns the key to a message that has been xored with a single
# character. Assume argument is of type bytes.
def break_single_char_xor(emsg):
    max_freq = 0
    for i in range(26):
        lower = ord(\"a\")
        upper = ord(\"A\")
        # Try lowercase letter.
        new_xor = xor_bytes(emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
        # Try uppercase letter.
        new_xor = xor_bytes(emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
    return the_key


# Find the key whose string has the highest frequency score.
the_key = max(xor_dict, key=lambda x: freq_score(xor_dict[x].decode(\"ascii\")))
original_message = xor_dict[the_key]

print(\"The key is:\", the_key)
print(\"The message is:\", original_message.decode(\"ascii\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 196 (fontified t) 196 198 (fontified t face font-lock-comment-delimiter-face) 198 261 (fontified t face font-lock-comment-face) 261 263 (fontified t face font-lock-comment-delimiter-face) 263 308 (fontified t face font-lock-comment-face) 308 311 (fontified t face font-lock-keyword-face) 311 312 (fontified t) 312 333 (fontified t face font-lock-function-name-face) 333 345 (fontified t) 345 353 (fontified t face font-lock-variable-name-face) 353 362 (fontified t) 362 365 (fontified t face font-lock-keyword-face) 365 368 (fontified t) 368 370 (fontified t face font-lock-keyword-face) 370 371 (fontified t) 371 376 (fontified t face font-lock-builtin-face) 376 390 (fontified t) 390 395 (fontified t face font-lock-variable-name-face) 395 398 (fontified t) 398 401 (fontified t face font-lock-builtin-face) 401 402 (fontified t) 402 405 (fontified t face font-lock-string-face) 405 415 (fontified t) 415 420 (fontified t face font-lock-variable-name-face) 420 423 (fontified t) 423 426 (fontified t face font-lock-builtin-face) 426 427 (fontified t) 427 430 (fontified t face font-lock-string-face) 430 440 (fontified t) 440 442 (fontified t face font-lock-comment-delimiter-face) 442 464 (fontified t face font-lock-comment-face) 464 472 (fontified t) 472 479 (fontified t face font-lock-variable-name-face) 479 499 (fontified t) 499 502 (fontified t face font-lock-builtin-face) 502 516 (fontified t) 516 519 (fontified t face font-lock-builtin-face) 519 534 (fontified t) 534 541 (fontified t face font-lock-string-face) 541 552 (fontified t) 552 560 (fontified t face font-lock-variable-name-face) 560 589 (fontified t) 589 596 (fontified t face font-lock-string-face) 596 607 (fontified t) 607 609 (fontified t face font-lock-keyword-face) 609 621 (fontified t) 621 629 (fontified t face font-lock-variable-name-face) 629 671 (fontified t) 671 673 (fontified t face font-lock-comment-delimiter-face) 673 695 (fontified t face font-lock-comment-face) 695 703 (fontified t) 703 710 (fontified t face font-lock-variable-name-face) 710 730 (fontified t) 730 733 (fontified t face font-lock-builtin-face) 733 747 (fontified t) 747 750 (fontified t face font-lock-builtin-face) 750 765 (fontified t) 765 772 (fontified t face font-lock-string-face) 772 783 (fontified t) 783 791 (fontified t face font-lock-variable-name-face) 791 820 (fontified t) 820 827 (fontified t face font-lock-string-face) 827 838 (fontified t) 838 840 (fontified t face font-lock-keyword-face) 840 852 (fontified t) 852 860 (fontified t face font-lock-variable-name-face) 860 898 (fontified t) 898 904 (fontified t face font-lock-keyword-face) 904 915 (fontified t) 915 917 (fontified t face font-lock-comment-delimiter-face) 917 976 (fontified t face font-lock-comment-face) 976 983 (fontified t face font-lock-variable-name-face) 983 986 (fontified t) 986 989 (fontified t face font-lock-builtin-face) 989 1004 (fontified t) 1004 1010 (fontified t face font-lock-keyword-face) 1010 1044 (fontified t) 1044 1051 (fontified t face font-lock-string-face) 1051 1093 (fontified t) 1093 1098 (fontified t face font-lock-builtin-face) 1098 1099 (fontified t) 1099 1112 (fontified t face font-lock-string-face) 1112 1123 (fontified t) 1123 1128 (fontified t face font-lock-builtin-face) 1128 1129 (fontified t) 1129 1146 (fontified t face font-lock-string-face) 1146 1172 (fontified t) 1172 1179 (fontified t face font-lock-string-face) 1179 1182 (fontified t)) . 1) (undo-tree-id654 . -958) (undo-tree-id655 . -915) (t 26107 59789 138551 157000)) (26107 59788 983813 49000) 0 nil])
([nil nil ((432 . 441) (t 26107 59792 290549 406000)) nil (26107 59800 575240 666000) 0 nil])
nil
([nil nil ((674 . 686) (#("        " 0 8 (fontified nil)) . 673) (undo-tree-id723 . -8) (681 . 682)) nil (26107 59800 575238 736000) 0 nil])
([nil nil ((1 . 1189) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)

# Returns the key to a message that has been xored with a single
# character. Assume argument is of type bytes.
def break_single_char_xor(emsg):
    max_freq = 0
    for i in range(26):
        lower = ord(\"a\")
        upper = ord(\"A\")
        
        # Try lowercase letter.
        new_xor = xor_bytes(emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq

            # Try uppercase letter.
        new_xor = xor_bytes(emsg, (chr(lower + i) * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
    return the_key


# Find the key whose string has the highest frequency score.
the_key = max(xor_dict, key=lambda x: freq_score(xor_dict[x].decode(\"ascii\")))
original_message = xor_dict[the_key]

print(\"The key is:\", the_key)
print(\"The message is:\", original_message.decode(\"ascii\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 196 (fontified t) 196 198 (fontified t face font-lock-comment-delimiter-face) 198 261 (fontified t face font-lock-comment-face) 261 263 (fontified t face font-lock-comment-delimiter-face) 263 308 (fontified t face font-lock-comment-face) 308 311 (fontified t face font-lock-keyword-face) 311 312 (fontified t) 312 333 (fontified t face font-lock-function-name-face) 333 345 (fontified t) 345 353 (fontified t face font-lock-variable-name-face) 353 362 (fontified t) 362 365 (fontified t face font-lock-keyword-face) 365 368 (fontified t) 368 370 (fontified t face font-lock-keyword-face) 370 371 (fontified t) 371 376 (fontified t face font-lock-builtin-face) 376 390 (fontified t) 390 395 (fontified t face font-lock-variable-name-face) 395 398 (fontified t) 398 401 (fontified t face font-lock-builtin-face) 401 402 (fontified t) 402 405 (fontified t face font-lock-string-face) 405 407 (fontified t) 407 415 (fontified t) 415 420 (fontified t face font-lock-variable-name-face) 420 423 (fontified t) 423 426 (fontified t face font-lock-builtin-face) 426 427 (fontified t) 427 430 (fontified t face font-lock-string-face) 430 441 (fontified t) 441 449 (fontified t) 449 451 (fontified t face font-lock-comment-delimiter-face) 451 473 (fontified t face font-lock-comment-face) 473 481 (fontified t) 481 488 (fontified t face font-lock-variable-name-face) 488 508 (fontified t) 508 511 (fontified t face font-lock-builtin-face) 511 525 (fontified t) 525 528 (fontified t face font-lock-builtin-face) 528 543 (fontified t) 543 550 (fontified t face font-lock-string-face) 550 561 (fontified t) 561 569 (fontified t face font-lock-variable-name-face) 569 598 (fontified t) 598 605 (fontified t face font-lock-string-face) 605 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 630 (fontified t) 630 638 (fontified t face font-lock-variable-name-face) 638 672 (fontified t) 672 685 (fontified t) 685 687 (fontified t face font-lock-comment-delimiter-face) 687 709 (fontified t face font-lock-comment-face) 709 717 (fontified t) 717 724 (fontified t face font-lock-variable-name-face) 724 744 (fontified t) 744 747 (fontified t face font-lock-builtin-face) 747 761 (fontified t) 761 764 (fontified t face font-lock-builtin-face) 764 779 (fontified t) 779 786 (fontified t face font-lock-string-face) 786 797 (fontified t) 797 805 (fontified t face font-lock-variable-name-face) 805 834 (fontified t) 834 841 (fontified t face font-lock-string-face) 841 852 (fontified t) 852 854 (fontified t face font-lock-keyword-face) 854 866 (fontified t) 866 874 (fontified t face font-lock-variable-name-face) 874 912 (fontified t) 912 918 (fontified t face font-lock-keyword-face) 918 929 (fontified t) 929 931 (fontified t face font-lock-comment-delimiter-face) 931 990 (fontified t face font-lock-comment-face) 990 997 (fontified t face font-lock-variable-name-face) 997 1000 (fontified t) 1000 1003 (fontified t face font-lock-builtin-face) 1003 1018 (fontified t) 1018 1024 (fontified t face font-lock-keyword-face) 1024 1058 (fontified t) 1058 1065 (fontified t face font-lock-string-face) 1065 1107 (fontified t) 1107 1112 (fontified t face font-lock-builtin-face) 1112 1113 (fontified t) 1113 1126 (fontified t face font-lock-string-face) 1126 1137 (fontified t) 1137 1142 (fontified t face font-lock-builtin-face) 1142 1143 (fontified t) 1143 1160 (fontified t face font-lock-string-face) 1160 1186 (fontified t) 1186 1193 (fontified t face font-lock-string-face) 1193 1196 (fontified t)) . 1) (undo-tree-id708 . -685) (undo-tree-id709 . 765) (undo-tree-id710 . -432) (undo-tree-id711 . -415) (undo-tree-id712 . -415) (undo-tree-id713 . -440) (undo-tree-id714 . -415) (undo-tree-id715 . -415) (undo-tree-id716 . -423) (undo-tree-id717 . 524) (undo-tree-id718 . -673) (undo-tree-id719 . -652) (undo-tree-id720 . -652) (undo-tree-id721 . -685) (undo-tree-id722 . -673) 686) nil (26107 59800 575232 47000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -674) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) 686 (t 26107 59800 736222 610000)) nil (26107 59802 827123 890000) 0 nil])
([nil nil ((897 . 909) (#("    " 0 4 (fontified t)) . 897) 913 (t 26107 59803 21945 715000)) nil (26107 59963 970787 809000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -905) 921) nil (26107 59963 970784 783000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -901) 917) nil (26107 59963 970782 496000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -897) 913) nil (26107 59963 970780 256000) 0 nil])
([nil nil ((897 . 909) 909) nil (26107 59963 970778 3000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -905) 921) nil (26107 59963 970775 770000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -901) 917) nil (26107 59963 970773 475000) 0 nil])
([nil nil ((896 . 909)) nil (26107 59963 970771 485000) 0 nil])
([nil nil ((909 . 919)) nil (26107 59963 970769 950000) 0 nil])
([nil nil ((358 . 363)) nil (26107 59963 970768 355000) 0 nil])
([nil nil ((363 . 364)) nil (26107 59963 970766 829000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -363) (undo-tree-id756 . -1) 364) nil (26107 59963 970764 787000) 0 nil])
([nil nil ((363 . 375)) nil (26107 59963 970761 169000) 0 nil])
([nil nil ((#("        lower = ord(\"a\")
        upper = ord(\"A\")
" 0 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 19 (fontified t face font-lock-builtin-face) 19 20 (fontified t) 20 23 (fontified t face font-lock-string-face) 23 33 (fontified t) 33 38 (fontified t face font-lock-variable-name-face) 38 41 (fontified t) 41 44 (fontified t face font-lock-builtin-face) 44 45 (fontified t) 45 48 (fontified t face font-lock-string-face) 48 50 (fontified t)) . 400) (undo-tree-id754 . -50) (undo-tree-id755 . -50) 450) nil (26107 59963 970759 54000) 0 nil])
([nil nil ((341 . 346)) nil (26107 59963 970753 796000) 0 nil])
([nil nil ((nil rear-nonsticky nil 395 . 396) (nil fontified nil 394 . 396) (nil fontified nil 391 . 394) (nil fontified nil 390 . 391) (nil fontified nil 387 . 390) (nil fontified nil 384 . 387) (nil fontified nil 379 . 384) (nil fontified nil 369 . 379) (nil fontified nil 366 . 369) (nil fontified nil 365 . 366) (nil fontified nil 362 . 365) (nil fontified nil 359 . 362) (nil fontified nil 354 . 359) (nil fontified nil 346 . 354) (346 . 396)) nil (26107 59963 970750 953000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -346) 342) nil (26107 59963 970743 453000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -367)) nil (26107 59963 970741 252000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -383) (undo-tree-id753 . -1) 384) nil (26107 59963 970739 227000) 0 nil])
([nil nil ((362 . 373)) nil (26107 59963 970735 642000) 0 nil])
([nil nil ((373 . 374)) nil (26107 59963 970733 742000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t face font-lock-comment-face)) . -373) (undo-tree-id752 . -1) 374) nil (26107 59963 970731 699000) 0 nil])
([nil nil ((373 . 376)) nil (26107 59963 970727 824000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -375) (undo-tree-id751 . -1) 376) nil (26107 59963 970725 694000) 0 nil])
([nil nil ((375 . 377)) nil (26107 59963 970721 943000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -375) (undo-tree-id749 . -1) (#("b" 0 1 (fontified t face font-lock-comment-face)) . -376) (undo-tree-id750 . -1) 377) nil (26107 59963 970719 241000) 0 nil])
([nil nil ((375 . 376)) nil (26107 59963 970713 518000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -375) (undo-tree-id748 . -1) 376) nil (26107 59963 970711 503000) 0 nil])
([nil nil ((375 . 396)) nil (26107 59963 970707 930000) 0 nil])
([nil nil ((396 . 400)) nil (26107 59963 970706 412000) 0 nil])
([nil nil ((#("# This is 97, but magic numbers suck." 0 2 (fontified t face font-lock-comment-delimiter-face) 2 37 (fontified t face font-lock-comment-face)) . 363)) nil (26107 59963 970704 627000) 0 nil])
([nil nil ((nil rear-nonsticky nil 399 . 400) (nil fontified nil 365 . 400) (nil fontified nil 363 . 365) (363 . 400)) nil (26107 59963 970702 649000) 0 nil])
([nil nil ((nil rear-nonsticky nil 457 . 458) (nil fontified nil 423 . 458) (nil fontified nil 421 . 423) (421 . 458)) nil (26107 59963 970699 437000) 0 nil])
([nil nil ((421 . 422)) nil (26107 59963 970696 629000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t face font-lock-comment-face)) . -432) (undo-tree-id746 . -1) (#("7" 0 1 (fontified t face font-lock-comment-face)) . -433) (undo-tree-id747 . -1) 434) nil (26107 59963 970694 146000) 0 nil])
([nil nil ((432 . 434)) nil (26107 59963 970686 396000) 0 nil])
([nil nil ((518 . 526)) nil (26107 59963 970684 806000) 0 nil])
([nil nil ((526 . 529)) nil (26107 59963 970683 25000) 0 nil])
([nil nil ((#("new" 0 3 (fontified t)) . -526) (undo-tree-id745 . -3) 529) nil (26107 59963 970681 60000) 0 nil])
([nil nil ((526 . 535)) nil (26107 59963 970677 57000) 0 nil])
([nil nil ((#("letter = " 0 6 (fontified t face font-lock-variable-name-face) 6 9 (fontified t)) . -526) (undo-tree-id744 . -9) 535) nil (26107 59963 970674 837000) 0 nil])
([nil nil ((526 . 527)) nil (26107 59963 970670 839000) 0 nil])
([nil nil ((527 . 537)) nil (26107 59963 970669 322000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -536) (undo-tree-id743 . -1) 537) nil (26107 59963 970667 287000) 0 nil])
([nil nil ((536 . 537)) nil (26107 59963 970663 221000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -536) (undo-tree-id742 . -1) 537) nil (26107 59963 970660 986000) 0 nil])
([nil nil ((536 . 551)) nil (26107 59963 970657 216000) 0 nil])
([nil nil ((551 . 552)) nil (26107 59963 970655 453000) 0 nil])
([nil nil ((517 . 526)) nil (26107 59963 970653 321000) 0 nil])
([nil nil ((526 . 547)) nil (26107 59963 970651 360000) 0 nil])
([nil nil ((547 . 552)) nil (26107 59963 970649 728000) 0 nil])
([nil nil ((587 . 596)) nil (26107 59963 970648 60000) 0 nil])
([nil nil ((678 . 679)) nil (26107 59963 970646 342000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -678) (undo-tree-id741 . -1) 679) nil (26107 59963 970644 97000) 0 nil])
([nil nil ((#("i)" 0 2 (fontified t)) . -676) (undo-tree-id738 . -2) (undo-tree-id739 . 1) (undo-tree-id740 . -2) 678) nil (26107 59963 970639 559000) 0 nil])
([nil nil ((#("lower + " 0 8 (fontified t)) . -668) (undo-tree-id737 . -8) 676) nil (26107 59963 970631 646000) 0 nil])
([nil nil ((#("chr(" 0 3 (fontified t face font-lock-builtin-face) 3 4 (fontified t)) . -664) (undo-tree-id736 . -4) 668) nil (26107 59963 970627 553000) 0 nil])
([nil nil ((664 . 673)) nil (26107 59963 970623 901000) 0 nil])
([nil nil ((822 . 835)) nil (26107 59963 970622 298000) 0 nil])
([nil nil ((835 . 841)) nil (26107 59963 970620 683000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -839) (undo-tree-id734 . -1) (#("y" 0 1 (fontified t)) . -840) (undo-tree-id735 . -1) 841) nil (26107 59963 970618 133000) 0 nil])
([nil nil ((839 . 847)) nil (26107 59963 970612 525000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -846) (undo-tree-id733 . -1) 847) nil (26107 59963 970610 575000) 0 nil])
([nil nil ((846 . 854)) nil (26107 59963 970606 814000) 0 nil])
([nil nil ((#("i)" 0 2 (fontified t)) . -935) (undo-tree-id730 . -2) (undo-tree-id731 . 1) (undo-tree-id732 . -2) 937) nil (26107 59963 970604 399000) 0 nil])
([nil nil ((#("lower + " 0 8 (fontified t)) . -927) (undo-tree-id729 . -8) 935) nil (26107 59963 970596 836000) 0 nil])
([nil nil ((#("chr(" 0 3 (fontified t face font-lock-builtin-face) 3 4 (fontified t)) . -923) (undo-tree-id728 . -4) 927) nil (26107 59963 970591 643000) 0 nil])
([nil nil ((923 . 925)) nil (26107 59963 970586 520000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -924) (undo-tree-id727 . -1) 925) nil (26107 59963 970582 152000) 0 nil])
([nil nil ((924 . 932)) nil (26107 59963 970560 473000) 0 nil])
([nil nil ((1104 . 1113) (t 26107 59964 78589 589000)) nil (26107 60043 294318 871000) 0 nil])
([nil nil ((1 . 1396) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)

# Returns the key to a message that has been xored with a single
# character. Assume argument is of type bytes.
def break_single_char_xor(emsg):
    lower = ord(\"a\") # This is 97, but magic numbers suck.
    upper = ord(\"A\") # This is 65, but magic numbers suck.
    max_freq = 0
    the_key = \"\"
    for i in range(26):
        lc_letter = chr(lower + i)
        uc_letter = chr(upper + i)
        
        # Try lowercase letter.
        new_xor = xor_bytes(emsg, (lc_letter * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
            the_key = lc_letter

        # Try uppercase letter.
        new_xor = xor_bytes(emsg, (uc_letter * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
            the_key = uc_letter
    return the_key


# Find the key whose string has the highest frequency score.
the_key = max(xor_dict, key=lambda x: freq_score(xor_dict[x].decode(\"ascii\")))
original_message = xor_dict[the_key]

print(\"The key is:\", the_key)
print(\"The message is:\", original_message.decode(\"ascii\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 89 (fontified t) 89 102 (fontified t face font-lock-variable-name-face) 102 122 (fontified t) 122 192 (fontified t face font-lock-string-face) 192 196 (fontified t) 196 198 (fontified t face font-lock-comment-delimiter-face) 198 261 (fontified t face font-lock-comment-face) 261 263 (fontified t face font-lock-comment-delimiter-face) 263 308 (fontified t face font-lock-comment-face) 308 311 (fontified t face font-lock-keyword-face) 311 312 (fontified t) 312 333 (fontified t face font-lock-function-name-face) 333 341 (fontified t) 341 345 (fontified t) 345 350 (fontified t face font-lock-variable-name-face) 350 353 (fontified t) 353 356 (fontified t face font-lock-builtin-face) 356 357 (fontified t) 357 360 (fontified t face font-lock-string-face) 360 362 (fontified t) 362 364 (fontified t face font-lock-comment-delimiter-face) 364 398 (fontified t face font-lock-comment-face) 398 399 (fontified t rear-nonsticky t face font-lock-comment-face) 399 400 (fontified t face font-lock-comment-face) 400 404 (fontified t) 404 409 (fontified t face font-lock-variable-name-face) 409 412 (fontified t) 412 415 (fontified t face font-lock-builtin-face) 415 416 (fontified t) 416 419 (fontified t face font-lock-string-face) 419 421 (fontified t) 421 423 (fontified t face font-lock-comment-delimiter-face) 423 457 (fontified t face font-lock-comment-face) 457 458 (fontified t rear-nonsticky t face font-lock-comment-face) 458 459 (fontified t face font-lock-comment-face) 459 463 (fontified t) 463 471 (fontified t face font-lock-variable-name-face) 471 476 (fontified t) 476 480 (fontified t) 480 487 (fontified t face font-lock-variable-name-face) 487 490 (fontified t) 490 492 (fontified t face font-lock-string-face) 492 493 (fontified t) 493 497 (fontified t) 497 500 (fontified t face font-lock-keyword-face) 500 503 (fontified t) 503 505 (fontified t face font-lock-keyword-face) 505 506 (fontified t) 506 511 (fontified t face font-lock-builtin-face) 511 517 (fontified t) 517 525 (fontified t) 525 534 (fontified t face font-lock-variable-name-face) 534 537 (fontified t) 537 540 (fontified t face font-lock-builtin-face) 540 551 (fontified t) 551 552 (fontified t) 552 560 (fontified t) 560 569 (fontified t face font-lock-variable-name-face) 569 572 (fontified t) 572 575 (fontified t face font-lock-builtin-face) 575 595 (fontified t) 595 596 (fontified t) 596 604 (fontified t) 604 606 (fontified t face font-lock-comment-delimiter-face) 606 628 (fontified t face font-lock-comment-face) 628 636 (fontified t) 636 643 (fontified t face font-lock-variable-name-face) 643 672 (fontified t) 672 675 (fontified t) 675 678 (fontified t face font-lock-builtin-face) 678 693 (fontified t) 693 700 (fontified t face font-lock-string-face) 700 703 (fontified t) 703 711 (fontified t) 711 719 (fontified t face font-lock-variable-name-face) 719 748 (fontified t) 748 755 (fontified t face font-lock-string-face) 755 766 (fontified t) 766 768 (fontified t face font-lock-keyword-face) 768 780 (fontified t) 780 788 (fontified t face font-lock-variable-name-face) 788 790 (fontified t) 790 802 (fontified t) 802 810 (fontified t face font-lock-variable-name-face) 810 822 (fontified t) 822 834 (fontified t) 834 841 (fontified t face font-lock-variable-name-face) 841 854 (fontified t) 854 855 (fontified t) 855 863 (fontified t) 863 865 (fontified t face font-lock-comment-delimiter-face) 865 887 (fontified t face font-lock-comment-face) 887 895 (fontified t) 895 902 (fontified t face font-lock-variable-name-face) 902 931 (fontified t) 931 934 (fontified t) 934 937 (fontified t face font-lock-builtin-face) 937 952 (fontified t) 952 959 (fontified t face font-lock-string-face) 959 962 (fontified t) 962 970 (fontified t) 970 978 (fontified t face font-lock-variable-name-face) 978 1007 (fontified t) 1007 1014 (fontified t face font-lock-string-face) 1014 1025 (fontified t) 1025 1027 (fontified t face font-lock-keyword-face) 1027 1039 (fontified t) 1039 1047 (fontified t face font-lock-variable-name-face) 1047 1049 (fontified t) 1049 1061 (fontified t) 1061 1069 (fontified t) 1069 1081 (fontified t) 1081 1093 (fontified t) 1093 1100 (fontified t face font-lock-variable-name-face) 1100 1113 (fontified t) 1113 1117 (fontified t) 1117 1123 (fontified t face font-lock-keyword-face) 1123 1132 (fontified t) 1132 1134 (fontified t) 1134 1136 (fontified t face font-lock-comment-delimiter-face) 1136 1195 (fontified t face font-lock-comment-face) 1195 1202 (fontified t face font-lock-variable-name-face) 1202 1205 (fontified t) 1205 1208 (fontified t face font-lock-builtin-face) 1208 1223 (fontified t) 1223 1229 (fontified t face font-lock-keyword-face) 1229 1263 (fontified t) 1263 1270 (fontified t face font-lock-string-face) 1270 1312 (fontified t) 1312 1317 (fontified t face font-lock-builtin-face) 1317 1318 (fontified t) 1318 1331 (fontified t face font-lock-string-face) 1331 1342 (fontified t) 1342 1347 (fontified t face font-lock-builtin-face) 1347 1348 (fontified t) 1348 1365 (fontified t face font-lock-string-face) 1365 1391 (fontified t) 1391 1398 (fontified t face font-lock-string-face) 1398 1401 (fontified t)) . 1) (undo-tree-id757 . -420) (undo-tree-id758 . -1132) (undo-tree-id759 . -552) (undo-tree-id760 . -345) (undo-tree-id761 . -362) (undo-tree-id762 . -1132) (undo-tree-id763 . -1195) (undo-tree-id764 . -1195) (undo-tree-id765 . -1224) (undo-tree-id766 . -1312) (undo-tree-id767 . -1312) (undo-tree-id768 . -1342) (undo-tree-id769 . -1342) (undo-tree-id770 . -1342) (undo-tree-id771 . -1342) 1133) nil (26107 60043 294313 992000) 0 nil])
([nil nil ((308 . 316) (t 26107 60043 449396 235000)) nil (26107 60135 563570 460000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -315) (undo-tree-id779 . -1) 316) nil (26107 60135 563569 167000) 0 nil])
([nil nil ((315 . 320)) nil (26107 60135 563567 447000) 0 nil])
([nil nil ((332 . 334) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 332) (331 . 332) (320 . 336)) nil (26107 60135 563566 340000) 0 nil])
([nil nil ((338 . 347)) nil (26107 60135 563564 878000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-comment-face)) . -346) (undo-tree-id778 . -1) 347) nil (26107 60135 563563 920000) 0 nil])
([nil nil ((346 . 347)) nil (26107 60135 563562 159000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -346) (undo-tree-id777 . -1) 347) nil (26107 60135 563561 69000) 0 nil])
([nil nil ((#("frequenc" 0 8 (fontified t face font-lock-comment-face)) . -338) (undo-tree-id776 . -8) 346) nil (26107 60135 563558 850000) 0 nil])
([nil nil ((338 . 359)) nil (26107 60135 563556 735000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-comment-face)) . -356) (undo-tree-id773 . -1) (#("y" 0 1 (fontified t face font-lock-comment-face)) . -357) (undo-tree-id774 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -358) (undo-tree-id775 . -1) 359) nil (26107 60135 563555 54000) 0 nil])
([nil nil ((356 . 365)) nil (26107 60135 563549 606000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -364) (undo-tree-id772 . -1) 365) nil (26107 60135 563545 376000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1255) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (1256 . 1257) (t 26107 60135 713009 304000)) nil (26107 60270 432148 579000) 0 nil])
([nil nil ((1255 . 1266)) nil (26107 60270 432145 188000) 0 nil])
([nil nil ((1266 . 1287)) nil (26107 60270 432144 73000) 0 nil])
([nil nil ((1287 . 1292)) nil (26107 60270 432142 471000) 0 nil])
([nil nil ((#("max(xor_dict, key=lambda x: freq_score(xor_dict[x].decode(\"ascii\")))
" 0 3 (fontified t face font-lock-builtin-face) 3 18 (fontified t) 18 24 (fontified t face font-lock-keyword-face) 24 58 (fontified t) 58 65 (fontified t face font-lock-string-face) 65 69 (fontified t)) . -1293) (undo-tree-id780 . -69) (undo-tree-id781 . -69) (undo-tree-id782 . -69) 1362) nil (26107 60270 432138 302000) 0 nil])
([nil nil ((1329 . 1330) (t 26107 60270 574767 527000)) nil (26107 60306 113121 961000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1329) (undo-tree-id800 . -1) 1330) nil (26107 60306 113120 735000) 0 nil])
([nil nil ((#("key]" 0 4 (fontified t)) . -1325) (undo-tree-id797 . -4) (undo-tree-id798 . 1) (undo-tree-id799 . -4) 1329) nil (26107 60306 113118 532000) 0 nil])
([nil nil ((#("the_" 0 4 (fontified t)) . -1321) (undo-tree-id796 . -4) 1325) nil (26107 60306 113114 831000) 0 nil])
([nil nil ((#("dict[" 0 5 (fontified t)) . -1316) (undo-tree-id795 . -5) 1321) nil (26107 60306 113112 578000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t)) . -1312) (undo-tree-id794 . -4) 1316) nil (26107 60306 113110 500000) 0 nil])
([nil nil ((1312 . 1318)) nil (26107 60306 113108 717000) 0 nil])
([nil nil ((#("xored_" 0 6 (fontified t)) . -1312) (undo-tree-id793 . -6) 1318) nil (26107 60306 113107 773000) 0 nil])
([nil nil ((1312 . 1327)) nil (26107 60306 113106 22000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1326) (undo-tree-id792 . -1) 1327) nil (26107 60306 113105 36000) 0 nil])
([nil nil ((1326 . 1328)) nil (26107 60306 113103 302000) 0 nil])
([nil nil ((1328 . 1337)) nil (26107 60306 113102 480000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1336) (undo-tree-id791 . -1) 1337) nil (26107 60306 113101 447000) 0 nil])
([nil nil ((1322 . 1327)) nil (26107 60306 113099 692000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1326) (undo-tree-id790 . -1) 1327) nil (26107 60306 113098 741000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1325) (undo-tree-id789 . -1) 1326) nil (26107 60306 113096 804000) 0 nil])
([nil nil ((#("the" 0 3 (fontified t)) . -1322) (undo-tree-id788 . -3) 1325) nil (26107 60306 113094 595000) 0 nil])
([nil nil ((1336 . 1343)) nil (26107 60306 113091 881000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -1340) (undo-tree-id785 . -1) (#("K" 0 1 (fontified t)) . -1341) (undo-tree-id786 . -1) (#("e" 0 1 (fontified t)) . -1342) (undo-tree-id787 . -1) 1343) nil (26107 60306 113089 902000) 0 nil])
([nil nil ((1340 . 1343)) nil (26107 60306 113077 485000) 0 nil])
([nil nil ((1343 . 1345)) nil (26107 60306 113072 741000) 0 nil])
([nil nil ((1292 . 1308) (t 26107 60306 260180 177000)) nil (26107 60813 72543 607000) 0 nil])
([nil nil ((1391 . 1394) (t 26107 60813 167339 405000)) nil (26107 60821 979629 742000) 0 nil])
([nil nil ((1394 . 1407)) nil (26107 60821 979624 862000) 0 nil])
([nil nil ((#("xored_message = decode_hex(
    b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
)
" 0 13 (fontified t face font-lock-variable-name-face) 13 33 (fontified t) 33 103 (fontified t face font-lock-string-face) 103 106 (fontified t)) . 90) (undo-tree-id922 . -106) (undo-tree-id923 . -106) (undo-tree-id924 . -106) (t 26107 60822 58332 307000)) nil (26107 60977 545406 917000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -89) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) 90) nil (26107 60977 545403 334000) 0 nil])
([nil nil ((1076 . 1077)) nil (26107 60977 545399 949000) 0 nil])
([nil nil ((1077 . 1098)) nil (26107 60977 545399 222000) 0 nil])
([nil nil ((1098 . 1103)) nil (26107 60977 545398 460000) 0 nil])
([nil nil ((1103 . 1108)) nil (26107 60977 545397 718000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1213 . 1214) (nil fontified nil 1211 . 1214) (nil fontified nil 1141 . 1211) (nil fontified nil 1121 . 1141) (nil fontified nil 1108 . 1121) (1108 . 1214)) nil (26107 60977 545396 672000) 0 nil])
([nil nil ((1136 . 1144) (#("    " 0 4 (fontified t)) . 1136)) nil (26107 60977 545394 663000) 0 nil])
([nil nil ((1216 . 1220) 1217) nil (26107 60977 545393 671000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -1221) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("
" 0 1 (fontified t)) . -1222) (undo-tree-id917 . -1) (undo-tree-id918 . -1) 1223) nil (26107 60977 545392 67000) 0 nil])
([nil nil ((1221 . 1226)) nil (26107 60977 545387 425000) 0 nil])
([nil nil ((1227 . 1231) 1231) nil (26107 60977 545386 345000) 0 nil])
([nil nil ((1292 . 1296) 1300) nil (26107 60977 545385 294000) 0 nil])
([nil nil ((1359 . 1363) 1371) nil (26107 60977 545384 308000) 0 nil])
([nil nil ((1416 . 1420)) nil (26107 60977 545383 365000) 0 nil])
([nil nil ((1421 . 1425) 1425) nil (26107 60977 545382 479000) 0 nil])
([nil nil ((1471 . 1475) 1479) nil (26107 60977 545381 324000) 0 nil])
([nil nil ((1534 . 1538)) nil (26107 60977 545380 49000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1534) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) 1538) nil (26107 60977 545378 120000) 0 nil])
([nil nil ((1 . 1527) (#("from basic_functions import *
from char_freq import *
from challenge_2 import xor_bytes

# Returns the key to a message that has been xored with a single
# character. Assume argument is of type bytes. The key is found using
# the character frequency score.
def break_single_char_xor(emsg):
    lower = ord(\"a\")  # This is 97, but magic numbers suck.
    upper = ord(\"A\")  # This is 65, but magic numbers suck.
    max_freq = 0
    the_key = \"\"
    for i in range(26):
        lc_letter = chr(lower + i)
        uc_letter = chr(upper + i)

        # Try lowercase letter.
        new_xor = xor_bytes(emsg, (lc_letter * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
            the_key = lc_letter

        # Try uppercase letter.
        new_xor = xor_bytes(emsg, (uc_letter * len(emsg)).encode(\"ascii\"))
        new_freq = freq_score(new_xor.decode(\"ascii\"))
        if new_freq > max_freq:
            max_freq = new_freq
            the_key = uc_letter
    return the_key

if __name__ == \"__main__\":
    xored_message = decode_hex(
        b\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"
    )
    
    # Find the key whose string has the highest frequency score.
    the_key = break_single_char_xor(xored_message).encode(\"ascii\")
    original_message = xor_bytes(xored_message, the_key)
    
    print(\"The key is:\", the_key.decode(\"ascii\"))
    print(\"The message is:\", original_message.decode(\"ascii\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 34 (fontified t face font-lock-keyword-face) 34 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 54 (fontified t) 54 58 (fontified t face font-lock-keyword-face) 58 71 (fontified t) 71 77 (fontified t face font-lock-keyword-face) 77 88 (fontified t) 88 89 (fontified t) 89 91 (fontified t face font-lock-comment-delimiter-face) 91 154 (fontified t face font-lock-comment-face) 154 156 (fontified t face font-lock-comment-delimiter-face) 156 224 (fontified t face font-lock-comment-face) 224 226 (fontified t face font-lock-comment-delimiter-face) 226 257 (fontified t face font-lock-comment-face) 257 260 (fontified t face font-lock-keyword-face) 260 261 (fontified t) 261 282 (fontified t face font-lock-function-name-face) 282 294 (fontified t) 294 299 (fontified t face font-lock-variable-name-face) 299 302 (fontified t) 302 305 (fontified t face font-lock-builtin-face) 305 306 (fontified t) 306 309 (fontified t face font-lock-string-face) 309 312 (fontified t) 312 314 (fontified t face font-lock-comment-delimiter-face) 314 350 (fontified t face font-lock-comment-face) 350 354 (fontified t) 354 359 (fontified t face font-lock-variable-name-face) 359 362 (fontified t) 362 365 (fontified t face font-lock-builtin-face) 365 366 (fontified t) 366 369 (fontified t face font-lock-string-face) 369 372 (fontified t) 372 374 (fontified t face font-lock-comment-delimiter-face) 374 410 (fontified t face font-lock-comment-face) 410 414 (fontified t) 414 422 (fontified t face font-lock-variable-name-face) 422 431 (fontified t) 431 438 (fontified t face font-lock-variable-name-face) 438 441 (fontified t) 441 443 (fontified t face font-lock-string-face) 443 448 (fontified t) 448 451 (fontified t face font-lock-keyword-face) 451 454 (fontified t) 454 456 (fontified t face font-lock-keyword-face) 456 457 (fontified t) 457 462 (fontified t face font-lock-builtin-face) 462 476 (fontified t) 476 485 (fontified t face font-lock-variable-name-face) 485 488 (fontified t) 488 491 (fontified t face font-lock-builtin-face) 491 511 (fontified t) 511 520 (fontified t face font-lock-variable-name-face) 520 523 (fontified t) 523 526 (fontified t face font-lock-builtin-face) 526 547 (fontified t) 547 549 (fontified t face font-lock-comment-delimiter-face) 549 571 (fontified t face font-lock-comment-face) 571 579 (fontified t) 579 586 (fontified t face font-lock-variable-name-face) 586 618 (fontified t) 618 621 (fontified t face font-lock-builtin-face) 621 636 (fontified t) 636 643 (fontified t face font-lock-string-face) 643 654 (fontified t) 654 662 (fontified t face font-lock-variable-name-face) 662 691 (fontified t) 691 698 (fontified t face font-lock-string-face) 698 709 (fontified t) 709 711 (fontified t face font-lock-keyword-face) 711 723 (fontified t) 723 731 (fontified t face font-lock-variable-name-face) 731 777 (fontified t) 777 784 (fontified t face font-lock-variable-name-face) 784 806 (fontified t) 806 808 (fontified t face font-lock-comment-delimiter-face) 808 830 (fontified t face font-lock-comment-face) 830 838 (fontified t) 838 845 (fontified t face font-lock-variable-name-face) 845 877 (fontified t) 877 880 (fontified t face font-lock-builtin-face) 880 895 (fontified t) 895 902 (fontified t face font-lock-string-face) 902 913 (fontified t) 913 921 (fontified t face font-lock-variable-name-face) 921 950 (fontified t) 950 957 (fontified t face font-lock-string-face) 957 968 (fontified t) 968 970 (fontified t face font-lock-keyword-face) 970 982 (fontified t) 982 990 (fontified t face font-lock-variable-name-face) 990 1036 (fontified t) 1036 1043 (fontified t face font-lock-variable-name-face) 1043 1060 (fontified t) 1060 1066 (fontified t face font-lock-keyword-face) 1066 1075 (fontified t) 1075 1076 (fontified t) 1076 1078 (fontified t face font-lock-keyword-face) 1078 1079 (fontified t) 1079 1087 (fontified t face font-lock-builtin-face) 1087 1091 (fontified t) 1091 1101 (fontified t face font-lock-string-face) 1101 1103 (fontified t) 1103 1107 (fontified t) 1107 1120 (fontified t face font-lock-variable-name-face) 1120 1135 (fontified t) 1135 1143 (fontified t) 1143 1144 (fontified t) 1144 1214 (fontified t face font-lock-string-face) 1214 1215 (fontified t) 1215 1219 (fontified t) 1219 1225 (fontified t) 1225 1226 (fontified t) 1226 1230 (fontified t) 1230 1232 (fontified t face font-lock-comment-delimiter-face) 1232 1291 (fontified t face font-lock-comment-face) 1291 1295 (fontified t) 1295 1302 (fontified t face font-lock-variable-name-face) 1302 1305 (fontified t) 1305 1349 (fontified t) 1349 1356 (fontified t face font-lock-string-face) 1356 1357 (fontified t) 1357 1358 (fontified t) 1358 1362 (fontified t) 1362 1378 (fontified t face font-lock-variable-name-face) 1378 1415 (fontified t) 1415 1419 (fontified t) 1419 1420 (fontified t) 1420 1424 (fontified t) 1424 1429 (fontified t face font-lock-builtin-face) 1429 1430 (fontified t) 1430 1443 (fontified t face font-lock-string-face) 1443 1460 (fontified t) 1460 1467 (fontified t face font-lock-string-face) 1467 1468 (fontified t) 1468 1470 (fontified t) 1470 1474 (fontified t) 1474 1479 (fontified t face font-lock-builtin-face) 1479 1480 (fontified t) 1480 1497 (fontified t face font-lock-string-face) 1497 1523 (fontified t) 1523 1530 (fontified t face font-lock-string-face) 1530 1533 (fontified t)) . -1) (undo-tree-id801 . -1107) (undo-tree-id802 . -257) (undo-tree-id803 . -1226) (undo-tree-id804 . -1291) (undo-tree-id805 . -1358) (undo-tree-id806 . -257) (undo-tree-id807 . -1533) (undo-tree-id808 . -1468) (undo-tree-id809 . -88) (undo-tree-id810 . -1076) (undo-tree-id811 . -1076) (undo-tree-id812 . -1107) (undo-tree-id813 . -1076) (undo-tree-id814 . -1076) (undo-tree-id815 . -1291) (undo-tree-id816 . -1291) (undo-tree-id817 . -1305) (undo-tree-id818 . -1420) (undo-tree-id819 . -1420) (undo-tree-id820 . -1420) (undo-tree-id821 . -1420) (undo-tree-id822 . -1470) (undo-tree-id823 . -1470) (undo-tree-id824 . -1470) (undo-tree-id825 . -1470) (undo-tree-id826 . -88) (undo-tree-id827 . -1107) (undo-tree-id828 . -1107) (undo-tree-id829 . -1107) (undo-tree-id830 . -1123) (undo-tree-id831 . -1291) (undo-tree-id832 . -1291) (undo-tree-id833 . -1305) (undo-tree-id834 . -1420) (undo-tree-id835 . -1420) (undo-tree-id836 . -1420) (undo-tree-id837 . -1420) (undo-tree-id838 . -1470) (undo-tree-id839 . -1470) (undo-tree-id840 . -1470) (undo-tree-id841 . -1470) (undo-tree-id842 . -1107) (undo-tree-id843 . -1107) (undo-tree-id844 . -1107) (undo-tree-id845 . -1107) (undo-tree-id846 . -1107) (undo-tree-id847 . -1123) (undo-tree-id848 . -1107) (undo-tree-id849 . -1107) (undo-tree-id850 . -1291) (undo-tree-id851 . -1291) (undo-tree-id852 . -1305) (undo-tree-id853 . -1420) (undo-tree-id854 . -1420) (undo-tree-id855 . -1420) (undo-tree-id856 . -1420) (undo-tree-id857 . -1470) (undo-tree-id858 . -1470) (undo-tree-id859 . -1470) (undo-tree-id860 . -1470) (undo-tree-id861 . 313) (undo-tree-id862 . -1221) (undo-tree-id863 . -1107) (undo-tree-id864 . -1107) (undo-tree-id865 . -1107) (undo-tree-id866 . -1225) (undo-tree-id867 . -1226) (undo-tree-id868 . -1107) (undo-tree-id869 . -1107) (undo-tree-id870 . -1107) (undo-tree-id871 . -1230) (undo-tree-id872 . -1291) (undo-tree-id873 . -1230) (undo-tree-id874 . -1295) (undo-tree-id875 . -1295) (undo-tree-id876 . -1295) (undo-tree-id877 . -1305) (undo-tree-id878 . -1358) (undo-tree-id879 . -1295) (undo-tree-id880 . -1295) (undo-tree-id881 . -1362) (undo-tree-id882 . -1415) (undo-tree-id883 . -1362) (undo-tree-id884 . -1362) (undo-tree-id885 . -1419) (undo-tree-id886 . -1420) (undo-tree-id887 . -1362) (undo-tree-id888 . -1362) (undo-tree-id889 . -1424) (undo-tree-id890 . -1424) (undo-tree-id891 . -1424) (undo-tree-id892 . -1424) (undo-tree-id893 . -1424) (undo-tree-id894 . -1470) (undo-tree-id895 . -1424) (undo-tree-id896 . -1424) (undo-tree-id897 . -1474) (undo-tree-id898 . -1474) (undo-tree-id899 . -1474) (undo-tree-id900 . -1474) (undo-tree-id901 . -1474) (undo-tree-id902 . -1533) (undo-tree-id903 . -1474) (undo-tree-id904 . -1474) (undo-tree-id905 . -1533) (undo-tree-id906 . -1533) (undo-tree-id907 . -1474) (undo-tree-id908 . -1474) (undo-tree-id909 . -1533) (undo-tree-id910 . -1533) 1534) nil (26107 60977 545364 41000) 0 nil])
([nil nil ((1411 . 1413) (t 26107 60977 703698 499000)) nil (26107 61016 991271 419000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -1411) (undo-tree-id925 . -1) (#("*" 0 1 (fontified t)) . -1412) (undo-tree-id926 . -1) 1413) nil (26107 61016 991269 0) 0 nil])
([nil nil ((1411 . 1414)) nil (26107 61016 991258 128000) 0 nil])
([nil current ((1414 . 1432)) nil (26107 61016 991253 365000) 0 nil])
nil
