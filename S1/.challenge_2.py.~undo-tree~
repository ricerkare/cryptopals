(undo-tree-save-format-version . 1)
"65e22acb89a6ffed7a33aa268c3bb6f210558cf4"
[nil nil nil nil (26106 18505 845068 957000) 0 nil]
([nil nil ((nil rear-nonsticky nil 283 . 284) (nil fontified nil 282 . 284) (nil fontified nil 278 . 282) (nil fontified nil 277 . 278) (nil fontified nil 272 . 277) (nil fontified nil 269 . 272) (nil fontified nil 264 . 269) (nil fontified nil 246 . 264) (nil fontified nil 241 . 246) (nil fontified nil 234 . 241) (nil fontified nil 231 . 234) (nil fontified nil 230 . 231) (nil fontified nil 225 . 230) (nil fontified nil 224 . 225) (nil fontified nil 222 . 224) (nil fontified nil 219 . 222) (nil fontified nil 216 . 219) (nil fontified nil 204 . 216) (nil fontified nil 201 . 204) (nil fontified nil 194 . 201) (nil fontified nil 192 . 194) (nil fontified nil 191 . 192) (nil fontified nil 185 . 191) (nil fontified nil 177 . 185) (nil fontified nil 175 . 177) (nil fontified nil 172 . 175) (nil fontified nil 169 . 172) (nil fontified nil 165 . 169) (nil fontified nil 162 . 165) (nil fontified nil 156 . 162) (nil fontified nil 154 . 156) (nil fontified nil 151 . 154) (nil fontified nil 148 . 151) (nil fontified nil 144 . 148) (nil fontified nil 141 . 144) (nil fontified nil 139 . 141) (nil fontified nil 138 . 139) (nil fontified nil 137 . 138) (nil fontified nil 136 . 137) (nil fontified nil 124 . 136) (nil fontified nil 120 . 124) (nil fontified nil 119 . 120) (nil fontified nil 116 . 119) (nil fontified nil 114 . 116) (nil fontified nil 109 . 114) (nil fontified nil 101 . 109) (nil fontified nil 63 . 101) (nil fontified nil 62 . 63) (nil fontified nil 61 . 62) (nil fontified nil 59 . 61) (nil fontified nil 54 . 59) (nil fontified nil 46 . 54) (nil fontified nil 8 . 46) (nil fontified nil 7 . 8) (nil fontified nil 6 . 7) (nil fontified nil 5 . 6) (nil fontified nil 2 . 5) (nil fontified nil 1 . 2) (1 . 284) (t . -1)) nil (26106 18505 845065 232000) 0 nil])
([nil nil ((#("Q" 0 1 (fontified t face font-lock-comment-face)) . -2) (undo-tree-id0 . -1) (#("2" 0 1 (fontified t face font-lock-comment-face)) . -3) (undo-tree-id1 . -1) 4) nil (26106 18505 845053 309000) 0 nil])
([nil nil ((2 . 14)) nil (26106 18505 845039 697000) 0 nil])
([nil nil ((14 . 15)) nil (26106 18505 845038 860000) 0 nil])
([nil nil ((15 . 17)) nil (26106 18505 845037 541000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25 . 26) (nil fontified nil 17 . 26) (17 . 26)) nil (26106 18505 845033 393000) 0 nil])
([nil nil ((26 . 27) (t 26106 18505 990484 201000)) nil (26106 18516 499980 208000) 0 nil])
([nil nil ((27 . 29)) nil (26106 18516 499977 655000) 0 nil])
([nil nil ((nil rear-nonsticky nil 116 . 117) (nil fontified nil 29 . 117) (29 . 117)) nil (26106 18516 499971 715000) 0 nil])
([nil nil ((117 . 138) (t 26106 18516 677122 829000)) nil (26106 18525 159690 23000) 0 nil])
([nil nil ((138 . 140)) nil (26106 18525 159688 257000) 0 nil])
([nil nil ((95 . 97) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 95) (94 . 95) (140 . 141)) nil (26106 18525 159683 448000) 0 nil])
([nil nil ((#("ad  " 0 4 (fontified t face font-lock-comment-face)) . -139) (undo-tree-id12 . -3) (undo-tree-id13 . -4) 143 (t 26106 18525 312862 769000)) nil (26106 18527 992361 713000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -135) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 139) nil (26106 18527 992358 754000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -131) (undo-tree-id8 . -4) (undo-tree-id9 . -4) 135) nil (26106 18527 992355 946000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -127) (undo-tree-id6 . -4) (undo-tree-id7 . -4) 131) nil (26106 18527 992353 7000) 0 nil])
([nil nil ((#("asd " 0 4 (fontified t face font-lock-comment-face)) . -123) (undo-tree-id4 . -4) (undo-tree-id5 . -4) 127) nil (26106 18527 992349 562000) 0 nil])
([nil nil ((#("as " 0 3 (fontified t face font-lock-comment-face)) . -120) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 123) nil (26106 18527 992343 834000) 0 nil])
([nil nil ((400 . 403) (t 26106 18528 114784 167000)) nil (26106 18636 763086 904000) 0 nil])
([nil nil ((403 . 424)) nil (26106 18636 763085 769000) 0 nil])
([nil nil ((424 . 445)) nil (26106 18636 763085 76000) 0 nil])
([nil nil ((445 . 466)) nil (26106 18636 763084 259000) 0 nil])
([nil nil ((466 . 471)) nil (26106 18636 763083 522000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 471) (470 . 471) (471 . 479)) nil (26106 18636 763082 550000) 0 nil])
([nil nil ((479 . 500)) nil (26106 18636 763081 258000) 0 nil])
([nil nil ((500 . 501)) nil (26106 18636 763080 285000) 0 nil])
([nil nil ((#("
d d d d d d d d d d d d d d dioj sdoj asdpoifj apdsoijf apdfji apodsij
fpaosdj faodj fpajsd fpoasjd f" 0 1 (fontified t) 1 39 (fontified t) 39 72 (fontified t) 72 102 (fontified t)) . 399) (undo-tree-id0 . -102) (undo-tree-id1 . -1) (undo-tree-id2 . -72) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -72) (undo-tree-id6 . -102) (undo-tree-id7 . -102)) nil (26106 18636 763077 909000) 0 nil])
([nil nil ((399 . 400)) nil (26106 18636 763055 930000) 0 nil])
([nil nil ((399 . 400) (t 26106 18636 952369 646000)) nil (26106 18639 404330 447000) 0 nil])
([nil nil ((123 . 124) (t 26106 18639 559364 869000)) nil (26106 18918 484249 543000) 0 nil])
([nil nil ((125 . 128)) nil (26106 18918 484244 542000) 0 nil])
([nil nil ((183 . 187) (t 26106 18918 616890 240000)) nil (26106 18923 947408 644000) 0 nil])
([nil nil ((182 . 183) (t 26106 18924 108355 873000)) nil (26106 19021 244722 98000) 0 nil])
([nil nil ((410 . 430) (t 26106 19021 398441 375000)) nil (26106 19053 554764 617000) 0 nil])
([nil nil ((#("aeofijapeifjpaeofij " 0 20 (fontified t)) . -410) (undo-tree-id21 . -20) 430) nil (26106 19053 554763 464000) 0 nil])
([nil nil ((410 . 418)) nil (26106 19053 554761 817000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -416) (undo-tree-id19 . -1) (#("0" 0 1 (fontified t)) . -417) (undo-tree-id20 . -1) 418) nil (26106 19053 554760 557000) 0 nil])
([nil nil ((416 . 417)) nil (26106 19053 554757 905000) 0 nil])
([nil nil ((417 . 418)) nil (26106 19053 554757 146000) 0 nil])
([nil nil ((418 . 421)) nil (26106 19053 554756 450000) 0 nil])
([nil nil ((421 . 438)) nil (26106 19053 554755 475000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -437) (undo-tree-id16 . -1) (undo-tree-id17 . 1) (undo-tree-id18 . -1) 438) nil (26106 19053 554754 315000) 0 nil])
([nil nil ((437 . 440)) nil (26106 19053 554750 980000) 0 nil])
([nil nil ((440 . 445)) nil (26106 19053 554750 96000) 0 nil])
([nil nil ((445 . 447)) nil (26106 19053 554749 231000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -445) (undo-tree-id14 . -1) (#("e" 0 1 (fontified t)) . -446) (undo-tree-id15 . -1) 447) nil (26106 19053 554747 900000) 0 nil])
([nil nil ((445 . 454)) nil (26106 19053 554745 142000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . -447) (undo-tree-id13 . -7) 454) nil (26106 19053 554744 237000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -445) (undo-tree-id11 . -2) (undo-tree-id12 . -2) 447) nil (26106 19053 554742 181000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -441) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) 445) nil (26106 19053 554739 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -440) (undo-tree-id1 . -1) (undo-tree-id2 . 1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 441) nil (26106 19053 554734 290000) 0 nil])
([nil nil ((440 . 445)) nil (26106 19053 554727 848000) 0 nil])
([nil nil ((445 . 453)) nil (26106 19053 554726 966000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -452) (undo-tree-id0 . -1) 453) nil (26106 19053 554725 388000) 0 nil])
([nil nil ((452 . 456)) nil (26106 19053 554713 582000) 0 nil])
([nil nil ((456 . 457)) nil (26106 19053 554709 301000) 0 nil])
([nil nil ((457 . 458) (t 26106 19053 754356 54000)) nil (26106 19183 711998 891000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -457) (undo-tree-id27 . -1) 458) nil (26106 19186 29045 41000) 0 nil])
([nil nil ((1 . 458) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination. 

B =   \"1c0111001f010100061a024b53535009181c\".decode(\"hex\")
C =    \"686974207468652062756c6c277320657965\".decode(\"hex\")
def xorz(X, Y):
    M,N=[ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i]^N[i]) for i in range(len(X))])
print(xorz(B,C).encode('hex'))
print(\"\\n\")

fuck =0
def xoasfasd(x, i )  :
    return    0
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 26 (fontified t face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-delimiter-face) 28 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 120 (fontified t face font-lock-comment-face) 120 121 (fontified t) 121 122 (fontified t face font-lock-variable-name-face) 122 127 (fontified t) 127 165 (fontified t face font-lock-string-face) 165 173 (fontified t) 173 178 (fontified t face font-lock-string-face) 178 180 (fontified t) 180 181 (fontified t face font-lock-variable-name-face) 181 182 (fontified t) 182 187 (fontified t) 187 225 (fontified t face font-lock-string-face) 225 233 (fontified t) 233 238 (fontified t face font-lock-string-face) 238 240 (fontified t) 240 243 (fontified t face font-lock-keyword-face) 243 244 (fontified t) 244 248 (fontified t face font-lock-function-name-face) 248 260 (fontified t) 260 261 (fontified t face font-lock-variable-name-face) 261 262 (fontified t) 262 263 (fontified t face font-lock-variable-name-face) 263 265 (fontified t) 265 268 (fontified t face font-lock-builtin-face) 268 272 (fontified t) 272 275 (fontified t face font-lock-keyword-face) 275 278 (fontified t) 278 280 (fontified t face font-lock-keyword-face) 280 286 (fontified t) 286 289 (fontified t face font-lock-builtin-face) 289 293 (fontified t) 293 296 (fontified t face font-lock-keyword-face) 296 299 (fontified t) 299 301 (fontified t face font-lock-keyword-face) 301 309 (fontified t) 309 315 (fontified t face font-lock-keyword-face) 315 316 (fontified t) 316 318 (fontified t face font-lock-string-face) 318 325 (fontified t) 325 328 (fontified t face font-lock-builtin-face) 328 340 (fontified t) 340 343 (fontified t face font-lock-keyword-face) 343 346 (fontified t) 346 348 (fontified t face font-lock-keyword-face) 348 349 (fontified t) 349 354 (fontified t face font-lock-builtin-face) 354 355 (fontified t) 355 358 (fontified t face font-lock-builtin-face) 358 365 (fontified t) 365 370 (fontified t face font-lock-builtin-face) 370 388 (fontified t) 388 393 (fontified t face font-lock-string-face) 393 396 (fontified t) 396 401 (fontified t face font-lock-builtin-face) 401 402 (fontified t) 402 406 (fontified t face font-lock-string-face) 406 409 (fontified t) 409 413 (fontified t face font-lock-variable-name-face) 413 417 (fontified t) 417 420 (fontified t face font-lock-keyword-face) 420 421 (fontified t) 421 429 (fontified t face font-lock-function-name-face) 429 440 (fontified t) 440 444 (fontified t) 444 450 (fontified t face font-lock-keyword-face) 450 456 (fontified t)) . 1) (undo-tree-id30 . -184) (undo-tree-id31 . -184) (undo-tree-id32 . -456) (undo-tree-id33 . -456) (undo-tree-id34 . -456) (undo-tree-id35 . -121) (undo-tree-id36 . -121) (undo-tree-id37 . -127) (undo-tree-id38 . -121) (undo-tree-id39 . -121) (undo-tree-id40 . -127) (undo-tree-id41 . -180) (undo-tree-id42 . -180) (undo-tree-id43 . -187) (undo-tree-id44 . -180) (undo-tree-id45 . -180) (undo-tree-id46 . -187) (undo-tree-id47 . -309) (undo-tree-id48 . -309) (undo-tree-id49 . -365) (undo-tree-id50 . -365) (undo-tree-id51 . -396) (undo-tree-id52 . -396)) ((1 . 457) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

B = \"1c0111001f010100061a024b53535009181c\".decode(\"hex\")
C = \"686974207468652062756c6c277320657965\".decode(\"hex\")


def xorz(X, Y):
    M, N = [ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i] ^ N[i]) for i in range(len(X))])


print(xorz(B, C).encode(\"hex\"))
print(\"\\n\")

fuck = 0


def xoasfasd(x, i):
    return 0
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 26 (fontified t face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-delimiter-face) 28 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 119 (fontified t face font-lock-comment-face) 119 120 (fontified t) 120 121 (fontified t face font-lock-variable-name-face) 121 124 (fontified t) 124 162 (fontified t face font-lock-string-face) 162 170 (fontified t) 170 175 (fontified t face font-lock-string-face) 175 177 (fontified t) 177 178 (fontified t face font-lock-variable-name-face) 178 181 (fontified t) 181 219 (fontified t face font-lock-string-face) 219 227 (fontified t) 227 232 (fontified t face font-lock-string-face) 232 236 (fontified t) 236 239 (fontified t face font-lock-keyword-face) 239 240 (fontified t) 240 244 (fontified t face font-lock-function-name-face) 244 256 (fontified t) 256 257 (fontified t face font-lock-variable-name-face) 257 259 (fontified t) 259 260 (fontified t face font-lock-variable-name-face) 260 264 (fontified t) 264 267 (fontified t face font-lock-builtin-face) 267 271 (fontified t) 271 274 (fontified t face font-lock-keyword-face) 274 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 285 (fontified t) 285 288 (fontified t face font-lock-builtin-face) 288 292 (fontified t) 292 295 (fontified t face font-lock-keyword-face) 295 298 (fontified t) 298 300 (fontified t face font-lock-keyword-face) 300 308 (fontified t) 308 314 (fontified t face font-lock-keyword-face) 314 315 (fontified t) 315 317 (fontified t face font-lock-string-face) 317 324 (fontified t) 324 327 (fontified t face font-lock-builtin-face) 327 341 (fontified t) 341 344 (fontified t face font-lock-keyword-face) 344 347 (fontified t) 347 349 (fontified t face font-lock-keyword-face) 349 350 (fontified t) 350 355 (fontified t face font-lock-builtin-face) 355 356 (fontified t) 356 359 (fontified t face font-lock-builtin-face) 359 368 (fontified t) 368 373 (fontified t face font-lock-builtin-face) 373 392 (fontified t) 392 397 (fontified t face font-lock-string-face) 397 400 (fontified t) 400 405 (fontified t face font-lock-builtin-face) 405 406 (fontified t) 406 410 (fontified t face font-lock-string-face) 410 413 (fontified t) 413 417 (fontified t face font-lock-variable-name-face) 417 424 (fontified t) 424 427 (fontified t face font-lock-keyword-face) 427 428 (fontified t) 428 436 (fontified t face font-lock-function-name-face) 436 448 (fontified t) 448 454 (fontified t face font-lock-keyword-face) 454 457 (fontified t)) . 1) (undo-tree-id28 . -456) (undo-tree-id29 . -444) (t 26106 19183 852940 919000)) (26106 19187 399425 939000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -423) (undo-tree-id58 . -1) 424 (t 26106 19183 852940 919000)) nil (26106 19203 124735 592000) 0 nil])
([nil nil ((#("
def xoasfasd(x, i):
    return 0
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 13 (fontified t face font-lock-function-name-face) 13 25 (fontified t) 25 31 (fontified t face font-lock-keyword-face) 31 34 (fontified t)) . -423) (undo-tree-id55 . -34) (undo-tree-id56 . -34) (undo-tree-id57 . -34) 457) nil (26106 19203 124731 183000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t face font-lock-function-name-face)) . -244) (undo-tree-id54 . -1) 245) nil (26106 19203 124724 174000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -377) (undo-tree-id53 . -1) 378) nil (26106 19203 124716 400000) 0 nil])
([nil nil ((120 . 121) (t 26106 34806 774487 723000)) nil (26106 35034 820645 897000) 0 nil])
([nil nil ((nil rear-nonsticky nil 275 . 276) (nil fontified nil 274 . 276) (nil fontified nil 266 . 274) (nil fontified nil 245 . 266) (nil fontified nil 232 . 245) (nil fontified nil 230 . 232) (nil fontified nil 219 . 230) (nil fontified nil 198 . 219) (nil fontified nil 188 . 198) (nil fontified nil 179 . 188) (nil fontified nil 173 . 179) (nil fontified nil 165 . 173) (nil fontified nil 159 . 165) (nil fontified nil 137 . 159) (nil fontified nil 135 . 137) (nil fontified nil 123 . 135) (nil fontified nil 121 . 123) (121 . 276)) nil (26106 35034 820644 123000) 0 nil])
([nil nil ((#("# Challenge 1
# Convert hex to base64
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 38 (face font-lock-comment-face fontified t)) . -121) (undo-tree-id5 . -38) (undo-tree-id6 . -38) (undo-tree-id7 . -38) 159) nil (26106 35037 72917 21000) 0 nil])
([nil nil ((243 . 254)) nil (26106 35072 554142 751000) 0 nil] [nil nil ((243 . 254)) ((#("decode_hex(" 0 11 (fontified t)) . 243)) (26106 35036 520116 542000) 0 nil])
([nil nil ((#("hex\")" 0 4 (face font-lock-string-face fontified t) 4 5 (fontified t)) . -301) (undo-tree-id32 . -5) (undo-tree-id33 . 1) (undo-tree-id34 . -5) 306) nil (26106 35072 554141 730000) 0 nil])
([nil nil ((#("hex\")" 0 4 (face font-lock-string-face fontified t) 4 5 (fontified t)) . -301) (undo-tree-id2 . -5) (undo-tree-id3 . 1) (undo-tree-id4 . -5) 306) ((301 . 306)) (26106 35035 432886 917000) 0 nil])
([nil nil ((#("decode(\"" 0 7 (fontified t) 7 8 (face font-lock-string-face fontified t)) . -293) (undo-tree-id31 . -8) 301) nil (26106 35072 554138 285000) 0 nil])
([nil nil ((#("decode(\"" 0 7 (fontified t) 7 8 (face font-lock-string-face fontified t)) . -293) (undo-tree-id1 . -8) 301) ((293 . 301)) (26106 35035 92847 691000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -292) (undo-tree-id30 . -1) 293) nil (26106 35072 554136 317000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -292) (undo-tree-id0 . -1) 293) ((292 . 293)) (26106 35034 820684 744000) 0 nil])
([nil nil ((292 . 293)) nil (26106 35072 554134 521000) 0 nil])
([nil nil ((292 . 293)) ((#(")" 0 1 (fontified t)) . 292)) (26106 35034 820596 66000) 0 nil])
([nil nil ((#(".decode(\"hex\")" 0 8 (fontified t) 8 13 (face font-lock-string-face fontified t) 13 14 (fontified t)) . 336) (undo-tree-id29 . -14)) nil (26106 35072 554133 539000) 0 nil])
nil
([nil nil ((336 . 337)) nil (26106 35072 554131 946000) 0 nil])
([nil nil ((298 . 309)) nil (26106 35072 554130 963000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -349) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 350) nil (26106 35072 554129 241000) 0 nil])
([nil nil ((1 . 535) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
import codecs

decode_hex = codecs.getdecoder(\"hex_codec\")
encode_base64 = codecs.getencoder(\"base64\")

B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")

def xor(X, Y):
    M, N = [ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i] ^ N[i]) for i in range(len(X))])


print(xor(B, C).encode(\"hex\"))
print(\"\\n\")

fuck = 0
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 140 (face font-lock-keyword-face fontified t) 140 149 (fontified t) 149 159 (face font-lock-variable-name-face fontified t) 159 180 (fontified t) 180 191 (face font-lock-string-face fontified t) 191 193 (fontified t) 193 206 (face font-lock-variable-name-face fontified t) 206 227 (fontified t) 227 235 (face font-lock-string-face fontified t) 235 236 (fontified t) 236 237 (fontified t rear-nonsticky t) 237 238 (fontified t) 238 239 (face font-lock-variable-name-face fontified t) 239 253 (fontified t) 253 291 (face font-lock-string-face fontified t) 291 292 (fontified t) 292 293 (fontified t) 293 294 (face font-lock-variable-name-face fontified t) 294 308 (fontified t) 308 346 (face font-lock-string-face fontified t) 346 347 (fontified t) 347 348 (fontified t) 348 349 (fontified t) 349 352 (face font-lock-keyword-face fontified t) 352 353 (fontified t) 353 356 (face font-lock-function-name-face fontified t) 356 368 (fontified t) 368 369 (face font-lock-variable-name-face fontified t) 369 371 (fontified t) 371 372 (face font-lock-variable-name-face fontified t) 372 376 (fontified t) 376 379 (face font-lock-builtin-face fontified t) 379 383 (fontified t) 383 386 (face font-lock-keyword-face fontified t) 386 389 (fontified t) 389 391 (face font-lock-keyword-face fontified t) 391 397 (fontified t) 397 400 (face font-lock-builtin-face fontified t) 400 404 (fontified t) 404 407 (face font-lock-keyword-face fontified t) 407 410 (fontified t) 410 412 (face font-lock-keyword-face fontified t) 412 420 (fontified t) 420 426 (face font-lock-keyword-face fontified t) 426 427 (fontified t) 427 429 (face font-lock-string-face fontified t) 429 436 (fontified t) 436 439 (face font-lock-builtin-face fontified t) 439 453 (fontified t) 453 456 (face font-lock-keyword-face fontified t) 456 459 (fontified t) 459 461 (face font-lock-keyword-face fontified t) 461 462 (fontified t) 462 467 (face font-lock-builtin-face fontified t) 467 468 (fontified t) 468 471 (face font-lock-builtin-face fontified t) 471 480 (fontified t) 480 485 (face font-lock-builtin-face fontified t) 485 503 (fontified t) 503 508 (face font-lock-string-face fontified t) 508 511 (fontified t) 511 516 (face font-lock-builtin-face fontified t) 516 517 (fontified t) 517 521 (face font-lock-string-face fontified t) 521 524 (fontified t) 524 528 (face font-lock-variable-name-face fontified t) 528 533 (fontified t)) . 1) (undo-tree-id8 . -120) (undo-tree-id9 . -118) (undo-tree-id10 . -489) (undo-tree-id11 . -533) (undo-tree-id12 . -119) (undo-tree-id13 . -118) (undo-tree-id14 . -363) (undo-tree-id15 . -120) (undo-tree-id16 . -120) (undo-tree-id17 . -348) (undo-tree-id18 . -238) (undo-tree-id19 . -120) (undo-tree-id20 . -348) (undo-tree-id21 . -420) (undo-tree-id22 . -420) (undo-tree-id23 . -480) (undo-tree-id24 . -480) (undo-tree-id25 . -511) (undo-tree-id26 . -511) 349) nil (26106 35072 554122 914000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -237) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 238 (t 26106 35072 617932 158000)) nil (26106 35080 88480 116000) 0 nil])
([nil nil ((237 . 240) (t 26106 35080 155702 946000)) nil (26106 35081 802238 550000) 0 nil])
([nil nil ((1 . 536) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
import codecs

decode_hex = codecs.getdecoder(\"hex_codec\")
encode_base64 = codecs.getencoder(\"base64\")



B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")


def xor(X, Y):
    M, N = [ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i] ^ N[i]) for i in range(len(X))])


print(xor(B, C).encode(\"hex\"))
print(\"\\n\")

fuck = 0
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 140 (face font-lock-keyword-face fontified t) 140 149 (fontified t) 149 159 (face font-lock-variable-name-face fontified t) 159 180 (fontified t) 180 191 (face font-lock-string-face fontified t) 191 193 (fontified t) 193 206 (face font-lock-variable-name-face fontified t) 206 227 (fontified t) 227 235 (face font-lock-string-face fontified t) 235 237 (fontified t) 237 238 (fontified t) 238 240 (fontified t) 240 241 (face font-lock-variable-name-face fontified t) 241 255 (fontified t) 255 293 (face font-lock-string-face fontified t) 293 295 (fontified t) 295 296 (face font-lock-variable-name-face fontified t) 296 310 (fontified t) 310 348 (face font-lock-string-face fontified t) 348 352 (fontified t) 352 355 (face font-lock-keyword-face fontified t) 355 356 (fontified t) 356 359 (face font-lock-function-name-face fontified t) 359 371 (fontified t) 371 372 (face font-lock-variable-name-face fontified t) 372 374 (fontified t) 374 375 (face font-lock-variable-name-face fontified t) 375 379 (fontified t) 379 382 (face font-lock-builtin-face fontified t) 382 386 (fontified t) 386 389 (face font-lock-keyword-face fontified t) 389 392 (fontified t) 392 394 (face font-lock-keyword-face fontified t) 394 400 (fontified t) 400 403 (face font-lock-builtin-face fontified t) 403 407 (fontified t) 407 410 (face font-lock-keyword-face fontified t) 410 413 (fontified t) 413 415 (face font-lock-keyword-face fontified t) 415 423 (fontified t) 423 429 (face font-lock-keyword-face fontified t) 429 430 (fontified t) 430 432 (face font-lock-string-face fontified t) 432 439 (fontified t) 439 442 (face font-lock-builtin-face fontified t) 442 456 (fontified t) 456 459 (face font-lock-keyword-face fontified t) 459 462 (fontified t) 462 464 (face font-lock-keyword-face fontified t) 464 465 (fontified t) 465 470 (face font-lock-builtin-face fontified t) 470 471 (fontified t) 471 474 (face font-lock-builtin-face fontified t) 474 483 (fontified t) 483 488 (face font-lock-builtin-face fontified t) 488 506 (fontified t) 506 511 (face font-lock-string-face fontified t) 511 514 (fontified t) 514 519 (face font-lock-builtin-face fontified t) 519 520 (fontified t) 520 524 (face font-lock-string-face fontified t) 524 527 (fontified t) 527 531 (face font-lock-variable-name-face fontified t) 531 536 (fontified t)) . 1) (undo-tree-id37 . -239) (undo-tree-id38 . -240) (undo-tree-id39 . -240) (undo-tree-id40 . -244) (undo-tree-id41 . -295) (undo-tree-id42 . -295) (undo-tree-id43 . -299) (undo-tree-id44 . -423) (undo-tree-id45 . -423) (undo-tree-id46 . -483) (undo-tree-id47 . -483) (undo-tree-id48 . -514) (undo-tree-id49 . -514) (undo-tree-id50 . 300) (undo-tree-id51 . -237) (undo-tree-id52 . -193) (undo-tree-id53 . -193) (undo-tree-id54 . -237) (undo-tree-id55 . -193) (undo-tree-id56 . -193) (undo-tree-id57 . -209) (undo-tree-id58 . 299) (undo-tree-id59 . -238) (undo-tree-id60 . -193) (undo-tree-id61 . -193) (undo-tree-id62 . -238) (undo-tree-id63 . 298) (undo-tree-id64 . -239) (undo-tree-id65 . -193) (undo-tree-id66 . -193) (undo-tree-id67 . -239) (undo-tree-id68 . -239) 240) nil (26106 35081 802232 85000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -239) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 240 (t 26106 35081 875650 863000)) nil (26106 35083 314631 178000) 0 nil])
([nil nil ((480 . 481) (t 26106 35083 386605 176000)) nil (26106 35355 338924 256000) 0 nil])
([nil nil ((481 . 482)) nil (26106 35355 338923 337000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -481) (undo-tree-id95 . -1) 482) nil (26106 35355 338922 302000) 0 nil])
([nil nil ((481 . 492)) nil (26106 35355 338920 565000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -491) (undo-tree-id94 . -1) 492) nil (26106 35355 338919 681000) 0 nil])
([nil nil ((491 . 497)) nil (26106 35355 338918 33000) 0 nil])
([nil nil ((497 . 502)) nil (26106 35355 338917 238000) 0 nil])
([nil nil ((502 . 509)) nil (26106 35355 338916 500000) 0 nil])
([nil nil ((509 . 510)) nil (26106 35355 338915 763000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -509) (undo-tree-id93 . -1) 510) nil (26106 35355 338914 835000) 0 nil])
([nil nil ((480 . 481)) nil (26106 35355 338913 101000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-function-name-face fontified t)) . -490) (undo-tree-id92 . -1) 491) nil (26106 35355 338912 121000) 0 nil])
([nil nil ((490 . 495)) nil (26106 35355 338910 445000) 0 nil])
([nil nil ((514 . 515)) nil (26106 35355 338909 712000) 0 nil])
([nil nil ((481 . 483)) nil (26106 35355 338908 981000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . -482) (undo-tree-id91 . -1) 483) nil (26106 35355 338908 89000) 0 nil])
([nil nil ((482 . 487)) nil (26106 35355 338906 392000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . -486) (undo-tree-id90 . -1) 487) nil (26106 35355 338905 273000) 0 nil])
([nil nil ((486 . 490)) nil (26106 35355 338903 494000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -489) (undo-tree-id89 . -1) 490) nil (26106 35355 338902 574000) 0 nil])
([nil nil ((489 . 510)) nil (26106 35355 338900 808000) 0 nil])
([nil nil ((510 . 518)) nil (26106 35355 338900 92000) 0 nil])
([nil nil ((552 . 554)) nil (26106 35355 338899 378000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -552) (undo-tree-id87 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -553) (undo-tree-id88 . -1) 554) nil (26106 35355 338898 287000) 0 nil])
([nil nil ((552 . 562)) nil (26106 35355 338895 710000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -559) (undo-tree-id84 . -1) (#("[" 0 1 (fontified t)) . -560) (undo-tree-id85 . -1) (#("i" 0 1 (fontified t)) . -561) (undo-tree-id86 . -1) 562) nil (26106 35355 338894 367000) 0 nil])
([nil nil ((559 . 572)) nil (26106 35355 338885 901000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -569) (undo-tree-id81 . -1) (#("n" 0 1 (fontified t)) . -570) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -571) (undo-tree-id83 . -1) 572) nil (26106 35355 338884 601000) 0 nil])
([nil nil ((569 . 587)) nil (26106 35355 338880 325000) 0 nil])
([nil nil ((551 . 557)) nil (26106 35355 338879 554000) 0 nil])
([nil nil ((593 . 594)) nil (26106 35355 338878 683000) 0 nil])
([nil nil ((#("def xor(X, Y):
    M, N = [ord(i) for i in X], [ord(i) for i in Y]
    return \"\".join([chr(M[i] ^ N[i]) for i in range(len(X))])
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-function-name-face fontified t) 7 19 (fontified t) 19 20 (face font-lock-variable-name-face fontified t) 20 22 (fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 27 (fontified t) 27 30 (face font-lock-builtin-face fontified t) 30 34 (fontified t) 34 37 (face font-lock-keyword-face fontified t) 37 40 (fontified t) 40 42 (face font-lock-keyword-face fontified t) 42 48 (fontified t) 48 51 (face font-lock-builtin-face fontified t) 51 55 (fontified t) 55 58 (face font-lock-keyword-face fontified t) 58 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 71 (fontified t) 71 77 (face font-lock-keyword-face fontified t) 77 78 (fontified t) 78 80 (face font-lock-string-face fontified t) 80 87 (fontified t) 87 90 (face font-lock-builtin-face fontified t) 90 104 (fontified t) 104 107 (face font-lock-keyword-face fontified t) 107 110 (fontified t) 110 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 118 (face font-lock-builtin-face fontified t) 118 119 (fontified t) 119 122 (face font-lock-builtin-face fontified t) 122 129 (fontified t)) . 351) (undo-tree-id79 . -129) (undo-tree-id80 . -129)) nil (26106 35355 338877 471000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -349) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("
" 0 1 (fontified t)) . -350) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 351) nil (26106 35355 338873 931000) 0 nil])
([nil nil ((1 . 519) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
import codecs

decode_hex = codecs.getdecoder(\"hex_codec\")
encode_base64 = codecs.getencoder(\"base64\")

B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")

# Assume x and y are the same length.
def xor_bytes(x, y):
    return bytes([x[i] ^ y[i] for i in range(len(x))])

print(xor(B, C).encode(\"hex\"))
print(\"\\n\")

fuck = 0
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 140 (face font-lock-keyword-face fontified t) 140 149 (fontified t) 149 159 (face font-lock-variable-name-face fontified t) 159 180 (fontified t) 180 191 (face font-lock-string-face fontified t) 191 193 (fontified t) 193 206 (face font-lock-variable-name-face fontified t) 206 227 (fontified t) 227 235 (face font-lock-string-face fontified t) 235 238 (fontified t) 238 239 (face font-lock-variable-name-face fontified t) 239 253 (fontified t) 253 291 (face font-lock-string-face fontified t) 291 293 (fontified t) 293 294 (face font-lock-variable-name-face fontified t) 294 308 (fontified t) 308 346 (face font-lock-string-face fontified t) 346 348 (fontified t) 348 349 (fontified t) 349 351 (face font-lock-comment-delimiter-face fontified t) 351 386 (face font-lock-comment-face fontified t) 386 387 (face font-lock-comment-face fontified t) 387 390 (face font-lock-keyword-face fontified t) 390 391 (fontified t) 391 400 (face font-lock-function-name-face fontified t) 400 408 (fontified t) 408 412 (fontified t) 412 418 (face font-lock-keyword-face fontified t) 418 419 (fontified t) 419 424 (face font-lock-builtin-face fontified t) 424 425 (fontified t) 425 438 (fontified t) 438 441 (face font-lock-keyword-face fontified t) 441 444 (fontified t) 444 446 (face font-lock-keyword-face fontified t) 446 447 (fontified t) 447 452 (face font-lock-builtin-face fontified t) 452 453 (fontified t) 453 456 (face font-lock-builtin-face fontified t) 456 462 (fontified t) 462 463 (fontified t) 463 464 (fontified t) 464 469 (face font-lock-builtin-face fontified t) 469 487 (fontified t) 487 488 (face font-lock-string-face fontified t) 488 491 (face font-lock-string-face fontified t) 491 492 (face font-lock-string-face fontified t) 492 495 (fontified t) 495 500 (face font-lock-builtin-face fontified t) 500 501 (fontified t) 501 502 (face font-lock-string-face fontified t) 502 504 (face font-lock-string-face fontified t) 504 505 (face font-lock-string-face fontified t) 505 508 (fontified t) 508 512 (face font-lock-variable-name-face fontified t) 512 517 (fontified t)) . 1) (undo-tree-id71 . -348) (undo-tree-id72 . -349) (undo-tree-id73 . -412) (undo-tree-id74 . -349) 350) nil (26106 35355 338866 164000) 0 nil])
([nil nil ((#("hex\")" 0 4 (face font-lock-string-face fontified t) 4 5 (fontified t)) . -490) (undo-tree-id106 . -5) (undo-tree-id107 . 1) (undo-tree-id108 . -5) 495 (t 26106 35355 396103 206000)) nil (26106 35431 639829 314000) 0 nil])
([nil nil ((#("encode(\"" 0 7 (fontified t) 7 8 (face font-lock-string-face fontified t)) . -482) (undo-tree-id105 . -8) 490) nil (26106 35431 639825 330000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -481) (undo-tree-id104 . -1) 482) nil (26106 35431 639822 831000) 0 nil])
([nil nil ((472 . 480)) nil (26106 35431 639819 664000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -478) (undo-tree-id102 . -1) (#("b" 0 1 (fontified t)) . -479) (undo-tree-id103 . -1) 480) nil (26106 35431 639818 203000) 0 nil])
([nil nil ((478 . 485)) nil (26106 35431 639814 757000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -484) (undo-tree-id101 . -1) 485) nil (26106 35431 639813 421000) 0 nil])
([nil nil ((484 . 485)) nil (26106 35431 639811 55000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -483) (undo-tree-id99 . -1) (#("6" 0 1 (fontified t)) . -484) (undo-tree-id100 . -1) 485) nil (26106 35431 639809 706000) 0 nil])
([nil nil ((483 . 486)) nil (26106 35431 639806 100000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -495) (undo-tree-id96 . -1) (undo-tree-id97 . 1) (undo-tree-id98 . -1) 496) nil (26106 35431 639803 653000) 0 nil])
([nil nil ((495 . 497)) nil (26106 35431 639788 214000) 0 nil])
([nil nil ((#("fuck = 0" 0 4 (face font-lock-variable-name-face fontified t) 4 8 (fontified t)) . 511) (t 26106 35431 693164 935000)) nil (26106 35447 58949 4000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 511)) nil (26106 35447 58947 945000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 510)) nil (26106 35447 58946 989000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -509) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 510) nil (26106 35447 58945 305000) 0 nil])
([nil nil ((509 . 510)) nil (26106 35447 58933 291000) 0 nil])
([nil nil ((489 . 495)) nil (26106 35447 58928 861000) 0 nil])
([nil nil ((150 . 154) (t 26106 35447 118778 332000)) nil (26106 35612 383266 71000) 0 nil])
([nil nil ((164 . 168)) nil (26106 35612 383265 139000) 0 nil])
([nil nil ((170 . 173) (168 . 169)) nil (26106 35612 383264 279000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 173) (#("=" 0 1 (fontified t)) . 173)) nil (26106 35612 383263 44000) 0 nil])
([nil nil ((173 . 180)) nil (26106 35612 383262 146000) 0 nil])
([nil nil ((210 . 213)) nil (26106 35612 383261 428000) 0 nil])
([nil nil ((213 . 214)) nil (26106 35612 383260 700000) 0 nil])
([nil nil ((214 . 224)) nil (26106 35612 383259 986000) 0 nil])
([nil nil ((224 . 233)) nil (26106 35612 383259 256000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -165) (undo-tree-id229 . -1) 166) nil (26106 35612 383258 108000) 0 nil])
([nil nil ((165 . 167)) nil (26106 35612 383256 479000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -165) (undo-tree-id227 . -1) (#("e" 0 1 (fontified t)) . -166) (undo-tree-id228 . -1) 167) nil (26106 35612 383255 402000) 0 nil])
([nil nil ((165 . 171)) nil (26106 35612 383252 782000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -165) (undo-tree-id226 . -6) 171) nil (26106 35612 383251 919000) 0 nil])
([nil nil ((165 . 171)) nil (26106 35612 383250 239000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -165) (undo-tree-id225 . -6) 171) nil (26106 35612 383249 239000) 0 nil])
([nil nil ((165 . 166)) nil (26106 35612 383247 587000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -165) (undo-tree-id224 . -1) 166) nil (26106 35612 383246 655000) 0 nil])
([nil nil ((165 . 166)) nil (26106 35612 383245 35000) 0 nil])
([nil nil ((210 . 213)) nil (26106 35612 383244 283000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -210) (undo-tree-id219 . -1) (#("0" 0 1 (fontified t)) . -211) (undo-tree-id220 . -1) (#("]" 0 1 (fontified t)) . -212) (undo-tree-id221 . -1) (undo-tree-id222 . 1) (undo-tree-id223 . -1) 213) nil (26106 35612 383242 924000) 0 nil])
([nil nil ((210 . 213)) nil (26106 35612 383237 972000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -235) (undo-tree-id218 . -1) 236) nil (26106 35612 383237 73000) 0 nil])
([nil nil ((235 . 238)) nil (26106 35612 383235 264000) 0 nil])
([nil nil ((239 . 243) 260) nil (26106 35612 383234 376000) 0 nil])
([nil nil ((243 . 250)) nil (26106 35612 383233 467000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -248) (undo-tree-id216 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -249) (undo-tree-id217 . -1) 250) nil (26106 35612 383232 328000) 0 nil])
([nil nil ((248 . 249)) nil (26106 35612 383229 575000) 0 nil])
([nil nil ((#("encode" 0 6 (face font-lock-variable-name-face fontified t)) . 249) (undo-tree-id215 . -6)) nil (26106 35612 383228 480000) 0 nil])
([nil nil ((#("_base64" 0 7 (face font-lock-variable-name-face fontified t)) . 249) (undo-tree-id214 . -7)) nil (26106 35612 383226 495000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 249) (#(" " 0 1 (fontified t)) . 249)) nil (26106 35612 383223 883000) 0 nil])
([nil nil ((277 . 283)) nil (26106 35612 383222 224000) 0 nil])
([nil nil ((1 . 566) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
import codecs

def decode_hex(s):
    return codecs.getdecoder(\"hex_codec\")(s)[0]
def encode_base64(s):
    return codecs.getencoder(\"base64\")(s)[0]

B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")

# Assume x and y are the same length.
def xor_bytes(x, y):
    return bytes([x[i] ^ y[i] for i in range(len(x))])


print(encode_base64(xor_bytes(B, C)))
print(\"\\n\")
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 140 (face font-lock-keyword-face fontified t) 140 149 (fontified t) 149 152 (face font-lock-keyword-face fontified t) 152 153 (fontified t) 153 163 (face font-lock-function-name-face fontified t) 163 165 (fontified t) 165 168 (fontified t) 168 172 (fontified t) 172 178 (face font-lock-keyword-face fontified t) 178 197 (fontified t) 197 208 (face font-lock-string-face fontified t) 208 216 (fontified t) 216 219 (face font-lock-keyword-face fontified t) 219 220 (fontified t) 220 233 (face font-lock-function-name-face fontified t) 233 237 (fontified t) 237 238 (fontified t) 238 242 (fontified t) 242 248 (face font-lock-keyword-face fontified t) 248 267 (fontified t) 267 275 (face font-lock-string-face fontified t) 275 283 (fontified t) 283 284 (fontified t) 284 285 (face font-lock-variable-name-face fontified t) 285 299 (fontified t) 299 337 (face font-lock-string-face fontified t) 337 339 (fontified t) 339 340 (face font-lock-variable-name-face fontified t) 340 354 (fontified t) 354 392 (face font-lock-string-face fontified t) 392 395 (fontified t) 395 397 (face font-lock-comment-delimiter-face fontified t) 397 433 (face font-lock-comment-face fontified t) 433 436 (face font-lock-keyword-face fontified t) 436 437 (fontified t) 437 446 (face font-lock-function-name-face fontified t) 446 458 (fontified t) 458 464 (face font-lock-keyword-face fontified t) 464 465 (fontified t) 465 470 (face font-lock-builtin-face fontified t) 470 484 (fontified t) 484 487 (face font-lock-keyword-face fontified t) 487 490 (fontified t) 490 492 (face font-lock-keyword-face fontified t) 492 493 (fontified t) 493 498 (face font-lock-builtin-face fontified t) 498 499 (fontified t) 499 502 (face font-lock-builtin-face fontified t) 502 511 (fontified t) 511 516 (face font-lock-builtin-face fontified t) 516 548 (fontified t) 548 549 (fontified t) 549 554 (face font-lock-builtin-face fontified t) 554 555 (fontified t) 555 559 (face font-lock-string-face fontified t) 559 561 (fontified t)) . 1) (undo-tree-id111 . -215) (undo-tree-id112 . -498) (undo-tree-id113 . -560) (undo-tree-id114 . -561) (undo-tree-id115 . -540) (undo-tree-id116 . -561) (undo-tree-id117 . -216) (undo-tree-id118 . -216) (undo-tree-id119 . -216) (undo-tree-id120 . -242) (undo-tree-id121 . -242) (undo-tree-id122 . -242) (undo-tree-id123 . -249) (undo-tree-id124 . -284) (undo-tree-id125 . -284) (undo-tree-id126 . -288) (undo-tree-id127 . -339) (undo-tree-id128 . -339) (undo-tree-id129 . -343) (undo-tree-id130 . -549) (undo-tree-id131 . -549) (undo-tree-id132 . -242) (undo-tree-id133 . -242) (undo-tree-id134 . -249) (undo-tree-id135 . -242) (undo-tree-id136 . -242) (undo-tree-id137 . -249) (undo-tree-id138 . -242) (undo-tree-id139 . -242) (undo-tree-id140 . -249) (undo-tree-id141 . -242) (undo-tree-id142 . -242) (undo-tree-id143 . -249) (undo-tree-id144 . -242) (undo-tree-id145 . -242) (undo-tree-id146 . -249) (undo-tree-id147 . -242) (undo-tree-id148 . -242) (undo-tree-id149 . -249) (undo-tree-id150 . -242) (undo-tree-id151 . -242) (undo-tree-id152 . -249) (undo-tree-id153 . -242) (undo-tree-id154 . -242) (undo-tree-id155 . -249) (undo-tree-id156 . -242) (undo-tree-id157 . -242) (undo-tree-id158 . -249) (undo-tree-id159 . -242) (undo-tree-id160 . -242) (undo-tree-id161 . -249) (undo-tree-id162 . -242) (undo-tree-id163 . -242) (undo-tree-id164 . -249) (undo-tree-id165 . -242) (undo-tree-id166 . -242) (undo-tree-id167 . -249) (undo-tree-id168 . -284) (undo-tree-id169 . -284) (undo-tree-id170 . -288) (undo-tree-id171 . -339) (undo-tree-id172 . -339) (undo-tree-id173 . -343) (undo-tree-id174 . -549) (undo-tree-id175 . -549) (undo-tree-id176 . -242) (undo-tree-id177 . -242) (undo-tree-id178 . -249) (undo-tree-id179 . -242) (undo-tree-id180 . -242) (undo-tree-id181 . -284) (undo-tree-id182 . -284) (undo-tree-id183 . -288) (undo-tree-id184 . -339) (undo-tree-id185 . -339) (undo-tree-id186 . -343) (undo-tree-id187 . -549) (undo-tree-id188 . -549) (undo-tree-id189 . -242) (undo-tree-id190 . -242) (undo-tree-id191 . -242) (undo-tree-id192 . -242) (undo-tree-id193 . -242) (undo-tree-id194 . -242) (undo-tree-id195 . -242) (undo-tree-id196 . -242) (undo-tree-id197 . -242) (undo-tree-id198 . -242) (undo-tree-id199 . -242) (undo-tree-id200 . -242) (undo-tree-id201 . -284) (undo-tree-id202 . -284) (undo-tree-id203 . -288) (undo-tree-id204 . -339) (undo-tree-id205 . -339) (undo-tree-id206 . -343) (undo-tree-id207 . -549) (undo-tree-id208 . -549) (undo-tree-id209 . -454) (undo-tree-id210 . 63) (undo-tree-id211 . -499) (undo-tree-id212 . 56) (undo-tree-id213 . -506) 499) nil (26106 35612 383213 833000) 0 nil])
([nil nil ((#("print" 0 5 (face font-lock-builtin-face fontified t)) . 516) (t 26106 35612 492447 996000)) nil (26106 35999 270390 695000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 516) (undo-tree-id293 . 1) (undo-tree-id294 . -1)) nil (26106 35999 270389 488000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -546) (undo-tree-id290 . -1) (undo-tree-id291 . 1) (undo-tree-id292 . -1) 547) nil (26106 35999 270386 639000) 0 nil])
([nil nil ((516 . 520)) nil (26106 35999 270383 348000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -519) (undo-tree-id289 . -1) 520) nil (26106 35999 270382 397000) 0 nil])
([nil nil ((519 . 520)) nil (26106 35999 270380 700000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -517) (undo-tree-id286 . -1) (#("r" 0 1 (fontified t)) . -518) (undo-tree-id287 . -1) (#("_" 0 1 (fontified t)) . -519) (undo-tree-id288 . -1) 520) nil (26106 35999 270379 474000) 0 nil])
([nil nil ((517 . 520)) nil (26106 35999 270376 35000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -516) (undo-tree-id282 . -1) (#("o" 0 1 (fontified t)) . -517) (undo-tree-id283 . -1) (#("r" 0 1 (fontified t)) . -518) (undo-tree-id284 . -1) (#("_" 0 1 (fontified t)) . -519) (undo-tree-id285 . -1) 520) nil (26106 35999 270374 672000) 0 nil])
([nil nil ((516 . 522)) nil (26106 35999 270370 217000) 0 nil])
([nil nil ((552 . 553)) nil (26106 35999 270369 513000) 0 nil])
([nil nil ((553 . 569)) nil (26106 35999 270368 741000) 0 nil])
([nil nil ((#("decode" 0 6 (fontified t)) . -563) (undo-tree-id281 . -6) 569) nil (26106 35999 270367 834000) 0 nil])
([nil nil ((#("foo." 0 4 (fontified t)) . -559) (undo-tree-id280 . -4) 563) nil (26106 35999 270366 33000) 0 nil])
([nil nil ((#("bar = " 0 3 (face font-lock-variable-name-face fontified t) 3 6 (fontified t)) . -553) (undo-tree-id279 . -6) 559) nil (26106 35999 270364 32000) 0 nil])
([nil nil ((553 . 574)) nil (26106 35999 270362 356000) 0 nil])
([nil nil ((574 . 579)) nil (26106 35999 270361 302000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -578) (undo-tree-id278 . -1) 579) nil (26106 35999 270360 115000) 0 nil])
([nil nil ((578 . 587)) nil (26106 35999 270358 41000) 0 nil])
([nil nil ((149 . 157)) nil (26106 35999 270357 227000) 0 nil])
([nil nil ((157 . 167)) nil (26106 35999 270355 936000) 0 nil])
([nil nil ((1 . 620) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
import codecs
encoding = \"ascii\"

def decode_hex(s):
    return codecs.getdecoder(\"hex_codec\")(s)[0]


def encode_base64(s):
    return codecs.getencoder(\"base64\")(s)[0]


B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")

# Assume x and y are the same length.
def xor_bytes(x, y):
    return bytes([x[i] ^ y[i] for i in range(len(x))])


foo = encode_base64(xor_bytes(B, C))
combination = foo.decode(encoding)
print(\"\\n\")
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 140 (face font-lock-keyword-face fontified t) 140 148 (fontified t) 148 156 (face font-lock-variable-name-face fontified t) 156 159 (fontified t) 159 166 (face font-lock-string-face fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 182 (face font-lock-function-name-face fontified t) 182 191 (fontified t) 191 197 (face font-lock-keyword-face fontified t) 197 216 (fontified t) 216 227 (face font-lock-string-face fontified t) 227 237 (fontified t) 237 240 (face font-lock-keyword-face fontified t) 240 241 (fontified t) 241 254 (face font-lock-function-name-face fontified t) 254 263 (fontified t) 263 269 (face font-lock-keyword-face fontified t) 269 288 (fontified t) 288 296 (face font-lock-string-face fontified t) 296 306 (fontified t) 306 307 (face font-lock-variable-name-face fontified t) 307 321 (fontified t) 321 359 (face font-lock-string-face fontified t) 359 361 (fontified t) 361 362 (face font-lock-variable-name-face fontified t) 362 376 (fontified t) 376 414 (face font-lock-string-face fontified t) 414 417 (fontified t) 417 419 (face font-lock-comment-delimiter-face fontified t) 419 455 (face font-lock-comment-face fontified t) 455 458 (face font-lock-keyword-face fontified t) 458 459 (fontified t) 459 468 (face font-lock-function-name-face fontified t) 468 480 (fontified t) 480 486 (face font-lock-keyword-face fontified t) 486 487 (fontified t) 487 492 (face font-lock-builtin-face fontified t) 492 506 (fontified t) 506 509 (face font-lock-keyword-face fontified t) 509 512 (fontified t) 512 514 (face font-lock-keyword-face fontified t) 514 515 (fontified t) 515 520 (face font-lock-builtin-face fontified t) 520 521 (fontified t) 521 524 (face font-lock-builtin-face fontified t) 524 533 (fontified t) 533 536 (face font-lock-variable-name-face fontified t) 536 539 (fontified t) 539 570 (fontified t) 570 581 (face font-lock-variable-name-face fontified t) 581 604 (fontified t) 604 605 (fontified t) 605 610 (face font-lock-builtin-face fontified t) 610 611 (fontified t) 611 615 (face font-lock-string-face fontified t) 615 617 (fontified t)) . 1) (undo-tree-id230 . -166) (undo-tree-id231 . -304) (undo-tree-id232 . -617) (undo-tree-id233 . -617) (undo-tree-id234 . -304) (undo-tree-id235 . -605) (undo-tree-id236 . -570) (undo-tree-id237 . -570) (undo-tree-id238 . -584) (undo-tree-id239 . -605) (undo-tree-id240 . -605) (undo-tree-id241 . -168) (undo-tree-id242 . -604) (undo-tree-id243 . -148) (undo-tree-id244 . -148) (undo-tree-id245 . -159) (undo-tree-id246 . -148) (undo-tree-id247 . -148) (undo-tree-id248 . -159) (undo-tree-id249 . -148) (undo-tree-id250 . -148) (undo-tree-id251 . -159) (undo-tree-id252 . -148) (undo-tree-id253 . -148) (undo-tree-id254 . -159) (undo-tree-id255 . -148) (undo-tree-id256 . -148) (undo-tree-id257 . -159) (undo-tree-id258 . -148) (undo-tree-id259 . -148) (undo-tree-id260 . -159) (undo-tree-id261 . -148) (undo-tree-id262 . -148) (undo-tree-id263 . -159) (undo-tree-id264 . -191) (undo-tree-id265 . -191) (undo-tree-id266 . -263) (undo-tree-id267 . -263) (undo-tree-id268 . -306) (undo-tree-id269 . -306) (undo-tree-id270 . -310) (undo-tree-id271 . -361) (undo-tree-id272 . -361) (undo-tree-id273 . -365) (undo-tree-id274 . -605) (undo-tree-id275 . -605) (undo-tree-id276 . -604) (undo-tree-id277 . -605) 606) nil (26106 35999 270349 957000) 0 nil])
([nil nil ((#("print(\"\\n\")" 0 5 (face font-lock-builtin-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-string-face fontified t) 10 11 (fontified t)) . 608) (undo-tree-id297 . 1) (undo-tree-id298 . -11) (undo-tree-id299 . 6) (undo-tree-id300 . -6) (undo-tree-id301 . -11) (t 26106 35999 370823 523000)) nil (26106 36002 722435 465000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -608) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 609) nil (26106 36002 722426 886000) 0 nil])
([nil nil ((608 . 626) (t 26106 36002 778911 781000)) nil (26106 36013 600226 110000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -624) (undo-tree-id302 . -1) (#(")" 0 1 (fontified t)) . -625) (undo-tree-id303 . -1) (undo-tree-id304 . 1) (undo-tree-id305 . -1) 626) nil (26106 36013 600223 614000) 0 nil])
([nil nil ((624 . 626)) nil (26106 36013 600211 55000) 0 nil])
([nil nil ((626 . 627)) nil (26106 36013 600206 662000) 0 nil])
([nil nil ((607 . 608) (t 26106 36013 651184 6000)) nil (26106 36242 796722 840000) 0 nil])
([nil nil ((608 . 616)) nil (26106 36242 796721 904000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -613) (undo-tree-id356 . -1) (#("a" 0 1 (fontified t)) . -614) (undo-tree-id357 . -1) (#("t" 0 1 (fontified t)) . -615) (undo-tree-id358 . -1) 616) nil (26106 36242 796720 710000) 0 nil])
([nil nil ((613 . 619)) nil (26106 36242 796716 477000) 0 nil])
([nil nil ((619 . 620)) nil (26106 36242 796715 775000) 0 nil])
([nil nil ((#("combination" 0 11 (face font-lock-variable-name-face fontified t)) . -573) (undo-tree-id355 . -11) 584) nil (26106 36242 796714 899000) 0 nil])
([nil nil ((573 . 579)) nil (26106 36242 796713 213000) 0 nil])
([nil nil ((614 . 617)) nil (26106 36242 796712 464000) 0 nil])
([nil nil ((617 . 631)) nil (26106 36242 796711 696000) 0 nil])
([nil nil ((#("encode(" 0 7 (fontified t)) . -624) (undo-tree-id354 . -7) 631) nil (26106 36242 796710 847000) 0 nil])
([nil nil ((#("foobar." 0 7 (fontified t)) . -617) (undo-tree-id353 . -7) 624) nil (26106 36242 796709 22000) 0 nil])
([nil nil ((617 . 618)) nil (26106 36242 796707 363000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -617) (undo-tree-id352 . -1) 618) nil (26106 36242 796706 485000) 0 nil])
([nil nil ((617 . 627)) nil (26106 36242 796704 832000) 0 nil])
([nil nil ((#("foobar = foo.decode(encoding)" 0 6 (face font-lock-variable-name-face fontified t) 6 29 (fontified t)) . 573)) nil (26106 36242 796703 973000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 573)) nil (26106 36242 796703 123000) 0 nil])
([nil nil ((238 . 239)) nil (26106 36242 796702 420000) 0 nil])
([nil nil ((nil rear-nonsticky nil 305 . 306) (nil fontified nil 298 . 306) (nil fontified nil 287 . 298) (nil fontified nil 268 . 287) (nil fontified nil 262 . 268) (nil fontified nil 253 . 262) (nil fontified nil 243 . 253) (nil fontified nil 242 . 243) (nil fontified nil 239 . 242) (239 . 306)) nil (26106 36242 796701 270000) 0 nil])
([nil nil ((#("decode" 0 6 (face font-lock-function-name-face fontified t)) . -243) (undo-tree-id351 . -6) 249) nil (26106 36242 796698 710000) 0 nil])
([nil nil ((243 . 244)) nil (26106 36242 796697 60000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-function-name-face fontified t)) . -243) (undo-tree-id350 . -1) 244) nil (26106 36242 796696 142000) 0 nil])
([nil nil ((243 . 249)) nil (26106 36242 796694 457000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -279) (undo-tree-id343 . -1) (#("e" 0 1 (fontified t)) . -280) (undo-tree-id344 . -1) (#("c" 0 1 (fontified t)) . -281) (undo-tree-id345 . -1) (#("o" 0 1 (fontified t)) . -282) (undo-tree-id346 . -1) (#("d" 0 1 (fontified t)) . -283) (undo-tree-id347 . -1) (#("e" 0 1 (fontified t)) . -284) (undo-tree-id348 . -1) (#("r" 0 1 (fontified t)) . -285) (undo-tree-id349 . -1) 286) nil (26106 36242 796692 594000) 0 nil])
([nil nil ((279 . 286)) nil (26106 36242 796685 584000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -305) (undo-tree-id342 . -1) 306) nil (26106 36242 796684 727000) 0 nil])
([nil nil ((nil rear-nonsticky nil 373 . 374) (nil fontified nil 373 . 374) (nil fontified nil 366 . 373) (nil fontified nil 355 . 366) (nil fontified nil 336 . 355) (nil fontified nil 330 . 336) (nil fontified nil 326 . 330) (nil fontified nil 321 . 326) (nil fontified nil 317 . 321) (nil fontified nil 311 . 317) (nil fontified nil 310 . 311) (nil fontified nil 307 . 310) (307 . 374)) nil (26106 36242 796682 477000) 0 nil])
([nil nil ((374 . 375)) nil (26106 36242 796679 575000) 0 nil])
([nil nil ((#("encode" 0 6 (face font-lock-function-name-face fontified t)) . -311) (undo-tree-id341 . -6) 317) nil (26106 36242 796678 702000) 0 nil])
([nil nil ((311 . 317)) nil (26106 36242 796677 20000) 0 nil])
([nil nil ((#("hex" 0 3 (face font-lock-function-name-face fontified t)) . -318) (undo-tree-id340 . -3) 321) nil (26106 36242 796676 144000) 0 nil])
([nil nil ((318 . 324)) nil (26106 36242 796674 370000) 0 nil])
([nil nil ((#("codec" 0 5 (face font-lock-string-face fontified t)) . -363) (undo-tree-id339 . -5) 368) nil (26106 36242 796673 506000) 0 nil])
([nil nil ((#("hex_" 0 4 (face font-lock-string-face fontified t)) . -359) (undo-tree-id338 . -4) 363) nil (26106 36242 796671 575000) 0 nil])
([nil nil ((359 . 367)) nil (26106 36242 796669 860000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -366) (undo-tree-id337 . -1) 367) nil (26106 36242 796668 918000) 0 nil])
([nil nil ((366 . 371)) nil (26106 36242 796667 151000) 0 nil])
([nil nil ((#("base64" 0 6 (face font-lock-string-face fontified t)) . -433) (undo-tree-id336 . -6) 439) nil (26106 36242 796666 210000) 0 nil])
([nil nil ((433 . 447)) nil (26106 36242 796656 404000) 0 nil])
([nil nil ((#("encoder" 0 7 (face font-lock-string-face fontified t)) . -440) (undo-tree-id335 . -7) 447) nil (26106 36242 796655 535000) 0 nil])
([nil nil ((440 . 445)) nil (26106 36242 796653 796000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -444) (undo-tree-id334 . -1) 445) nil (26106 36242 796652 774000) 0 nil])
([nil nil ((444 . 445)) nil (26106 36242 796650 985000) 0 nil])
([nil nil ((744 . 750)) nil (26106 36242 796650 248000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -749) (undo-tree-id333 . -1) 750) nil (26106 36242 796649 242000) 0 nil])
([nil nil ((#("base64" 0 6 (fontified t)) . -696) (undo-tree-id332 . -6) 702) nil (26106 36242 796647 437000) 0 nil])
([nil nil ((696 . 699)) nil (26106 36242 796645 448000) 0 nil])
([nil nil ((699 . 700)) nil (26106 36242 796644 609000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -699) (undo-tree-id331 . -1) 700) nil (26106 36242 796643 603000) 0 nil])
([nil nil ((#("hex" 0 3 (fontified t)) . -696) (undo-tree-id329 . -3) (undo-tree-id330 . -3) 699) nil (26106 36242 796641 587000) 0 nil])
([nil nil ((#("encode_" 0 7 (fontified t)) . -689) (undo-tree-id327 . -7) (undo-tree-id328 . -7) 696) nil (26106 36242 796638 960000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 689) (undo-tree-id325 . 1) (undo-tree-id326 . -1)) nil (26106 36242 796636 268000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -704) (undo-tree-id322 . -1) (undo-tree-id323 . 1) (undo-tree-id324 . -1) 705) nil (26106 36242 796633 575000) 0 nil])
([nil nil ((704 . 705)) nil (26106 36242 796630 336000) 0 nil])
([nil nil ((705 . 712)) nil (26106 36242 796629 543000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -711) (undo-tree-id321 . -1) 712) nil (26106 36242 796628 509000) 0 nil])
([nil nil ((711 . 718)) nil (26106 36242 796625 631000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -717) (undo-tree-id320 . -1) 718) nil (26106 36242 796623 539000) 0 nil])
([nil nil ((717 . 722)) nil (26106 36242 796619 567000) 0 nil])
([nil nil ((722 . 726)) nil (26106 36242 796608 633000) 0 nil])
([nil nil ((1 . 780) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
import codecs

encoding = \"ascii\"


def decode_hex(s):
    return codecs.getdecoder(\"hex_codec\")(s)[0]

def encode_hex(s):
    return codecs.getencoder(\"hex_codec\")(s)[0]

def decode_base64(s):
    return codecs.getencoder(\"base64_codec\")(s)[0]

def encode_base64(s):
    return codecs.getencoder(\"base64_codec\")(s)[0]


B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")

# Assume x and y are the same length.
def xor_bytes(x, y):
    return bytes([x[i] ^ y[i] for i in range(len(x))])


foo = xor_bytes(B, C)
foo = encode_hex(foo)
combination = encode_hex(foo)

print(combination)
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 140 (face font-lock-keyword-face fontified t) 140 149 (fontified t) 149 157 (face font-lock-variable-name-face fontified t) 157 160 (fontified t) 160 167 (face font-lock-string-face fontified t) 167 170 (fontified t) 170 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 184 (face font-lock-function-name-face fontified t) 184 193 (fontified t) 193 199 (face font-lock-keyword-face fontified t) 199 218 (fontified t) 218 229 (face font-lock-string-face fontified t) 229 237 (fontified t) 237 238 (fontified t) 238 241 (face font-lock-keyword-face fontified t) 241 242 (fontified t) 242 248 (face font-lock-function-name-face fontified t) 248 252 (face font-lock-function-name-face fontified t) 252 257 (fontified t) 257 261 (fontified t) 261 267 (face font-lock-keyword-face fontified t) 267 286 (fontified t) 286 297 (face font-lock-string-face fontified t) 297 304 (fontified t) 304 305 (fontified t) 305 306 (fontified t) 306 309 (face font-lock-keyword-face fontified t) 309 310 (fontified t) 310 316 (face font-lock-function-name-face fontified t) 316 323 (face font-lock-function-name-face fontified t) 323 328 (fontified t) 328 332 (fontified t) 332 338 (face font-lock-keyword-face fontified t) 338 357 (fontified t) 357 371 (face font-lock-string-face fontified t) 371 378 (fontified t) 378 379 (fontified t rear-nonsticky t) 379 380 (fontified t) 380 383 (face font-lock-keyword-face fontified t) 383 384 (fontified t) 384 397 (face font-lock-function-name-face fontified t) 397 402 (fontified t) 402 406 (fontified t) 406 412 (face font-lock-keyword-face fontified t) 412 431 (fontified t) 431 445 (face font-lock-string-face fontified t) 445 453 (fontified t) 453 455 (fontified t) 455 456 (face font-lock-variable-name-face fontified t) 456 470 (fontified t) 470 508 (face font-lock-string-face fontified t) 508 510 (fontified t) 510 511 (face font-lock-variable-name-face fontified t) 511 525 (fontified t) 525 563 (face font-lock-string-face fontified t) 563 566 (fontified t) 566 568 (face font-lock-comment-delimiter-face fontified t) 568 604 (face font-lock-comment-face fontified t) 604 607 (face font-lock-keyword-face fontified t) 607 608 (fontified t) 608 617 (face font-lock-function-name-face fontified t) 617 629 (fontified t) 629 635 (face font-lock-keyword-face fontified t) 635 636 (fontified t) 636 641 (face font-lock-builtin-face fontified t) 641 655 (fontified t) 655 658 (face font-lock-keyword-face fontified t) 658 661 (fontified t) 661 663 (face font-lock-keyword-face fontified t) 663 664 (fontified t) 664 669 (face font-lock-builtin-face fontified t) 669 670 (fontified t) 670 673 (face font-lock-builtin-face fontified t) 673 682 (fontified t) 682 685 (face font-lock-variable-name-face fontified t) 685 704 (fontified t) 704 707 (face font-lock-variable-name-face fontified t) 707 726 (fontified t) 726 737 (face font-lock-variable-name-face fontified t) 737 756 (fontified t) 756 757 (fontified t) 757 762 (face font-lock-builtin-face fontified t) 762 775 (fontified t) 775 776 (fontified t)) . 1) (undo-tree-id306 . -688) (undo-tree-id307 . -755) (undo-tree-id308 . -170) (undo-tree-id309 . -238) (undo-tree-id310 . -305) (undo-tree-id311 . -306) (undo-tree-id312 . -444) (undo-tree-id313 . -755) (undo-tree-id314 . -14) (undo-tree-id315 . -726) (undo-tree-id316 . 22) (undo-tree-id317 . -755) (undo-tree-id318 . 26) (undo-tree-id319 . -751) 756) nil (26106 36242 796604 103000) 0 nil])
([nil nil ((#("hex" 0 3 (fontified t)) . -751) (undo-tree-id364 . -3) 754 (t 26106 36242 938466 934000)) nil (26106 36263 638130 990000) 0 nil])
([nil nil ((#("encode_" 0 7 (fontified t)) . -744) (undo-tree-id363 . -7) 751) nil (26106 36263 638128 487000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -744) (undo-tree-id362 . -1) 745) nil (26106 36263 638126 15000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -747) (undo-tree-id359 . -1) (undo-tree-id360 . 1) (undo-tree-id361 . -1) 748) nil (26106 36263 638122 774000) 0 nil])
([nil nil ((747 . 755)) nil (26106 36263 638109 464000) 0 nil])
([nil nil ((755 . 764)) nil (26106 36263 638103 984000) 0 nil])
([nil nil ((#("codecs" 0 6 (fontified t)) . -142) (undo-tree-id365 . -6) 148 (t 26106 36263 776599 273000)) nil (26106 37185 264276 13000) 0 nil])
([nil nil ((142 . 157)) nil (26106 37185 264263 519000) 0 nil])
([nil nil ((#("functions" 0 9 (fontified t)) . -148) (undo-tree-id369 . -9) 157 (t 26106 37185 429129 802000)) nil (26106 37197 406387 98000) 0 nil])
([nil nil ((#("basic_" 0 6 (fontified t)) . -142) (undo-tree-id368 . -6) 148) nil (26106 37197 406383 411000) 0 nil])
([nil nil ((#("import " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -135) (undo-tree-id367 . -7) 142) nil (26106 37197 406380 789000) 0 nil])
([nil nil ((135 . 146)) nil (26106 37197 406378 33000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -145) (undo-tree-id366 . -1) 146) nil (26106 37197 406376 17000) 0 nil])
([nil nil ((145 . 164)) nil (26106 37197 406362 853000) 0 nil])
([nil nil ((474 . 482) (t 26106 37197 565013 812000)) nil (26106 37941 411063 282000) 0 nil])
([nil nil ((#("








" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 9 (fontified t)) . -474) (undo-tree-id388 . 9) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . 8) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . 7) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . 6) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . 5) (undo-tree-id401 . -5) (undo-tree-id402 . -5) (undo-tree-id403 . 4) (undo-tree-id404 . -6) (undo-tree-id405 . -6) (undo-tree-id406 . 3) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . 2) (undo-tree-id410 . -8) (undo-tree-id411 . -8) 473) nil (26106 37941 411131 998000) 0 nil])
([nil nil ((1 . 801) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
from basic_functions import *

encoding = \"ascii\"


def decode_hex(s):
    return codecs.getdecoder(\"hex_codec\")(s)[0]


def encode_hex(s):
    return codecs.getencoder(\"hex_codec\")(s)[0]


def decode_base64(s):
    return codecs.getencoder(\"base64_codec\")(s)[0]


def encode_base64(s):
    return codecs.getencoder(\"base64_codec\")(s)[0]

B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")

# Assume x and y are the same length.
def xor_bytes(x, y):
    return bytes([x[i] ^ y[i] for i in range(len(x))])


foo = xor_bytes(B, C)
foo = encode_hex(foo)
combination = foo.decode(encoding)

print(combination)
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 14 (face font-lock-comment-face fontified t) 14 16 (face font-lock-comment-delimiter-face fontified t) 16 26 (face font-lock-comment-face fontified t) 26 28 (face font-lock-comment-delimiter-face fontified t) 28 94 (face font-lock-comment-face fontified t) 94 96 (face font-lock-comment-delimiter-face fontified t) 96 119 (face font-lock-comment-face fontified t) 119 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 134 (fontified t) 134 138 (face font-lock-keyword-face fontified t) 138 155 (fontified t) 155 161 (face font-lock-keyword-face fontified t) 161 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t) 165 173 (face font-lock-variable-name-face fontified t) 173 176 (fontified t) 176 183 (face font-lock-string-face fontified t) 183 186 (fontified t) 186 189 (face font-lock-keyword-face fontified t) 189 190 (fontified t) 190 200 (face font-lock-function-name-face fontified t) 200 209 (fontified t) 209 215 (face font-lock-keyword-face fontified t) 215 234 (fontified t) 234 245 (face font-lock-string-face fontified t) 245 255 (fontified t) 255 258 (face font-lock-keyword-face fontified t) 258 259 (fontified t) 259 269 (face font-lock-function-name-face fontified t) 269 278 (fontified t) 278 284 (face font-lock-keyword-face fontified t) 284 303 (fontified t) 303 314 (face font-lock-string-face fontified t) 314 324 (fontified t) 324 327 (face font-lock-keyword-face fontified t) 327 328 (fontified t) 328 341 (face font-lock-function-name-face fontified t) 341 350 (fontified t) 350 356 (face font-lock-keyword-face fontified t) 356 375 (fontified t) 375 389 (face font-lock-string-face fontified t) 389 399 (fontified t) 399 402 (face font-lock-keyword-face fontified t) 402 403 (fontified t) 403 416 (face font-lock-function-name-face fontified t) 416 425 (fontified t) 425 431 (face font-lock-keyword-face fontified t) 431 450 (fontified t) 450 464 (face font-lock-string-face fontified t) 464 472 (fontified t) 472 473 (fontified t) 473 474 (face font-lock-variable-name-face fontified t) 474 488 (fontified t) 488 526 (face font-lock-string-face fontified t) 526 528 (fontified t) 528 529 (face font-lock-variable-name-face fontified t) 529 543 (fontified t) 543 581 (face font-lock-string-face fontified t) 581 584 (fontified t) 584 586 (face font-lock-comment-delimiter-face fontified t) 586 622 (face font-lock-comment-face fontified t) 622 625 (face font-lock-keyword-face fontified t) 625 626 (fontified t) 626 635 (face font-lock-function-name-face fontified t) 635 647 (fontified t) 647 653 (face font-lock-keyword-face fontified t) 653 654 (fontified t) 654 659 (face font-lock-builtin-face fontified t) 659 673 (fontified t) 673 676 (face font-lock-keyword-face fontified t) 676 679 (fontified t) 679 681 (face font-lock-keyword-face fontified t) 681 682 (fontified t) 682 687 (face font-lock-builtin-face fontified t) 687 688 (fontified t) 688 691 (face font-lock-builtin-face fontified t) 691 700 (fontified t) 700 703 (face font-lock-variable-name-face fontified t) 703 722 (fontified t) 722 725 (face font-lock-variable-name-face fontified t) 725 744 (fontified t) 744 755 (face font-lock-variable-name-face fontified t) 755 779 (fontified t) 779 780 (fontified t) 780 785 (face font-lock-builtin-face fontified t) 785 799 (fontified t)) . 1) (undo-tree-id412 . -163) (undo-tree-id413 . -120) (undo-tree-id414 . -472) (undo-tree-id415 . -120) (undo-tree-id416 . -472) (undo-tree-id417 . -472) (undo-tree-id418 . -163) (undo-tree-id419 . 326) (undo-tree-id420 . -473) (undo-tree-id421 . -473) (undo-tree-id422 . 326) (undo-tree-id423 . -473) (undo-tree-id424 . -473) (undo-tree-id425 . 326) (undo-tree-id426 . -473) (undo-tree-id427 . -473) (undo-tree-id428 . 326) (undo-tree-id429 . -473) (undo-tree-id430 . -473) (undo-tree-id431 . 326) (undo-tree-id432 . -473) (undo-tree-id433 . -473) (undo-tree-id434 . 326) (undo-tree-id435 . -473) (undo-tree-id436 . -473) (undo-tree-id437 . 326) (undo-tree-id438 . -473) (undo-tree-id439 . -473) (undo-tree-id440 . 326) (undo-tree-id441 . -473) (undo-tree-id442 . -473) (undo-tree-id443 . -473) (undo-tree-id444 . -473) (undo-tree-id445 . -472) (undo-tree-id446 . -473) (undo-tree-id447 . -473) (undo-tree-id448 . -477) (undo-tree-id449 . -528) (undo-tree-id450 . -528) (undo-tree-id451 . -532) 473) nil (26106 37942 619628 371000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 473) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1)) ((473 . 474)) (26106 37941 411008 749000) 0 nil])
([nil nil ((#("
def decode_hex(s):
    return codecs.getdecoder(\"hex_codec\")(s)[0]


def encode_hex(s):
    return codecs.getencoder(\"hex_codec\")(s)[0]


def decode_base64(s):
    return codecs.getencoder(\"base64_codec\")(s)[0]


def encode_base64(s):
    return codecs.getencoder(\"base64_codec\")(s)[0]

" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 15 (fontified t face font-lock-function-name-face) 15 24 (fontified t) 24 30 (fontified t face font-lock-keyword-face) 30 49 (fontified t) 49 60 (fontified t face font-lock-string-face) 60 70 (fontified t) 70 73 (fontified t face font-lock-keyword-face) 73 74 (fontified t) 74 84 (fontified t face font-lock-function-name-face) 84 93 (fontified t) 93 99 (fontified t face font-lock-keyword-face) 99 118 (fontified t) 118 129 (fontified t face font-lock-string-face) 129 139 (fontified t) 139 142 (fontified t face font-lock-keyword-face) 142 143 (fontified t) 143 156 (fontified t face font-lock-function-name-face) 156 165 (fontified t) 165 171 (fontified t face font-lock-keyword-face) 171 190 (fontified t) 190 204 (fontified t face font-lock-string-face) 204 214 (fontified t) 214 217 (fontified t face font-lock-keyword-face) 217 218 (fontified t) 218 231 (fontified t face font-lock-function-name-face) 231 240 (fontified t) 240 246 (fontified t face font-lock-keyword-face) 246 265 (fontified t) 265 279 (fontified t face font-lock-string-face) 279 288 (fontified t)) . 186) (undo-tree-id5 . -288) (undo-tree-id6 . -287) (undo-tree-id7 . -212) (undo-tree-id8 . -288) (t 26106 37942 773011 440000)) nil (26106 38406 579268 583000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . -185) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 186) nil (26106 38406 579261 144000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -374) (undo-tree-id18 . -1) (#("[" 0 1 (fontified t)) . -375) (undo-tree-id19 . -1) (#("i" 0 1 (fontified t)) . -376) (undo-tree-id20 . -1) (#("]" 0 1 (fontified t)) . -377) (undo-tree-id21 . -1) (undo-tree-id22 . 1) (undo-tree-id23 . -1) 378 (t 26106 38406 781079 220000)) nil (26106 38483 10967 199000) 0 nil])
([nil nil ((374 . 376)) nil (26106 38483 10959 643000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -374) (undo-tree-id16 . -1) (#("x" 0 1 (fontified t)) . -375) (undo-tree-id17 . -1) 376) nil (26106 38483 10958 311000) 0 nil])
([nil nil ((374 . 375)) nil (26106 38483 10955 342000) 0 nil])
([nil nil ((#("i]" 0 2 (fontified t)) . -380) (undo-tree-id13 . -2) (undo-tree-id14 . 1) (undo-tree-id15 . -2) 382) nil (26106 38483 10954 288000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -378) (undo-tree-id11 . -1) (#("[" 0 1 (fontified t)) . -379) (undo-tree-id12 . -1) 380) nil (26106 38483 10950 308000) 0 nil])
([nil nil ((378 . 379)) nil (26106 38483 10947 299000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -384) (undo-tree-id10 . -1) 385) nil (26106 38483 10945 929000) 0 nil])
([nil nil ((384 . 388)) nil (26106 38483 11016 573000) 0 nil])
([nil nil ((#("range(len(x))])" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t) 6 9 (fontified t face font-lock-builtin-face) 9 15 (fontified t)) . 392) (undo-tree-id24 . -15)) nil (26106 38487 382954 502000) 0 nil] [nil nil ((#("range(len(x))])" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t) 6 9 (fontified t face font-lock-builtin-face) 9 15 (fontified t)) . 392) (undo-tree-id9 . -15)) ((392 . 407)) (26106 38483 10938 939000) 0 nil])
([nil nil ((392 . 403)) nil (26106 38487 382940 390000) 0 nil])
nil
([nil nil ((#("B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
C = decode_hex(\"686974207468652062756c6c277320657965\")
" 0 1 (fontified t face font-lock-variable-name-face) 1 15 (fontified t) 15 53 (fontified t face font-lock-string-face) 53 55 (fontified t) 55 56 (fontified t face font-lock-variable-name-face) 56 70 (fontified t) 70 108 (fontified t face font-lock-string-face) 108 110 (fontified t)) . 186) (undo-tree-id46 . -110) (undo-tree-id47 . -110) 296 (t 26106 38487 554966 659000)) nil (26107 60939 212416 599000) 0 nil])
([nil nil ((295 . 296)) nil (26107 60939 212413 685000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -295) (undo-tree-id45 . -1) 296) nil (26107 60939 212412 590000) 0 nil])
([nil nil ((nil rear-nonsticky nil 404 . 405) (nil fontified nil 403 . 405) (nil fontified nil 365 . 403) (nil fontified nil 351 . 365) (nil fontified nil 350 . 351) (nil fontified nil 348 . 350) (nil fontified nil 310 . 348) (nil fontified nil 296 . 310) (nil fontified nil 295 . 296) (295 . 405)) nil (26107 60939 212410 362000) 0 nil])
([nil nil ((295 . 316)) nil (26107 60939 212407 917000) 0 nil])
([nil nil ((316 . 319)) nil (26107 60939 212407 90000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -317) (undo-tree-id43 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -318) (undo-tree-id44 . -1) 319) nil (26107 60939 212405 612000) 0 nil])
([nil nil ((317 . 320)) nil (26107 60939 212402 284000) 0 nil])
([nil nil ((320 . 321)) nil (26107 60939 212401 445000) 0 nil])
([nil nil ((321 . 326)) nil (26107 60939 212400 558000) 0 nil])
([nil nil ((381 . 385) 385) nil (26107 60939 212399 424000) 0 nil])
([nil nil ((441 . 445) 449) nil (26107 60939 212398 304000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -441) 453) nil (26107 60939 212397 114000) 0 nil])
([nil nil ((441 . 445) 449) nil (26107 60939 212396 18000) 0 nil])
([nil nil ((467 . 471) 479) nil (26107 60939 212394 809000) 0 nil])
([nil nil ((493 . 497) 509) nil (26107 60939 212393 667000) 0 nil])
([nil nil ((533 . 537) 551) nil (26107 60939 212391 913000) 0 nil])
([nil current ((1 . 557) (#("# Challenge 2
# Fixed XOR
# Write a function that takes two equal-length buffers and produces
# their XOR combination.

import base64
from basic_functions import *

encoding = \"ascii\"


# Assume x and y are the same length.
def xor_bytes(x, y):
    return bytes([i ^ j for i, j in zip(x, y)])

if __name__ == \"__main__\":
    B = decode_hex(\"1c0111001f010100061a024b53535009181c\")
    C = decode_hex(\"686974207468652062756c6c277320657965\")

    foo = xor_bytes(B, C)
    foo = encode_hex(foo)
    combination = foo.decode(encoding)

    print(combination)
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 26 (fontified t face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-delimiter-face) 28 94 (fontified t face font-lock-comment-face) 94 96 (fontified t face font-lock-comment-delimiter-face) 96 119 (fontified t face font-lock-comment-face) 119 120 (fontified t) 120 126 (fontified t face font-lock-keyword-face) 126 134 (fontified t) 134 138 (fontified t face font-lock-keyword-face) 138 155 (fontified t) 155 161 (fontified t face font-lock-keyword-face) 161 165 (fontified t) 165 173 (fontified t face font-lock-variable-name-face) 173 176 (fontified t) 176 183 (fontified t face font-lock-string-face) 183 184 (fontified t) 184 185 (fontified t) 185 186 (fontified t) 186 188 (fontified t face font-lock-comment-delimiter-face) 188 224 (fontified t face font-lock-comment-face) 224 227 (fontified t face font-lock-keyword-face) 227 228 (fontified t) 228 237 (fontified t face font-lock-function-name-face) 237 245 (fontified t) 245 249 (fontified t) 249 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t) 256 261 (fontified t face font-lock-builtin-face) 261 269 (fontified t) 269 272 (fontified t face font-lock-keyword-face) 272 278 (fontified t) 278 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-builtin-face) 284 292 (fontified t) 292 293 (fontified t) 293 294 (fontified t) 294 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 305 (fontified t face font-lock-builtin-face) 305 309 (fontified t) 309 319 (fontified t face font-lock-string-face) 319 325 (fontified t) 325 326 (fontified t) 326 340 (fontified t) 340 341 (fontified t face font-lock-string-face) 341 377 (fontified t face font-lock-string-face) 377 378 (fontified t face font-lock-string-face) 378 380 (fontified t) 380 384 (fontified t) 384 385 (fontified t face font-lock-variable-name-face) 385 399 (fontified t) 399 437 (fontified t face font-lock-string-face) 437 438 (fontified t) 438 439 (rear-nonsticky t fontified t) 439 440 (fontified t) 440 444 (fontified t) 444 447 (fontified t face font-lock-variable-name-face) 447 466 (fontified t) 466 470 (fontified t) 470 473 (fontified t face font-lock-variable-name-face) 473 492 (fontified t) 492 496 (fontified t) 496 507 (fontified t face font-lock-variable-name-face) 507 531 (fontified t) 531 532 (fontified t) 532 536 (fontified t) 536 541 (fontified t face font-lock-builtin-face) 541 555 (fontified t)) . 1) (undo-tree-id25 . -294) (undo-tree-id26 . -555) (undo-tree-id27 . -184) (undo-tree-id28 . -184) (undo-tree-id29 . -293) (undo-tree-id30 . -453) (undo-tree-id31 . -224) (undo-tree-id32 . -224) (undo-tree-id33 . -554) (undo-tree-id34 . -293) (undo-tree-id35 . -165) (undo-tree-id36 . -165) (undo-tree-id37 . -185) (undo-tree-id38 . 2) (undo-tree-id39 . -554) (undo-tree-id40 . 14) (undo-tree-id41 . -542) (undo-tree-id42 . -532) 555) nil (26107 60939 212386 582000) 0 nil])
nil
