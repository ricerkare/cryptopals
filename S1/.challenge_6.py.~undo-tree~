(undo-tree-save-format-version . 1)
"e6f4da2f0d259b6d2b0b95ee393296f7453e4ac6"
[nil nil nil nil (26109 6019 165427 501000) 0 nil]
([nil nil ((1 . 14) (t . -1)) nil (26109 6019 165426 20000) 0 nil])
([nil nil ((14 . 15)) nil (26109 6019 165424 842000) 0 nil])
([nil nil ((15 . 17)) nil (26109 6019 165423 864000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39 . 40) (nil fontified nil 17 . 40) (17 . 40)) nil (26109 6019 165421 941000) 0 nil])
([nil nil ((40 . 41)) nil (26109 6019 165416 599000) 0 nil])
([nil nil ((40 . 42) (t 26109 6019 223557 498000)) nil (26109 6122 269553 595000) 0 nil])
([nil nil ((42 . 53)) nil (26109 6122 269552 592000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -52) (undo-tree-id10 . -1) 53) nil (26109 6122 269551 638000) 0 nil])
([nil nil ((#("keysize = " 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t)) . -42) (undo-tree-id9 . -10) 52) nil (26109 6122 269549 622000) 0 nil])
([nil nil ((42 . 53)) nil (26109 6122 269547 902000) 0 nil])
([nil nil ((53 . 55)) nil (26109 6122 269547 121000) 0 nil])
([nil nil ((55 . 59)) nil (26109 6122 269546 406000) 0 nil])
([nil nil ((59 . 67)) nil (26109 6122 269545 690000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -66) (undo-tree-id8 . -1) 67) nil (26109 6122 269544 688000) 0 nil])
([nil nil ((66 . 82)) nil (26109 6122 269542 977000) 0 nil])
([nil nil ((82 . 84)) nil (26109 6122 269542 293000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -83) (undo-tree-id7 . -1) 84) nil (26109 6122 269541 360000) 0 nil])
([nil nil ((83 . 86)) nil (26109 6122 269539 626000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -83) (undo-tree-id4 . -1) (#("," 0 1 (fontified t)) . -84) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t)) . -85) (undo-tree-id6 . -1) 86) nil (26109 6122 269538 304000) 0 nil])
([nil nil ((83 . 89)) nil (26109 6122 269534 506000) 0 nil])
([nil nil ((89 . 94)) nil (26109 6122 269533 769000) 0 nil])
([nil nil ((41 . 42)) nil (26109 6122 269533 26000) 0 nil])
([nil nil ((42 . 43)) nil (26109 6122 269532 312000) 0 nil])
([nil nil ((42 . 63)) nil (26109 6122 269531 594000) 0 nil])
([nil nil ((63 . 67)) nil (26109 6122 269530 826000) 0 nil])
([nil nil ((nil rear-nonsticky nil 93 . 94) (nil fontified nil 93 . 94) (nil fontified nil 91 . 93) (nil fontified nil 85 . 91) (nil fontified nil 72 . 85) (nil fontified nil 68 . 72) (68 . 94)) nil (26109 6122 269529 814000) 0 nil])
([nil nil ((nil rear-nonsticky nil 119 . 120) (nil fontified nil 119 . 120) (nil fontified nil 117 . 119) (nil fontified nil 111 . 117) (nil fontified nil 98 . 111) (nil fontified nil 94 . 98) (94 . 120)) nil (26109 6122 269527 728000) 0 nil])
([nil nil ((nil rear-nonsticky nil 145 . 146) (nil fontified nil 145 . 146) (nil fontified nil 143 . 145) (nil fontified nil 137 . 143) (nil fontified nil 124 . 137) (nil fontified nil 120 . 124) (120 . 146)) nil (26109 6122 269525 439000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -83) (undo-tree-id3 . -1) 84) nil (26109 6122 269523 392000) 0 nil])
([nil nil ((83 . 84)) nil (26109 6122 269521 658000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -109) (undo-tree-id2 . -1) 110) nil (26109 6122 269520 635000) 0 nil])
([nil nil ((109 . 110)) nil (26109 6122 269518 616000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -135) (undo-tree-id1 . -1) 136) nil (26109 6122 269517 368000) 0 nil])
([nil nil ((135 . 136)) nil (26109 6122 269514 964000) 0 nil])
([nil nil ((nil rear-nonsticky nil 171 . 172) (nil fontified nil 171 . 172) (nil fontified nil 169 . 171) (nil fontified nil 163 . 169) (nil fontified nil 150 . 163) (nil fontified nil 146 . 150) (146 . 172)) nil (26109 6122 269513 742000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -161) (undo-tree-id0 . -1) 162) nil (26109 6122 269510 467000) 0 nil])
([nil nil ((161 . 162)) nil (26109 6122 269495 280000) 0 nil])
([nil nil ((41 . 42) (t 26109 6122 326811 574000)) nil (26109 6508 313335 895000) 0 nil])
([nil nil ((42 . 47)) nil (26109 6508 313334 843000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -46) (undo-tree-id36 . -1) 47) nil (26109 6508 313333 889000) 0 nil])
([nil nil ((46 . 67)) nil (26109 6508 313332 179000) 0 nil])
([nil nil ((67 . 71)) nil (26109 6508 313331 431000) 0 nil])
([nil nil ((255 . 258)) nil (26109 6508 313330 554000) 0 nil])
([nil nil ((#("ret" 0 3 (fontified t)) . -255) (undo-tree-id35 . -3) 258) nil (26109 6508 313329 469000) 0 nil])
([nil nil ((255 . 260)) nil (26109 6508 313327 704000) 0 nil])
([nil nil ((#("print" 0 5 (fontified t face font-lock-builtin-face)) . -255) (undo-tree-id34 . -5) 260) nil (26109 6508 313326 723000) 0 nil])
([nil nil ((255 . 259)) nil (26109 6508 313324 921000) 0 nil])
([nil nil ((215 . 216)) nil (26109 6508 313324 176000) 0 nil])
([nil nil ((216 . 217)) nil (26109 6508 313323 468000) 0 nil])
([nil nil ((216 . 223)) nil (26109 6508 313322 718000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-function-name-face)) . -222) (undo-tree-id33 . -1) 223) nil (26109 6508 313321 633000) 0 nil])
([nil nil ((222 . 228)) nil (26109 6508 313319 593000) 0 nil])
([nil nil ((228 . 232)) nil (26109 6508 313318 657000) 0 nil])
([nil nil ((232 . 233)) nil (26109 6508 313317 771000) 0 nil])
([nil nil ((233 . 242)) nil (26109 6508 313317 22000) 0 nil])
([nil nil ((#("continue " 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . -233) (undo-tree-id32 . -9) 242) nil (26109 6508 313316 111000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -232) (undo-tree-id31 . -1) 233) nil (26109 6508 313314 110000) 0 nil])
([nil nil ((#("pass" 0 4 (fontified t face font-lock-keyword-face)) . -273) (undo-tree-id30 . -4) 277) nil (26109 6508 313312 143000) 0 nil])
([nil nil ((273 . 281)) nil (26109 6508 313310 231000) 0 nil])
([nil nil ((232 . 234)) nil (26109 6508 313309 514000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -233) (undo-tree-id29 . -1) 234) nil (26109 6508 313308 590000) 0 nil])
([nil nil ((233 . 239)) nil (26109 6508 313306 822000) 0 nil])
([nil nil ((239 . 244)) nil (26109 6508 313305 429000) 0 nil])
([nil nil ((244 . 251)) nil (26109 6508 313304 330000) 0 nil])
([nil nil ((251 . 252)) nil (26109 6508 313303 364000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -251) (undo-tree-id28 . -1) 252) nil (26109 6508 313302 56000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . -244) (undo-tree-id27 . -7) 251) nil (26109 6508 313299 835000) 0 nil])
([nil nil ((244 . 265)) nil (26109 6508 313297 777000) 0 nil])
([nil nil ((265 . 270)) nil (26109 6508 313296 694000) 0 nil])
([nil nil ((270 . 274)) nil (26109 6508 313295 832000) 0 nil])
([nil nil ((239 . 244)) nil (26109 6508 313294 948000) 0 nil])
([nil nil ((244 . 252)) nil (26109 6508 313294 56000) 0 nil])
([nil nil ((287 . 296)) nil (26109 6508 313293 320000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -295) (undo-tree-id26 . -1) 296) nil (26109 6508 313292 329000) 0 nil])
([nil nil ((295 . 298)) nil (26109 6508 313290 568000) 0 nil])
([nil nil ((298 . 307)) nil (26109 6508 313289 767000) 0 nil])
([nil nil ((307 . 312)) nil (26109 6508 313288 963000) 0 nil])
([nil nil ((307 . 308)) nil (26109 6508 313287 976000) 0 nil])
([nil nil ((309 . 317) (#("    " 0 4 (fontified t)) . 309) (undo-tree-id25 . -4) 313) nil (26109 6508 313286 915000) 0 nil])
([nil nil ((317 . 325)) nil (26109 6508 313284 883000) 0 nil])
([nil nil ((325 . 333)) nil (26109 6508 313284 33000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -332) (undo-tree-id24 . -1) 333) nil (26109 6508 313282 977000) 0 nil])
([nil nil ((332 . 335)) nil (26109 6508 313281 70000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -334) (undo-tree-id23 . -1) 335) nil (26109 6508 313280 15000) 0 nil])
([nil nil ((334 . 339)) nil (26109 6508 313277 0) 0 nil])
([nil nil ((339 . 348)) nil (26109 6508 313276 247000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -344) (undo-tree-id22 . -4) 348) nil (26109 6508 313274 941000) 0 nil])
([nil nil ((344 . 355)) nil (26109 6508 313272 192000) 0 nil])
([nil nil ((1 . 407) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *

keysize = 0

def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for i in range(len(foo)):
        dist += (boo >> i) % 2
    return dist

for keysize_guess in range(2, 40):
    continue
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 38 (fontified t face font-lock-comment-face) 38 39 (fontified t rear-nonsticky t face font-lock-comment-face) 39 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 70 (fontified t) 70 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 96 (fontified t) 96 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 122 (fontified t) 122 123 (rear-nonsticky t fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 148 (fontified t) 148 149 (rear-nonsticky t fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 174 (fontified t) 174 175 (rear-nonsticky t fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 200 (fontified t) 200 201 (rear-nonsticky t fontified t) 201 202 (fontified t) 202 209 (fontified t face font-lock-variable-name-face) 209 214 (fontified t) 214 215 (fontified t) 215 218 (fontified t face font-lock-keyword-face) 218 219 (fontified t) 219 231 (fontified t face font-lock-function-name-face) 231 239 (fontified t) 239 243 (fontified t) 243 247 (fontified t face font-lock-variable-name-face) 247 252 (fontified t) 252 256 (fontified t) 256 259 (fontified t face font-lock-variable-name-face) 259 278 (fontified t) 278 282 (fontified t) 282 285 (fontified t face font-lock-keyword-face) 285 288 (fontified t) 288 290 (fontified t face font-lock-keyword-face) 290 291 (fontified t) 291 296 (fontified t face font-lock-builtin-face) 296 297 (fontified t) 297 300 (fontified t face font-lock-builtin-face) 300 308 (fontified t) 308 316 (fontified t) 316 320 (fontified t face font-lock-variable-name-face) 320 339 (fontified t) 339 343 (fontified t) 343 349 (fontified t face font-lock-keyword-face) 349 354 (fontified t) 354 355 (fontified t) 355 356 (fontified t) 356 359 (fontified t face font-lock-keyword-face) 359 374 (fontified t) 374 376 (fontified t face font-lock-keyword-face) 376 377 (fontified t) 377 382 (fontified t face font-lock-builtin-face) 382 391 (fontified t) 391 395 (fontified t) 395 403 (fontified t face font-lock-keyword-face) 403 404 (fontified t)) . 1) (undo-tree-id11 . -404) (undo-tree-id12 . -267) (undo-tree-id13 . -175) (undo-tree-id14 . -16) (undo-tree-id15 . -16) (undo-tree-id16 . -71) (undo-tree-id17 . -97) (undo-tree-id18 . -123) (undo-tree-id19 . -149) (undo-tree-id20 . -404) (undo-tree-id21 . -252) 268) nil (26109 6523 787530 872000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -327) (undo-tree-id42 . -1) (#("o" 0 1 (fontified t)) . -328) (undo-tree-id43 . -1) (#("o" 0 1 (fontified t)) . -329) (undo-tree-id44 . -1) 330 (t 26109 6508 369778 268000)) nil (26109 6528 883685 41000) 0 nil] [nil nil ((#("boo" 0 3 (fontified t)) . -327) (undo-tree-id41 . -3) 330 (t 26109 6508 369778 268000)) ((327 . 330)) (26109 6523 787293 525000) 0 nil] [nil nil ((#("o" 0 1 (fontified t)) . -304) (undo-tree-id38 . -1) (#("o" 0 1 (fontified t)) . -305) (undo-tree-id39 . -1) 306 (t 26109 6508 369778 268000)) ((304 . 306)) (26109 6518 661885 40000) 0 nil])
([nil nil ((327 . 330)) nil (26109 6528 883652 482000) 0 nil])
nil
([nil nil ((#("f" 0 1 (fontified t)) . -303) (undo-tree-id37 . -1) 304) ((303 . 304)) (26109 6518 178321 3000) 0 nil])
([nil nil ((279 . 284) (t 26109 6528 983535 884000)) nil (26109 6572 860150 637000) 0 nil])
([nil nil ((303 . 312)) ((#("xor_bytes" 0 9 (fontified t)) . 303) (undo-tree-id40 . -9)) (26109 6518 178260 877000) 0 nil])
([nil nil ((284 . 297)) nil (26109 6572 860149 687000) 0 nil])
nil
([nil nil ((298 . 306) (#("    " 0 4 (fontified t)) . 298) 315) nil (26109 6572 860148 652000) 0 nil])
([nil nil ((340 . 344) 353) nil (26109 6572 860147 188000) 0 nil])
([nil nil ((#("foo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -325) (undo-tree-id46 . -3) 328) nil (26109 6572 860145 680000) 0 nil])
([nil nil ((325 . 326)) nil (26109 6572 860143 326000) 0 nil])
([nil nil ((#("foo" 0 3 (fontified t)) . -351) (undo-tree-id45 . -3) 354) nil (26109 6572 860141 243000) 0 nil])
([nil nil ((351 . 352)) nil (26109 6572 860128 922000) 0 nil])
([nil nil ((#("x)):" 0 1 (fontified t) 1 4 (fontified t)) . -325) (undo-tree-id57 . -4) 329 (t 26109 6572 926118 474000)) nil (26109 6655 704356 588000) 0 nil])
([nil nil ((#("len(" 0 3 (fontified t face font-lock-builtin-face) 3 4 (fontified t)) . -321) (undo-tree-id56 . -4) 325) nil (26109 6655 704354 384000) 0 nil])
([nil nil ((#("range(" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t)) . -315) (undo-tree-id54 . -6) (undo-tree-id55 . -6) 321) nil (26109 6655 704352 377000) 0 nil])
([nil nil ((#("in " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -312) (undo-tree-id52 . -3) (undo-tree-id53 . -3) 315) nil (26109 6655 704349 645000) 0 nil])
([nil nil ((#("i " 0 2 (fontified t)) . -310) (undo-tree-id50 . -2) (undo-tree-id51 . -2) 312) nil (26109 6655 704346 900000) 0 nil])
([nil nil ((#("for " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -306) (undo-tree-id48 . -4) (undo-tree-id49 . -4) 310) nil (26109 6655 704343 709000) 0 nil])
([nil nil ((306 . 316)) nil (26109 6655 704340 488000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -315) (undo-tree-id47 . -1) 316) nil (26109 6655 704338 204000) 0 nil])
([nil nil ((315 . 323)) nil (26109 6655 704325 501000) 0 nil])
([nil nil ((312 . 313) (t 26109 6655 780665 727000)) nil (26109 6660 300008 995000) 0 nil])
([nil nil ((319 . 320)) nil (26109 6660 300004 217000) 0 nil])
([nil nil ((325 . 326) (t 26109 6660 446652 152000)) nil (26109 6668 315625 44000) 0 nil])
([nil nil ((297 . 306) (t 26109 6668 444631 656000)) nil (26109 6693 649856 582000) 0 nil])
([nil nil ((306 . 311)) nil (26109 6693 649851 870000) 0 nil])
([nil nil ((373 . 386) (t 26109 6693 792589 297000)) nil (26109 6700 796489 390000) 0 nil])
([nil nil ((386 . 392)) nil (26109 6700 796484 755000) 0 nil])
([nil nil ((459 . 460) (t 26109 6700 851583 460000)) nil (26109 6806 327068 114000) 0 nil])
([nil nil ((460 . 464)) nil (26109 6806 327067 86000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -463) (undo-tree-id72 . -1) 464) nil (26109 6806 327066 80000) 0 nil])
([nil nil ((463 . 476)) nil (26109 6806 327064 170000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -475) (undo-tree-id71 . -1) 476) nil (26109 6806 327063 209000) 0 nil])
([nil nil ((475 . 481)) nil (26109 6806 327061 507000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . -479) (undo-tree-id69 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -480) (undo-tree-id70 . -1) 481) nil (26109 6806 327060 375000) 0 nil])
([nil nil ((479 . 484)) nil (26109 6806 327057 608000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -482) (undo-tree-id67 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -483) (undo-tree-id68 . -1) 484) nil (26109 6806 327056 493000) 0 nil])
([nil nil ((482 . 486)) nil (26109 6806 327053 586000) 0 nil])
([nil nil ((486 . 491)) nil (26109 6806 327052 862000) 0 nil])
([nil nil ((491 . 493)) nil (26109 6806 327051 998000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -492) (undo-tree-id66 . -1) 493) nil (26109 6806 327051 20000) 0 nil])
([nil nil ((492 . 505)) nil (26109 6806 327047 255000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -503) (undo-tree-id64 . -1) (#("." 0 1 (fontified t)) . -504) (undo-tree-id65 . -1) 505) nil (26109 6806 327046 32000) 0 nil])
([nil nil ((503 . 510)) nil (26109 6806 327042 105000) 0 nil])
([nil nil ((510 . 511)) nil (26109 6806 327041 289000) 0 nil])
([nil nil ((511 . 516)) nil (26109 6806 327040 568000) 0 nil])
([nil nil ((516 . 521)) nil (26109 6806 327039 788000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -520) (undo-tree-id63 . -1) 521) nil (26109 6806 327038 708000) 0 nil])
([nil nil ((520 . 523)) nil (26109 6806 327036 949000) 0 nil])
([nil nil ((523 . 524)) nil (26109 6806 327036 113000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -523) (undo-tree-id62 . -1) 524) nil (26109 6806 327034 959000) 0 nil])
([nil nil ((523 . 529)) nil (26109 6806 327032 832000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -526) (undo-tree-id59 . -1) (#("=" 0 1 (fontified t)) . -527) (undo-tree-id60 . -1) (#(" " 0 1 (fontified t)) . -528) (undo-tree-id61 . -1) 529) nil (26109 6806 327030 177000) 0 nil])
([nil nil ((526 . 537)) nil (26109 6806 327116 790000) 0 nil])
([nil nil ((#("emsg" 0 4 (fontified t face font-lock-variable-name-face)) . -491) (undo-tree-id110 . -4) 495) nil (26109 6881 700706 472000) 0 nil] [nil nil ((#("emsg." 0 5 (fontified t)) . -532) (undo-tree-id58 . -5) 537) ((532 . 537)) (26109 6806 327007 900000) 0 nil])
([nil nil ((491 . 493)) nil (26109 6881 700704 747000) 0 nil])
nil
([nil nil ((493 . 496)) nil (26109 6881 700703 918000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -491) (undo-tree-id105 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -492) (undo-tree-id106 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -493) (undo-tree-id107 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -494) (undo-tree-id108 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -495) (undo-tree-id109 . -1) 496) nil (26109 6881 700702 138000) 0 nil])
([nil nil ((491 . 492)) nil (26109 6881 700696 358000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -491) (undo-tree-id104 . -1) 492) nil (26109 6881 700695 471000) 0 nil])
([nil nil ((491 . 496)) nil (26109 6881 700693 841000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t face font-lock-variable-name-face)) . -495) (undo-tree-id103 . -1) 496) nil (26109 6881 700692 872000) 0 nil])
([nil nil ((495 . 497)) nil (26109 6881 700691 135000) 0 nil])
([nil nil ((#("emsg." 0 5 (fontified t)) . -534) (undo-tree-id102 . -5) 539) nil (26109 6881 700690 153000) 0 nil])
([nil nil ((534 . 540)) nil (26109 6881 700688 440000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t face font-lock-variable-name-face)) . -525) (undo-tree-id101 . -6) 531) nil (26109 6881 700687 391000) 0 nil])
([nil nil ((525 . 528)) nil (26109 6881 700685 691000) 0 nil])
([nil nil ((537 . 548)) nil (26109 6881 700684 982000) 0 nil])
([nil nil ((#("spi" 0 3 (fontified t)) . -545) (undo-tree-id100 . -3) 548) nil (26109 6881 700684 94000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -544) (undo-tree-id99 . -1) 545) nil (26109 6881 700682 129000) 0 nil])
([nil nil ((544 . 549)) nil (26109 6881 700680 238000) 0 nil])
([nil nil ((549 . 553)) nil (26109 6881 700679 536000) 0 nil])
([nil nil ((#("open" 0 4 (fontified t face font-lock-builtin-face)) . -549) (undo-tree-id98 . -4) 553) nil (26109 6881 700678 494000) 0 nil])
([nil nil ((549 . 555)) nil (26109 6881 700667 826000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -553) (undo-tree-id96 . -1) (#("." 0 1 (fontified t)) . -554) (undo-tree-id97 . -1) 555) nil (26109 6881 700666 567000) 0 nil])
([nil nil ((553 . 563)) nil (26109 6881 700663 993000) 0 nil])
([nil nil ((565 . 569) (#("    " 0 4 (fontified nil)) . 564) (undo-tree-id95 . -4) (563 . 569)) nil (26109 6881 700663 6000) 0 nil])
([nil nil ((569 . 573)) nil (26109 6881 700661 119000) 0 nil])
([nil nil ((#("bsae" 0 4 (fontified t)) . -569) (undo-tree-id94 . -4) 573) nil (26109 6881 700660 94000) 0 nil])
([nil nil ((569 . 572)) nil (26109 6881 700658 418000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -569) (undo-tree-id91 . -1) (#("s" 0 1 (fontified t)) . -570) (undo-tree-id92 . -1) (#("g" 0 1 (fontified t)) . -571) (undo-tree-id93 . -1) 572) nil (26109 6881 700657 131000) 0 nil])
([nil nil ((525 . 526)) nil (26109 6881 700653 522000) 0 nil])
([nil nil ((570 . 584)) nil (26109 6881 700652 737000) 0 nil])
([nil nil ((577 . 587)) nil (26109 6881 700652 11000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -585) (undo-tree-id89 . -1) (#("e" 0 1 (fontified t)) . -586) (undo-tree-id90 . -1) 587) nil (26109 6881 700650 780000) 0 nil])
([nil nil ((585 . 590)) nil (26109 6881 700648 15000) 0 nil])
([nil nil ((590 . 591)) nil (26109 6881 700647 138000) 0 nil])
([nil nil ((598 . 603)) nil (26109 6881 700646 330000) 0 nil])
([nil nil ((603 . 608)) nil (26109 6881 700645 502000) 0 nil])
([nil nil ((#("for keysize_guess in range(2, 40):
    continue
" 0 3 (fontified t face font-lock-keyword-face) 3 18 (fontified t) 18 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 26 (fontified t face font-lock-builtin-face) 26 39 (fontified t) 39 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t)) . 411) (undo-tree-id85 . -48) (undo-tree-id86 . -47) (undo-tree-id87 . -48) (undo-tree-id88 . -48)) nil (26109 6881 700644 151000) 0 nil])
([nil nil ((557 . 561) (#("    " 0 4 (fontified nil)) . 556) (undo-tree-id84 . -4) (560 . 561)) nil (26109 6881 700638 100000) 0 nil])
([nil nil ((nil rear-nonsticky nil 608 . 609) (nil fontified nil 608 . 609) (nil fontified nil 600 . 608) (nil fontified nil 587 . 600) (nil fontified nil 582 . 587) (nil fontified nil 581 . 582) (nil fontified nil 579 . 581) (nil fontified nil 564 . 579) (nil fontified nil 561 . 564) (561 . 609)) nil (26109 6881 700635 17000) 0 nil])
([nil nil ((596 . 604) (#("    " 0 4 (fontified t)) . 596)) nil (26109 6881 700631 762000) 0 nil])
([nil nil ((1 . 612) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *

keysize = 0


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist



if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read()
    file_6.close()

    emsg = decode_base64(base64_emsg)

    for keysize_guess in range(2, 40):
        continue
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 202 (fontified t) 202 209 (fontified t face font-lock-variable-name-face) 209 216 (fontified t) 216 219 (fontified t face font-lock-keyword-face) 219 220 (fontified t) 220 232 (fontified t face font-lock-function-name-face) 232 244 (fontified t) 244 248 (fontified t face font-lock-variable-name-face) 248 253 (fontified t) 253 257 (fontified t) 257 260 (fontified t face font-lock-variable-name-face) 260 279 (fontified t) 279 283 (fontified t) 283 286 (fontified t face font-lock-keyword-face) 286 289 (fontified t) 289 291 (fontified t face font-lock-keyword-face) 291 297 (fontified t) 297 305 (fontified t) 305 306 (fontified t face font-lock-variable-name-face) 306 310 (fontified t) 310 311 (fontified t) 311 319 (fontified t) 319 324 (fontified t face font-lock-keyword-face) 324 339 (fontified t) 339 340 (fontified t) 340 352 (fontified t) 352 356 (fontified t face font-lock-variable-name-face) 356 362 (fontified t) 362 373 (fontified t) 373 385 (fontified t) 385 386 (fontified t face font-lock-variable-name-face) 386 392 (fontified t) 392 396 (fontified t) 396 402 (fontified t face font-lock-keyword-face) 402 410 (fontified t) 410 411 (fontified t) 411 413 (fontified t face font-lock-keyword-face) 413 414 (fontified t) 414 422 (fontified t face font-lock-builtin-face) 422 426 (fontified t) 426 436 (fontified t face font-lock-string-face) 436 438 (fontified t) 438 442 (fontified t) 442 448 (fontified t) 448 451 (fontified t) 451 455 (fontified t face font-lock-builtin-face) 455 456 (fontified t) 456 463 (fontified t face font-lock-string-face) 463 465 (fontified t) 465 469 (fontified t) 469 480 (fontified t) 480 483 (fontified t) 483 497 (fontified t) 497 501 (fontified t) 501 516 (fontified t) 516 517 (fontified t) 517 521 (fontified t) 521 525 (fontified t) 525 555 (fontified t) 555 556 (fontified t) 556 560 (fontified t) 560 563 (fontified t face font-lock-keyword-face) 563 578 (fontified t) 578 580 (fontified t face font-lock-keyword-face) 580 581 (fontified t) 581 586 (fontified t face font-lock-builtin-face) 586 595 (fontified t) 595 603 (fontified t) 603 611 (fontified t face font-lock-keyword-face) 611 612 (fontified t rear-nonsticky t)) . 1) (undo-tree-id73 . -560) (undo-tree-id74 . -319) (undo-tree-id75 . -296) (undo-tree-id76 . -296) (undo-tree-id77 . -410) (undo-tree-id78 . -541) (undo-tree-id79 . -603) (undo-tree-id80 . -408) (undo-tree-id81 . -410) (undo-tree-id82 . -410) (undo-tree-id83 . -595) 604) nil (26109 6881 700627 187000) 0 nil])
([nil nil ((496 . 505) (t 26109 6881 761207 228000)) nil (26109 6920 640178 830000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -504) (undo-tree-id111 . -1) (undo-tree-id112 . 1) (undo-tree-id113 . -1) 505 (t 26109 6920 689509 478000)) nil (26109 7513 937353 151000) 0 nil])
([nil nil ((504 . 513)) nil (26109 7513 937337 648000) 0 nil])
([nil nil ((628 . 633) (t 26109 7514 89600 68000)) nil (26109 7893 356264 161000) 0 nil])
([nil nil ((#("continue" 0 8 (fontified t face font-lock-keyword-face)) . 620)) nil (26109 7893 356263 101000) 0 nil])
([nil nil ((620 . 625)) nil (26109 7893 356262 345000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -624) (undo-tree-id169 . -1) 625) nil (26109 7893 356261 397000) 0 nil])
([nil nil ((624 . 638)) nil (26109 7893 356259 579000) 0 nil])
([nil nil ((#("dist" 0 4 (fontified t)) . -634) (undo-tree-id168 . -4) 638) nil (26109 7893 356258 574000) 0 nil])
([nil nil ((#("hamming_" 0 8 (fontified t)) . -626) (undo-tree-id167 . -8) 634) nil (26109 7893 356256 656000) 0 nil])
([nil nil ((#("foo = " 0 3 (fontified t face font-lock-variable-name-face) 3 6 (fontified t)) . -620) (undo-tree-id166 . -6) 626) nil (26109 7893 356254 521000) 0 nil])
([nil nil ((#("keysize = 0" 0 7 (fontified t face font-lock-variable-name-face) 7 11 (fontified t)) . 203)) nil (26109 7893 356252 562000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 203)) nil (26109 7893 356251 717000) 0 nil])
([nil nil ((nil rear-nonsticky nil 571 . 572) (nil fontified nil 571 . 572) (nil fontified nil 567 . 571) (nil fontified nil 560 . 567) (560 . 572)) nil (26109 7893 356250 728000) 0 nil])
([nil nil ((560 . 564)) nil (26109 7893 356249 221000) 0 nil])
([nil nil ((624 . 628)) nil (26109 7893 356248 505000) 0 nil])
([nil nil ((628 . 630)) nil (26109 7893 356247 756000) 0 nil])
([nil nil ((#("return" 0 6 (fontified t face font-lock-keyword-face)) . -624) (undo-tree-id165 . -6) 630) nil (26109 7893 356246 731000) 0 nil])
([nil nil ((624 . 630)) nil (26109 7893 356245 27000) 0 nil])
([nil nil ((630 . 633)) nil (26109 7893 356244 239000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -631) (undo-tree-id163 . -1) (#("m" 0 1 (fontified t)) . -632) (undo-tree-id164 . -1) 633) nil (26109 7893 356243 44000) 0 nil])
([nil nil ((631 . 637)) nil (26109 7893 356240 295000) 0 nil])
([nil nil ((#("hamming" 0 7 (fontified t)) . -630) (undo-tree-id162 . -7) 637) nil (26109 7893 356239 295000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -624) (undo-tree-id156 . -1) (#("o" 0 1 (fontified t)) . -625) (undo-tree-id157 . -1) (#("o" 0 1 (fontified t)) . -626) (undo-tree-id158 . -1) (#(" " 0 1 (fontified t)) . -627) (undo-tree-id159 . -1) (#("=" 0 1 (fontified t)) . -628) (undo-tree-id160 . -1) (#(" " 0 1 (fontified t)) . -629) (undo-tree-id161 . -1) 630) nil (26109 7893 356236 461000) 0 nil])
([nil nil ((624 . 633)) nil (26109 7893 356229 991000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -629) (undo-tree-id152 . -1) (#(" " 0 1 (fontified t)) . -630) (undo-tree-id153 . -1) (#("=" 0 1 (fontified t)) . -631) (undo-tree-id154 . -1) (#(" " 0 1 (fontified t)) . -632) (undo-tree-id155 . -1) 633) nil (26109 7893 356228 398000) 0 nil])
([nil nil ((629 . 634)) nil (26109 7893 356223 781000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -630) (undo-tree-id148 . -1) (#(" " 0 1 (fontified t)) . -631) (undo-tree-id149 . -1) (#("=" 0 1 (fontified t)) . -632) (undo-tree-id150 . -1) (#(" " 0 1 (fontified t)) . -633) (undo-tree-id151 . -1) 634) nil (26109 7893 356222 178000) 0 nil])
([nil nil ((630 . 634)) nil (26109 7893 356216 453000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -630) (undo-tree-id144 . -1) (#(" " 0 1 (fontified t)) . -631) (undo-tree-id145 . -1) (#("=" 0 1 (fontified t)) . -632) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -633) (undo-tree-id147 . -1) 634) nil (26109 7893 356214 571000) 0 nil])
([nil nil ((630 . 634)) nil (26109 7893 356195 185000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -632) (undo-tree-id142 . -1) (#(" " 0 1 (fontified t)) . -633) (undo-tree-id143 . -1) 634) nil (26109 7893 356194 26000) 0 nil])
([nil nil ((632 . 633)) nil (26109 7893 356191 357000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -631) (undo-tree-id140 . -1) (#(" " 0 1 (fontified t)) . -632) (undo-tree-id141 . -1) 633) nil (26109 7893 356190 226000) 0 nil])
([nil nil ((631 . 637)) nil (26109 7893 356187 549000) 0 nil])
([nil nil ((637 . 640)) nil (26109 7893 356186 813000) 0 nil])
([nil nil ((640 . 654)) nil (26109 7893 356186 80000) 0 nil])
([nil nil ((654 . 663)) nil (26109 7893 356185 369000) 0 nil])
([nil nil ((663 . 669)) nil (26109 7893 356184 630000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -668) (undo-tree-id139 . -1) 669) nil (26109 7893 356183 698000) 0 nil])
([nil nil ((668 . 679)) nil (26109 7893 356181 876000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -678) (undo-tree-id138 . -1) 679) nil (26109 7893 356180 875000) 0 nil])
([nil nil ((678 . 692)) nil (26109 7893 356179 87000) 0 nil])
([nil nil ((692 . 694)) nil (26109 7893 356178 350000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -692) (undo-tree-id136 . -1) (#(" " 0 1 (fontified t)) . -693) (undo-tree-id137 . -1) 694) nil (26109 7893 356177 128000) 0 nil])
([nil nil ((692 . 693)) nil (26109 7893 356174 277000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -691) (undo-tree-id134 . -1) (#(" " 0 1 (fontified t)) . -692) (undo-tree-id135 . -1) 693) nil (26109 7893 356165 328000) 0 nil])
([nil nil ((691 . 693)) nil (26109 7893 356162 683000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -692) (undo-tree-id133 . -1) 693) nil (26109 7893 356161 746000) 0 nil])
([nil nil ((692 . 693)) nil (26109 7893 356159 890000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -692) (undo-tree-id132 . -1) 693) nil (26109 7893 356159 5000) 0 nil])
([nil nil ((692 . 701)) nil (26109 7893 356157 341000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -700) (undo-tree-id131 . -1) 701) nil (26109 7893 356156 370000) 0 nil])
([nil nil ((700 . 705)) nil (26109 7893 356154 629000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -703) (undo-tree-id129 . -1) (#("e" 0 1 (fontified t)) . -704) (undo-tree-id130 . -1) 705) nil (26109 7893 356153 511000) 0 nil])
([nil nil ((703 . 707)) nil (26109 7893 356150 799000) 0 nil])
([nil nil ((694 . 697)) nil (26109 7893 356149 888000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -696) (undo-tree-id128 . -1) 697) nil (26109 7893 356148 802000) 0 nil])
([nil nil ((709 . 710)) nil (26109 7893 356146 103000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -709) (undo-tree-id125 . -1) (undo-tree-id126 . 1) (undo-tree-id127 . -1) 710) nil (26109 7893 356144 626000) 0 nil])
([nil nil ((709 . 710)) nil (26109 7893 356140 450000) 0 nil])
([nil nil ((1 . 712) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *



def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = 0

    for keysize_guess in range(2, 40):
        block_0 = emsg[:keysize_guess]
        block_1 = emsg[keysize_guess : 2*keysize_guess]
    
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 202 (fontified t) 202 203 (fontified t) 203 204 (fontified t) 204 207 (fontified t face font-lock-keyword-face) 207 208 (fontified t) 208 220 (fontified t face font-lock-function-name-face) 220 232 (fontified t) 232 236 (fontified t face font-lock-variable-name-face) 236 245 (fontified t) 245 248 (fontified t face font-lock-variable-name-face) 248 271 (fontified t) 271 274 (fontified t face font-lock-keyword-face) 274 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 283 (fontified t face font-lock-variable-name-face) 283 307 (fontified t) 307 312 (fontified t face font-lock-keyword-face) 312 340 (fontified t) 340 344 (fontified t face font-lock-variable-name-face) 344 373 (fontified t) 373 374 (fontified t face font-lock-variable-name-face) 374 384 (fontified t) 384 390 (fontified t face font-lock-keyword-face) 390 398 (fontified t) 398 400 (fontified t face font-lock-keyword-face) 400 401 (fontified t) 401 409 (fontified t face font-lock-builtin-face) 409 413 (fontified t) 413 423 (fontified t face font-lock-string-face) 423 438 (fontified t) 438 442 (fontified t face font-lock-builtin-face) 442 443 (fontified t) 443 450 (fontified t face font-lock-string-face) 450 452 (fontified t) 452 456 (fontified t) 456 467 (fontified t) 467 501 (fontified t) 501 525 (fontified t) 525 529 (fontified t) 529 559 (fontified t) 559 563 (fontified t) 563 570 (fontified t face font-lock-variable-name-face) 570 574 (fontified t) 574 575 (fontified t rear-nonsticky t) 575 576 (fontified t) 576 580 (fontified t) 580 583 (fontified t face font-lock-keyword-face) 583 598 (fontified t) 598 600 (fontified t face font-lock-keyword-face) 600 601 (fontified t) 601 606 (fontified t face font-lock-builtin-face) 606 615 (fontified t) 615 623 (fontified t) 623 630 (fontified t face font-lock-variable-name-face) 630 654 (fontified t) 654 662 (fontified t) 662 669 (fontified t face font-lock-variable-name-face) 669 709 (fontified t) 709 710 (fontified t) 710 714 (fontified t) 714 715 (fontified t)) . 1) (undo-tree-id114 . -559) (undo-tree-id115 . -709) (undo-tree-id116 . -398) (undo-tree-id117 . -396) (undo-tree-id118 . -662) (undo-tree-id119 . -662) (undo-tree-id120 . -654) (undo-tree-id121 . 7) (undo-tree-id122 . -709) (undo-tree-id123 . 39) (undo-tree-id124 . -677) 710) nil (26109 7906 407616 391000) 0 nil])
([nil nil ((711 . 720) (t 26109 7893 408784 884000)) nil (26109 7921 145240 491000) 0 nil] [nil nil ((710 . 734) (t 26109 7893 408784 884000)) ((#("
                       " 0 24 (fontified t)) . 710) (undo-tree-id170 . -1)) (26109 7906 407376 259000) 0 nil])
([nil nil ((720 . 723)) nil (26109 7921 145239 509000) 0 nil])
nil
([nil nil ((#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -720) (undo-tree-id178 . -3) 723) nil (26109 7921 145238 532000) 0 nil])
([nil nil ((720 . 724)) nil (26109 7921 145236 610000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -723) (undo-tree-id177 . -1) 724) nil (26109 7921 145235 317000) 0 nil])
([nil nil ((723 . 726)) nil (26109 7921 145233 331000) 0 nil])
([nil nil ((#("foo = " 0 3 (fontified t face font-lock-variable-name-face) 3 6 (fontified t)) . -720) (undo-tree-id176 . -6) 726) nil (26109 7921 145294 514000) 0 nil])
([nil nil ((720 . 741)) nil (26109 7944 224711 44000) 0 nil] [nil nil ((#("guess]
        " 0 7 (fontified t) 7 15 (fontified t)) . -705) (undo-tree-id171 . -15) (undo-tree-id172 . 9) (undo-tree-id173 . -7) (undo-tree-id174 . -15) (undo-tree-id175 . -7) 720) ((705 . 720)) (26109 7921 145225 741000) 0 nil])
([nil nil ((741 . 747)) nil (26109 7944 224710 317000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -746) (undo-tree-id192 . -1) 747) nil (26109 7944 224709 313000) 0 nil])
([nil nil ((746 . 747)) nil (26109 7944 224707 424000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -746) (undo-tree-id191 . -1) 747) nil (26109 7944 224706 416000) 0 nil])
([nil nil ((746 . 749)) nil (26109 7944 224703 760000) 0 nil])
([nil nil ((724 . 735)) nil (26109 7944 224702 736000) 0 nil])
([nil nil ((#("normalized" 0 10 (fontified t face font-lock-variable-name-face)) . -725) (undo-tree-id190 . -10) 735) nil (26109 7944 224701 330000) 0 nil])
([nil nil ((725 . 726)) nil (26109 7944 224699 383000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -725) (undo-tree-id189 . -1) 726) nil (26109 7944 224698 170000) 0 nil])
([nil nil ((725 . 735)) nil (26109 7944 224695 908000) 0 nil])
([nil nil ((760 . 781)) nil (26109 7944 224694 935000) 0 nil])
([nil nil ((781 . 784)) nil (26109 7944 224693 866000) 0 nil])
([nil nil ((784 . 793)) nil (26109 7944 224692 364000) 0 nil])
([nil nil ((1 . 785) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = 0

    for keysize_guess in range(2, 40):
        block_0 = emsg[:keysize_guess]
        block_1 = emsg[keysize_guess : 2 * keysize_guess]
        dist_normalized = hamming_dist(block_0, block_1) / keysize_guess
        
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 579 (fontified t) 579 582 (fontified t face font-lock-keyword-face) 582 597 (fontified t) 597 599 (fontified t face font-lock-keyword-face) 599 600 (fontified t) 600 605 (fontified t face font-lock-builtin-face) 605 653 (fontified t) 653 661 (fontified t) 661 668 (fontified t face font-lock-variable-name-face) 668 704 (fontified t) 704 711 (fontified t) 711 719 (fontified t) 719 734 (fontified t face font-lock-variable-name-face) 734 792 (fontified t) 792 793 (fontified t)) . 1) (undo-tree-id179 . -792) (undo-tree-id180 . 83) (undo-tree-id181 . -711) (undo-tree-id182 . -719) (undo-tree-id183 . 10) (undo-tree-id184 . -784) (undo-tree-id185 . -719) (undo-tree-id186 . -719) (undo-tree-id187 . -792) (undo-tree-id188 . -784) 793) nil (26109 7944 224687 675000) 0 nil])
([nil nil ((785 . 793) (t 26109 7944 346952 161000)) nil (26109 7974 540694 575000) 0 nil])
([nil nil ((786 . 794) (#("        " 0 8 (fontified nil)) . 785) (undo-tree-id194 . -8) (793 . 794)) nil (26109 7974 540693 139000) 0 nil])
([nil nil ((794 . 797)) nil (26109 7974 540690 191000) 0 nil])
([nil nil ((#("ret" 0 3 (fontified t)) . -794) (undo-tree-id193 . -3) 797) nil (26109 7974 540688 313000) 0 nil])
([nil nil ((794 . 815)) nil (26109 7974 540678 496000) 0 nil])
([nil nil ((815 . 816)) nil (26109 7974 540676 818000) 0 nil])
([nil nil ((816 . 817)) nil (26109 7974 540672 377000) 0 nil])
([nil nil ((614 . 623) (t 26109 7974 672652 673000)) nil (26109 8318 539857 871000) 0 nil])
([nil nil ((623 . 633)) nil (26109 8318 539856 811000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -632) (undo-tree-id210 . -1) 633) nil (26109 8318 539855 812000) 0 nil])
([nil nil ((#("in " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -629) (undo-tree-id209 . -3) 632) nil (26109 8318 539853 744000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -627) (undo-tree-id207 . -1) (#(" " 0 1 (fontified t)) . -628) (undo-tree-id208 . -1) 629) nil (26109 8318 539851 519000) 0 nil])
([nil nil ((627 . 628)) nil (26109 8318 539848 788000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -627) (undo-tree-id206 . -1) 628) nil (26109 8318 539847 808000) 0 nil])
([nil nil ((627 . 641)) nil (26109 8318 539844 654000) 0 nil])
([nil nil ((641 . 644)) nil (26109 8318 539843 908000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -643) (undo-tree-id205 . -1) 644) nil (26109 8318 539842 989000) 0 nil])
([nil nil ((643 . 648)) nil (26109 8318 539841 223000) 0 nil])
([nil nil ((#("attempts" 0 8 (fontified t)) . -627) (undo-tree-id204 . -8) 635) nil (26109 8318 539840 144000) 0 nil])
([nil nil ((627 . 628)) nil (26109 8318 539838 354000) 0 nil])
([nil nil ((650 . 654) 655) nil (26109 8318 539837 537000) 0 nil])
([nil nil ((693 . 697) 702) nil (26109 8318 539836 518000) 0 nil])
([nil nil ((755 . 759) 768) nil (26109 8318 539835 526000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -627) (undo-tree-id203 . -1) 628) nil (26109 8318 539834 330000) 0 nil])
([nil nil ((627 . 635)) nil (26109 8318 539832 510000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -634) (undo-tree-id202 . -1) 635) nil (26109 8318 539831 493000) 0 nil])
([nil nil ((#("attempt" 0 7 (fontified t)) . -627) (undo-tree-id201 . -7) 634) nil (26109 8318 539829 385000) 0 nil])
([nil nil ((627 . 632)) nil (26109 8318 539827 576000) 0 nil])
([nil nil ((674 . 675)) nil (26109 8318 539826 856000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -674) (undo-tree-id200 . -1) 675) nil (26109 8318 539825 655000) 0 nil])
([nil nil ((#("block" 0 5 (fontified t)) . -627) (undo-tree-id199 . -5) 632) nil (26109 8318 539823 575000) 0 nil])
([nil nil ((627 . 628)) nil (26109 8318 539821 588000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -627) (undo-tree-id198 . -1) 628) nil (26109 8318 539820 433000) 0 nil])
([nil nil ((627 . 628)) nil (26109 8318 539818 367000) 0 nil])
([nil nil ((669 . 675)) nil (26109 8318 539817 528000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -673) (undo-tree-id196 . -1) (#("y" 0 1 (fontified t)) . -674) (undo-tree-id197 . -1) 675) nil (26109 8318 539815 910000) 0 nil])
([nil nil ((673 . 685)) nil (26109 8318 539812 614000) 0 nil])
([nil nil ((686 . 687)) nil (26109 8318 539811 756000) 0 nil])
([nil nil ((687 . 690)) nil (26109 8318 539810 846000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -689) (undo-tree-id195 . -1) 690) nil (26109 8318 539808 552000) 0 nil])
([nil nil ((689 . 692)) nil (26109 8318 539795 507000) 0 nil])
([nil nil ((734 . 737) (t 26109 8318 594949 827000)) nil (26109 8327 810993 824000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -736) (undo-tree-id215 . -1) 737) nil (26109 8327 810992 582000) 0 nil])
([nil nil ((736 . 738)) nil (26109 8327 810990 634000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -737) (undo-tree-id214 . -1) 738) nil (26109 8327 810989 374000) 0 nil])
([nil nil ((737 . 739)) nil (26109 8327 810987 343000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -738) (undo-tree-id213 . -1) 739) nil (26109 8327 810986 24000) 0 nil])
([nil nil ((738 . 742)) nil (26109 8327 810983 301000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -758) (undo-tree-id212 . -1) 759) nil (26109 8327 810982 94000) 0 nil])
([nil nil ((758 . 762)) nil (26109 8327 810978 915000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -761) (undo-tree-id211 . -1) 762) nil (26109 8327 810976 220000) 0 nil])
([nil nil ((761 . 763)) nil (26109 8327 810949 702000) 0 nil])
([nil nil ((#("            dist_normalized = hamming_dist(block_0, block_1) / keysize_guess" 0 12 (fontified t) 12 27 (fontified t face font-lock-variable-name-face) 27 76 (fontified t)) . 781) (undo-tree-id228 . -76) (t 26109 8327 921655 954000)) nil (26109 8365 105049 429000) 0 nil])
([nil nil ((nil rear-nonsticky nil 856 . 857) (nil fontified nil 808 . 857) (nil fontified nil 793 . 808) (nil fontified nil 781 . 793) (781 . 857)) nil (26109 8365 105047 421000) 0 nil])
([nil nil ((614 . 623)) nil (26109 8365 105045 819000) 0 nil])
([nil nil ((623 . 632)) nil (26109 8365 105045 46000) 0 nil])
([nil nil ((632 . 642)) nil (26109 8365 105044 291000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -837) (undo-tree-id227 . -1) 838) nil (26109 8365 105043 322000) 0 nil])
([nil nil ((837 . 840)) nil (26109 8365 105040 329000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -839) (undo-tree-id226 . -1) 840) nil (26109 8365 105039 259000) 0 nil])
([nil nil ((839 . 840)) nil (26109 8365 105037 323000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -839) (undo-tree-id225 . -1) 840) nil (26109 8365 105036 273000) 0 nil])
([nil nil ((638 . 642)) nil (26109 8365 105034 143000) 0 nil])
([nil nil ((840 . 843)) nil (26109 8365 105033 366000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -840) (undo-tree-id222 . -1) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -841) (undo-tree-id223 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -842) (undo-tree-id224 . -1) 843) nil (26109 8365 105031 740000) 0 nil])
([nil nil ((840 . 843)) nil (26109 8365 105011 861000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -840) (undo-tree-id219 . -1) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -841) (undo-tree-id220 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -842) (undo-tree-id221 . -1) 843) nil (26109 8365 105010 541000) 0 nil])
([nil nil ((840 . 844)) nil (26109 8365 105006 542000) 0 nil])
([nil nil ((#("avg" 0 3 (fontified t face font-lock-variable-name-face)) . -639) (undo-tree-id218 . -3) 642) nil (26109 8365 105005 314000) 0 nil])
([nil nil ((#("normalized_" 0 11 (fontified t face font-lock-variable-name-face)) . -628) (undo-tree-id217 . -11) 639) nil (26109 8365 105002 930000) 0 nil])
([nil nil ((628 . 631)) nil (26109 8365 105106 973000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-variable-name-face)) . 829) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . 829) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . 829) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 829)) nil (26109 8539 121800 462000) 0 nil] [nil nil ((#("normalized" 0 10 (fontified t face font-lock-variable-name-face)) . -819) (undo-tree-id216 . -10) 829) ((819 . 829)) (26109 8365 104995 569000) 0 nil])
([nil nil ((879 . 892)) nil (26109 8539 121799 156000) 0 nil])
nil
([nil nil ((892 . 893)) nil (26109 8539 121798 355000) 0 nil])
([nil nil ((893 . 897)) nil (26109 8539 121797 645000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -896) (undo-tree-id240 . -1) 897) nil (26109 8539 121796 563000) 0 nil])
([nil nil ((896 . 907)) nil (26109 8539 121782 258000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -903) (undo-tree-id236 . -1) (#("d" 0 1 (fontified t)) . -904) (undo-tree-id237 . -1) (#("s" 0 1 (fontified t)) . -905) (undo-tree-id238 . -1) (#("i" 0 1 (fontified t)) . -906) (undo-tree-id239 . -1) 907) nil (26109 8539 121780 633000) 0 nil])
([nil nil ((#("avg +=" 0 3 (fontified t face font-lock-variable-name-face) 3 6 (fontified t)) . -897) (undo-tree-id235 . -6) 903) nil (26109 8539 121775 822000) 0 nil])
([nil nil ((#("normalized" 0 10 (fontified t face font-lock-variable-name-face)) . -819) (undo-tree-id234 . -10) 829) nil (26109 8539 121773 861000) 0 nil])
([nil nil ((819 . 822)) nil (26109 8539 121772 126000) 0 nil])
([nil nil ((#("            dist_" 0 12 (fontified t) 12 17 (fontified t)) . 873)) nil (26109 8539 121771 240000) 0 nil])
([nil nil ((873 . 885)) nil (26109 8539 121770 441000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -881) (undo-tree-id233 . -4) 885) nil (26109 8539 121769 358000) 0 nil])
([nil nil ((881 . 885)) nil (26109 8539 121767 404000) 0 nil])
([nil nil ((885 . 892)) nil (26109 8539 121766 607000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -891) (undo-tree-id232 . -1) 892) nil (26109 8539 121765 267000) 0 nil])
([nil nil ((891 . 895)) nil (26109 8539 121762 295000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -894) (undo-tree-id229 . -1) (undo-tree-id230 . 1) (undo-tree-id231 . -1) 895) nil (26109 8539 121757 995000) 0 nil])
([nil nil ((894 . 895) (t 26109 8539 248877 152000)) nil (26109 8544 829693 496000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -894) (undo-tree-id251 . -1) 895 (t 26109 8544 985790 733000)) nil (26109 8559 357864 96000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -800) (undo-tree-id248 . -1) (undo-tree-id249 . 1) (undo-tree-id250 . -1) 801) nil (26109 8559 357861 302000) 0 nil])
([nil nil ((800 . 801)) nil (26109 8559 357855 897000) 0 nil])
([nil nil ((713 . 714)) nil (26109 8559 357854 499000) 0 nil])
([nil nil ((1 . 938) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = 0

    for keysize_guess in range(2, 40):
        dist_avg = 0
        for n in range(4):
            block_0 = emsg[n*keysize_guess : (n+1)*keysize_guess]
            block_1 = emsg[(n+1) * keysize_guess : (n+2) * keysize_guess]
            dist_avg += hamming_dist(block_0, block_1) / keysize_guess
        dist_avg /= 4

        print(dist_normalized)
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 575 (fontified t) 575 579 (fontified t) 579 582 (fontified t face font-lock-keyword-face) 582 597 (fontified t) 597 599 (fontified t face font-lock-keyword-face) 599 600 (fontified t) 600 605 (fontified t face font-lock-builtin-face) 605 614 (fontified t) 614 622 (fontified t) 622 630 (fontified t face font-lock-variable-name-face) 630 635 (fontified t) 635 643 (fontified t) 643 646 (fontified t face font-lock-keyword-face) 646 649 (fontified t) 649 651 (fontified t face font-lock-keyword-face) 651 652 (fontified t) 652 657 (fontified t face font-lock-builtin-face) 657 661 (fontified t) 661 662 (fontified t) 662 674 (fontified t) 674 681 (fontified t face font-lock-variable-name-face) 681 728 (fontified t) 728 740 (fontified t) 740 747 (fontified t face font-lock-variable-name-face) 747 802 (fontified t) 802 814 (fontified t) 814 822 (fontified t face font-lock-variable-name-face) 822 871 (fontified t) 871 872 (rear-nonsticky t fontified t) 872 873 (fontified t) 873 881 (fontified t) 881 889 (fontified t face font-lock-variable-name-face) 889 894 (fontified t) 894 895 (fontified t) 895 896 (fontified t) 896 904 (fontified t) 904 909 (fontified t face font-lock-builtin-face) 909 926 (fontified t) 926 927 (fontified t)) . 1) (undo-tree-id241 . -802) (undo-tree-id242 . -926) (undo-tree-id243 . -713) (undo-tree-id244 . -895) (undo-tree-id245 . -802) (undo-tree-id246 . -926) (undo-tree-id247 . -662) 714) nil (26109 8559 357849 500000) 0 nil])
([nil nil ((#("normalized" 0 10 (fontified t)) . -926) (undo-tree-id252 . -10) 936 (t 26109 8559 519580 591000)) nil (26109 8590 954929 466000) 0 nil])
([nil nil ((926 . 929)) nil (26109 8590 954866 482000) 0 nil])
([nil nil ((#("        print(dist_avg)" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 23 (fontified t)) . 907) (t 26109 8591 108165 774000)) nil (26109 8920 544700 613000) 0 nil])
([nil nil ((907 . 915)) nil (26109 8920 544694 920000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -911) (undo-tree-id327 . -4) 915) nil (26109 8920 544689 307000) 0 nil])
([nil nil ((907 . 915) (#("        " 0 8 (fontified nil)) . 906) (undo-tree-id326 . -8) (905 . 915)) nil (26109 8920 544677 752000) 0 nil])
([nil nil ((906 . 914)) nil (26109 8920 544666 382000) 0 nil])
([nil nil ((914 . 915)) nil (26109 8920 544662 132000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -914) (undo-tree-id325 . -1) 915) nil (26109 8920 544656 607000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -573) (undo-tree-id324 . -1) 574) nil (26109 8920 544645 405000) 0 nil])
([nil nil ((573 . 574)) nil (26109 8920 544635 198000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -572) (undo-tree-id322 . -1) (#("1" 0 1 (fontified t)) . -573) (undo-tree-id323 . -1) 574) nil (26109 8920 544628 623000) 0 nil])
([nil nil ((572 . 573)) nil (26109 8920 544612 778000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -572) (undo-tree-id321 . -1) 573) nil (26109 8920 544607 446000) 0 nil])
([nil nil ((572 . 574)) nil (26109 8920 544597 198000) 0 nil])
([nil nil ((923 . 939)) nil (26109 8920 544592 948000) 0 nil])
([nil nil ((939 . 952)) nil (26109 8920 544588 514000) 0 nil])
([nil nil ((#("        if keysize == 0:" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 18 (fontified t) 18 24 (fontified t)) . 915)) nil (26109 8920 544583 85000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -910) (undo-tree-id320 . -4) 914) nil (26109 8920 544576 711000) 0 nil])
([nil nil ((907 . 915) (#("    " 0 4 (fontified nil)) . 906) (undo-tree-id319 . -4) (910 . 911)) nil (26109 8920 544564 715000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -911) (undo-tree-id318 . -4) 915) nil (26109 8920 544552 29000) 0 nil])
([nil nil ((911 . 917)) nil (26109 8920 544540 843000) 0 nil])
([nil nil ((#("return" 0 6 (fontified t face font-lock-keyword-face)) . -911) (undo-tree-id317 . -6) 917) nil (26109 8920 544533 884000) 0 nil])
([nil nil ((906 . 914)) nil (26109 8920 544522 313000) 0 nil])
([nil nil ((914 . 930)) nil (26109 8920 544518 39000) 0 nil])
([nil nil ((930 . 943)) nil (26109 8920 544513 116000) 0 nil])
([nil nil ((943 . 955)) nil (26109 8920 544508 681000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -953) (undo-tree-id315 . -1) (#("u" 0 1 (fontified t)) . -954) (undo-tree-id316 . -1) 955) nil (26109 8920 544501 769000) 0 nil])
([nil nil ((953 . 958)) nil (26109 8920 544486 77000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -957) (undo-tree-id314 . -1) 958) nil (26109 8920 544480 544000) 0 nil])
([nil nil ((957 . 966)) nil (26109 8920 544470 64000) 0 nil])
([nil nil ((966 . 979)) nil (26109 8920 544465 478000) 0 nil])
([nil nil ((979 . 980)) nil (26109 8920 544460 538000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -979) (undo-tree-id313 . -1) 980) nil (26109 8920 544454 989000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -975) (undo-tree-id312 . -4) 979) nil (26109 8920 544436 330000) 0 nil])
([nil nil ((975 . 979)) nil (26109 8920 544415 698000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -977) (undo-tree-id310 . -1) (#(" " 0 1 (fontified t)) . -978) (undo-tree-id311 . -1) 979) nil (26109 8920 544402 781000) 0 nil])
([nil nil ((977 . 980)) nil (26109 8920 544367 956000) 0 nil])
([nil nil ((980 . 993)) nil (26109 8920 544362 87000) 0 nil])
([nil nil ((993 . 999)) nil (26109 8920 544357 749000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -996) (undo-tree-id307 . -1) (#("e" 0 1 (fontified t)) . -997) (undo-tree-id308 . -1) (#("i" 0 1 (fontified t)) . -998) (undo-tree-id309 . -1) 999) nil (26109 8920 544350 243000) 0 nil])
([nil nil ((996 . 999)) nil (26109 8920 544327 118000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -995) (undo-tree-id303 . -1) (#("i" 0 1 (fontified t)) . -996) (undo-tree-id304 . -1) (#("z" 0 1 (fontified t)) . -997) (undo-tree-id305 . -1) (#("e" 0 1 (fontified t)) . -998) (undo-tree-id306 . -1) 999) nil (26109 8920 544313 246000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -928) (undo-tree-id302 . -1) 929) nil (26109 8920 544258 375000) 0 nil])
([nil nil ((928 . 930)) nil (26109 8920 544239 130000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -573) (undo-tree-id301 . -1) 574) nil (26109 8920 544228 137000) 0 nil])
([nil nil ((573 . 575)) nil (26109 8920 544207 802000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -997) (undo-tree-id280 . -1) (#(" " 0 1 (fontified t)) . -998) (undo-tree-id281 . -1) (#(" " 0 1 (fontified t)) . -999) (undo-tree-id282 . -1) (#(" " 0 1 (fontified t)) . -1000) (undo-tree-id283 . -1) (#(" " 0 1 (fontified t)) . -1001) (undo-tree-id284 . -1) (#("
" 0 1 (fontified t)) . -1002) (undo-tree-id285 . -1) (#("
" 0 1 (fontified t)) . -1003) (undo-tree-id286 . -1) (#(" " 0 1 (fontified t)) . -1004) (undo-tree-id287 . -1) (#(" " 0 1 (fontified t)) . -1005) (undo-tree-id288 . -1) (#(" " 0 1 (fontified t)) . -1006) (undo-tree-id289 . -1) (#(" " 0 1 (fontified t)) . -1007) (undo-tree-id290 . -1) (#(" " 0 1 (fontified t)) . -1008) (undo-tree-id291 . -1) (#(" " 0 1 (fontified t)) . -1009) (undo-tree-id292 . -1) (#(" " 0 1 (fontified t)) . -1010) (undo-tree-id293 . -1) (#(" " 0 1 (fontified t)) . -1011) (undo-tree-id294 . -1) (#(" " 0 1 (fontified t)) . -1012) (undo-tree-id295 . -1) (#(" " 0 1 (fontified t)) . -1013) (undo-tree-id296 . -1) (#(" " 0 1 (fontified t)) . -1014) (undo-tree-id297 . -1) (#(" " 0 1 (fontified t)) . -1015) (undo-tree-id298 . -1) (#("
" 0 1 (fontified t)) . -1016) (undo-tree-id299 . -1) (#("
" 0 1 (fontified t)) . -1017) (undo-tree-id300 . -1) 1018) nil (26109 8920 544163 756000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -996) (undo-tree-id279 . -1) 997) nil (26109 8920 543878 16000) 0 nil])
([nil nil ((996 . 1009)) nil (26109 8920 543866 597000) 0 nil])
([nil nil ((#("keys" 0 4 (fontified t)) . -1005) (undo-tree-id278 . -4) 1009) nil (26109 8920 543860 680000) 0 nil])
([nil nil ((1005 . 1019)) nil (26109 8920 543840 104000) 0 nil])
([nil nil ((#("guess" 0 5 (fontified t)) . -1014) (undo-tree-id277 . -5) 1019) nil (26109 8920 543829 769000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t)) . -1006) (undo-tree-id276 . -8) 1014) nil (26109 8920 543807 100000) 0 nil])
([nil nil ((#("keysize = (" 0 7 (fontified t face font-lock-variable-name-face) 7 11 (fontified t)) . -995) (undo-tree-id275 . -11) 1006) nil (26109 8920 543784 632000) 0 nil])
([nil nil ((995 . 1016)) nil (26109 8920 543762 244000) 0 nil])
([nil nil ((1016 . 1022)) nil (26109 8920 543754 162000) 0 nil])
([nil nil ((1023 . 1039) (#("    " 0 4 (fontified nil)) . 1023) (1022 . 1023)) nil (26109 8920 543743 850000) 0 nil])
([nil nil ((1039 . 1047)) nil (26109 8920 543730 748000) 0 nil])
([nil nil ((1047 . 1057)) nil (26109 8920 543721 735000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1056) (undo-tree-id274 . -1) 1057) nil (26109 8920 543710 260000) 0 nil])
([nil nil ((1056 . 1062)) nil (26109 8920 543691 369000) 0 nil])
([nil nil ((1062 . 1079)) nil (26109 8920 543682 821000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1075) (undo-tree-id273 . -4) 1079) nil (26109 8920 543672 509000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1071) (undo-tree-id272 . -4) 1075) nil (26109 8920 543653 441000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1067) (undo-tree-id271 . -4) 1071) nil (26109 8920 543630 484000) 0 nil])
([nil nil ((1064 . 1080) (#("    " 0 4 (fontified nil)) . 1063) (undo-tree-id270 . -4) (1067 . 1068)) nil (26109 8920 543605 354000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1076) (undo-tree-id269 . -4) 1080) nil (26109 8920 543581 787000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1072) (undo-tree-id268 . -4) 1076) nil (26109 8920 543561 308000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1068) (undo-tree-id267 . -4) 1072) nil (26109 8920 543537 252000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1064) (undo-tree-id266 . -4) 1068) nil (26109 8920 543518 176000) 0 nil])
([nil nil ((1064 . 1080)) nil (26109 8920 543499 838000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1076) (undo-tree-id265 . -4) 1080) nil (26109 8920 543490 440000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1072) (undo-tree-id264 . -4) 1076) nil (26109 8920 543468 333000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1068) (undo-tree-id263 . -4) 1072) nil (26109 8920 543451 454000) 0 nil])
([nil nil ((#("guess" 0 5 (fontified t)) . -1006) (undo-tree-id261 . -5) (undo-tree-id262 . -5) 1011) nil (26109 8920 543438 721000) 0 nil])
([nil nil ((1006 . 1008)) nil (26109 8920 543423 718000) 0 nil])
([nil nil ((#("di" 0 2 (fontified t)) . -1006) (undo-tree-id260 . -2) 1008) nil (26109 8920 543417 808000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t)) . -998) (undo-tree-id258 . -8) (undo-tree-id259 . -8) 1006) nil (26109 8920 543404 794000) 0 nil])
([nil nil ((998 . 1005)) nil (26109 8920 543388 557000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1004) (undo-tree-id257 . -1) 1005) nil (26109 8920 543382 511000) 0 nil])
([nil nil ((1004 . 1006)) nil (26109 8920 543371 461000) 0 nil])
([nil nil ((#("keysize" 0 7 (fontified t)) . -1009) (undo-tree-id256 . -7) 1016) nil (26109 8920 543364 541000) 0 nil])
([nil nil ((1009 . 1012)) nil (26109 8920 543352 361000) 0 nil])
([nil nil ((575 . 580)) nil (26109 8920 543347 69000) 0 nil])
([nil nil ((580 . 593)) nil (26109 8926 231892 831000) 0 nil])
([nil nil ((#("keysize" 0 7 (fontified t)) . -936) (undo-tree-id350 . -7) 943) nil (26109 9023 190496 793000) 0 nil] [nil nil ((#("1:" 0 2 (fontified t)) . -948) (undo-tree-id330 . -2) 950) ((948 . 950)) (26109 8925 266552 99000) 0 nil] [nil nil ((#("    keysize = -1" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 16 (fontified t)) . 559) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -16)) ((559 . 575)) (26109 8920 543318 475000) 0 nil])
([nil nil ((936 . 944)) nil (26109 9023 190486 505000) 0 nil])
([nil nil ((#("keysize == -" 0 7 (fontified t) 7 12 (fontified t)) . -936) (undo-tree-id329 . -12) 948) ((936 . 948)) (26109 8924 818816 576000) 0 nil])
nil
([nil nil ((#("keysize" 0 7 (fontified t face font-lock-variable-name-face)) . -964) (undo-tree-id349 . -7) 971) nil (26109 9023 190481 109000) 0 nil])
([nil nil ((#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -933) (undo-tree-id328 . -3) 936) ((933 . 936)) (26109 8924 818472 308000) 0 nil])
([nil nil ((964 . 972)) nil (26109 9023 190470 380000) 0 nil])
nil
([nil nil ((#("guess" 0 5 (fontified t)) . -983) (undo-tree-id348 . -5) 988) nil (26109 9023 190465 71000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t)) . -975) (undo-tree-id347 . -8) 983) nil (26109 9023 190453 404000) 0 nil])
([nil nil ((#("dist" 0 4 (fontified t face font-lock-variable-name-face)) . -642) (undo-tree-id346 . -4) 646) nil (26109 9023 190442 451000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 642)) nil (26109 9023 190431 594000) 0 nil])
([nil nil ((#("dist_" 0 5 (fontified t face font-lock-variable-name-face)) . -839) (undo-tree-id345 . -5) 844) nil (26109 9023 190426 229000) 0 nil])
([nil nil ((#("dist_" 0 5 (fontified t face font-lock-variable-name-face)) . -901) (undo-tree-id344 . -5) 906) nil (26109 9023 190414 819000) 0 nil])
([nil nil ((960 . 962)) nil (26109 9023 190404 627000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -961) (undo-tree-id343 . -1) 962) nil (26109 9023 190399 143000) 0 nil])
([nil nil ((961 . 963)) nil (26109 9023 190388 759000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -1006) (undo-tree-id342 . -1) 1007) nil (26109 9023 190382 905000) 0 nil])
([nil nil ((#("di" 0 2 (fontified t)) . -1004) (undo-tree-id341 . -2) 1006) nil (26109 9023 190370 621000) 0 nil])
([nil nil ((1004 . 1005)) nil (26109 9023 190359 876000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1004) (undo-tree-id340 . -1) 1005) nil (26109 9023 190354 327000) 0 nil])
([nil nil ((1004 . 1007)) nil (26109 9023 190343 815000) 0 nil])
([nil nil ((1048 . 1065)) nil (26109 9023 190339 12000) 0 nil])
([nil nil ((1065 . 1067)) nil (26109 9023 190334 48000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1066) (undo-tree-id339 . -1) 1067) nil (26109 9023 190327 954000) 0 nil])
([nil nil ((1066 . 1074)) nil (26109 9023 190316 127000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1067) (undo-tree-id338 . -1) 1068) nil (26109 9023 190305 486000) 0 nil])
([nil nil ((1 . 1074) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        if dist_avg == -1:
            dist_avg = avg
        else:
            if dist_avg < avg:
                keysize = keysize_guess
                dist_avg

    
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 558 (fontified t) 558 562 (fontified t) 562 569 (fontified t face font-lock-variable-name-face) 569 574 (fontified t) 574 575 (fontified t) 575 579 (fontified t) 579 587 (fontified t face font-lock-variable-name-face) 587 593 (fontified t) 593 598 (fontified t) 598 601 (fontified t face font-lock-keyword-face) 601 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 619 (fontified t) 619 624 (fontified t face font-lock-builtin-face) 624 633 (fontified t) 633 641 (fontified t) 641 644 (fontified t face font-lock-variable-name-face) 644 649 (fontified t) 649 657 (fontified t) 657 660 (fontified t face font-lock-keyword-face) 660 663 (fontified t) 663 665 (fontified t face font-lock-keyword-face) 665 666 (fontified t) 666 671 (fontified t face font-lock-builtin-face) 671 688 (fontified t) 688 695 (fontified t face font-lock-variable-name-face) 695 760 (fontified t) 760 767 (fontified t face font-lock-variable-name-face) 767 826 (fontified t) 826 838 (fontified t) 838 841 (fontified t face font-lock-variable-name-face) 841 892 (fontified t) 892 900 (fontified t) 900 903 (fontified t face font-lock-variable-name-face) 903 909 (fontified t) 909 917 (fontified t) 917 919 (fontified t face font-lock-keyword-face) 919 928 (fontified t) 928 933 (fontified t) 933 935 (fontified t) 935 936 (fontified t) 936 948 (fontified t) 948 956 (fontified t face font-lock-variable-name-face) 956 963 (fontified t) 963 971 (fontified t) 971 975 (fontified t face font-lock-keyword-face) 975 977 (fontified t) 977 989 (fontified t) 989 991 (fontified t face font-lock-keyword-face) 991 1006 (fontified t) 1006 1008 (fontified t) 1008 1024 (fontified t) 1024 1031 (fontified t face font-lock-variable-name-face) 1031 1048 (fontified t) 1048 1073 (fontified t) 1073 1074 (fontified t) 1074 1078 (fontified t) 1078 1079 (fontified t)) . 1) (undo-tree-id331 . -900) (undo-tree-id332 . -1066) (undo-tree-id333 . -1078) (undo-tree-id334 . -909) (undo-tree-id335 . -641) (undo-tree-id336 . -838) (undo-tree-id337 . -1048) 1067) nil (26109 9023 190274 895000) 0 nil])
([nil nil ((1074 . 1090) (t 26109 9023 349801 54000)) nil (26109 9032 294134 393000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1086) (undo-tree-id359 . -4) 1090) nil (26109 9032 294121 347000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1082) (undo-tree-id358 . -4) 1086) nil (26109 9032 294098 935000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1078) (undo-tree-id357 . -4) 1082) nil (26109 9032 294076 130000) 0 nil])
([nil nil ((1075 . 1091) (#("    " 0 4 (fontified nil)) . 1074) (undo-tree-id356 . -4) (1078 . 1079)) nil (26109 9032 294048 891000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1087) (undo-tree-id355 . -4) 1091) nil (26109 9032 293997 612000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1083) (undo-tree-id354 . -4) 1087) nil (26109 9032 293976 59000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1079) (undo-tree-id353 . -4) 1083) nil (26109 9032 293952 821000) 0 nil])
([nil nil ((1079 . 1080)) nil (26109 9032 293923 898000) 0 nil])
([nil nil ((1 . 1074) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        if dist_avg == -1:
            dist_avg = avg
        else:
            if dist_avg < avg:
                keysize = keysize_guess
                dist_avg

    
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 598 (fontified t) 598 601 (fontified t face font-lock-keyword-face) 601 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 619 (fontified t) 619 624 (fontified t face font-lock-builtin-face) 624 657 (fontified t) 657 660 (fontified t face font-lock-keyword-face) 660 663 (fontified t) 663 665 (fontified t face font-lock-keyword-face) 665 666 (fontified t) 666 671 (fontified t face font-lock-builtin-face) 671 917 (fontified t) 917 919 (fontified t face font-lock-keyword-face) 919 971 (fontified t) 971 975 (fontified t face font-lock-keyword-face) 975 989 (fontified t) 989 991 (fontified t face font-lock-keyword-face) 991 1073 (fontified t) 1073 1074 (fontified t) 1074 1078 (fontified nil) 1078 1079 (fontified nil)) . 1) (undo-tree-id351 . -1078) (undo-tree-id352 . -1074) 1079) nil (26109 9032 293889 602000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -1002) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#(" " 0 1 (fontified t)) . -1003) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 1004 (t 26109 9032 449835 811000)) nil (26109 9078 528949 524000) 0 nil])
([nil nil ((#("avg " 0 4 (fontified t)) . -998) (undo-tree-id362 . -4) (undo-tree-id363 . -4) 1002) nil (26109 9078 528765 193000) 0 nil])
([nil nil ((#("dist_" 0 5 (fontified t)) . -993) (undo-tree-id360 . -5) (undo-tree-id361 . -5) 998) nil (26109 9078 528726 111000) 0 nil])
([nil nil ((996 . 1007)) nil (26109 9078 528626 985000) 0 nil])
([nil nil ((1038 . 1039) (t 26109 9078 699041 304000)) nil (26109 9085 338689 195000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1038) (undo-tree-id368 . -1) 1039) nil (26109 9085 338667 625000) 0 nil])
([nil nil ((1073 . 1079)) nil (26109 9085 338579 36000) 0 nil])
([nil nil ((909 . 918) (t 26109 9085 488075 367000)) nil (26109 9111 138430 767000) 0 nil])
([nil nil ((918 . 928)) nil (26109 9111 138388 132000) 0 nil])
([nil nil ((924 . 939) (t 26109 9111 424214 213000)) nil (26109 9117 38445 814000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -673) (undo-tree-id369 . -1) (undo-tree-id370 . -1) 674 (t 26109 9117 216247 62000)) nil (26109 9144 586652 42000) 0 nil])
([nil nil ((673 . 674)) nil (26109 9144 586549 460000) 0 nil])
([nil nil ((1114 . 1131) (t 26109 9144 749412 61000)) nil (26109 9325 229538 862000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1127) (undo-tree-id398 . -4) 1131) nil (26109 9325 229532 22000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1123) (undo-tree-id397 . -4) 1127) nil (26109 9325 229520 812000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1119) (undo-tree-id396 . -4) 1123) nil (26109 9325 229509 418000) 0 nil])
([nil nil ((1119 . 1137)) nil (26109 9325 229499 699000) 0 nil])
([nil nil ((1137 . 1138)) nil (26109 9325 229495 393000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1137) (undo-tree-id395 . -1) 1138) nil (26109 9325 229490 77000) 0 nil])
([nil nil ((1137 . 1155)) nil (26109 9325 229479 629000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1154) (undo-tree-id394 . -1) 1155) nil (26109 9325 229474 256000) 0 nil])
([nil nil ((#("guess" 0 5 (fontified t)) . -1149) (undo-tree-id393 . -5) 1154) nil (26109 9325 229459 454000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1148) (undo-tree-id392 . -1) 1149) nil (26109 9325 229447 987000) 0 nil])
([nil nil ((1148 . 1153)) nil (26109 9325 229437 395000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -1152) (undo-tree-id391 . -1) 1153) nil (26109 9325 229431 902000) 0 nil])
([nil nil ((1152 . 1169)) nil (26109 9325 229421 390000) 0 nil])
([nil nil ((1136 . 1137)) nil (26109 9325 229416 707000) 0 nil])
([nil nil ((1137 . 1141)) nil (26109 9325 229412 304000) 0 nil])
([nil nil ((1174 . 1190)) nil (26109 9325 229407 991000) 0 nil])
([nil nil ((1190 . 1197)) nil (26109 9325 229403 717000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1194) (undo-tree-id388 . -1) (#("m" 0 1 (fontified t)) . -1195) (undo-tree-id389 . -1) (#("g" 0 1 (fontified t)) . -1196) (undo-tree-id390 . -1) 1197) nil (26109 9325 229396 227000) 0 nil])
([nil nil ((1194 . 1200)) nil (26109 9325 229374 72000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1199) (undo-tree-id385 . -1) (undo-tree-id386 . 1) (undo-tree-id387 . -1) 1200) nil (26109 9325 229367 184000) 0 nil])
([nil nil ((1199 . 1202)) nil (26109 9325 229345 28000) 0 nil])
([nil nil ((1202 . 1211)) nil (26109 9325 229340 755000) 0 nil])
([nil nil ((1211 . 1216)) nil (26109 9325 229336 489000) 0 nil])
([nil nil ((1211 . 1212)) nil (26109 9325 229331 245000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1211) (undo-tree-id384 . -1) 1212) nil (26109 9325 229324 958000) 0 nil])
([nil nil ((1184 . 1206) (#(" " 0 1 (fontified nil)) . 1184) (1183 . 1184) (1211 . 1212)) nil (26109 9325 229309 578000) 0 nil])
([nil nil ((1239 . 1240) 1234) nil (26109 9325 229297 69000) 0 nil])
([nil nil ((1 . 1234) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(6):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        print(keysize_guess, avg)
        if dist_avg == -1:
            dist_avg = avg
        else:
            if avg < dist_avg:
                keysize = keysize_guess
                dist_avg = avg

    emsg_in_blocks = [emsg[n * keysize : (n + 1) * keysize] for n in
                      range(len(emsg) / keysize)] 
    
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 598 (fontified t) 598 601 (fontified t face font-lock-keyword-face) 601 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 619 (fontified t) 619 624 (fontified t face font-lock-builtin-face) 624 649 (fontified t) 649 657 (fontified t) 657 660 (fontified t face font-lock-keyword-face) 660 663 (fontified t) 663 665 (fontified t face font-lock-keyword-face) 665 666 (fontified t) 666 671 (fontified t face font-lock-builtin-face) 671 676 (fontified t) 676 688 (fontified t) 688 695 (fontified t face font-lock-variable-name-face) 695 760 (fontified t) 760 767 (fontified t face font-lock-variable-name-face) 767 838 (fontified t) 838 841 (fontified t face font-lock-variable-name-face) 841 892 (fontified t) 892 900 (fontified t) 900 903 (fontified t face font-lock-variable-name-face) 903 909 (fontified t) 909 917 (fontified t) 917 922 (fontified t face font-lock-builtin-face) 922 942 (fontified t) 942 943 (fontified t) 943 951 (fontified t) 951 953 (fontified t face font-lock-keyword-face) 953 1005 (fontified t) 1005 1009 (fontified t face font-lock-keyword-face) 1009 1011 (fontified t) 1011 1023 (fontified t) 1023 1025 (fontified t face font-lock-keyword-face) 1025 1042 (fontified t) 1042 1058 (fontified t) 1058 1065 (fontified t) 1065 1082 (fontified t) 1082 1098 (fontified t) 1098 1106 (fontified t) 1106 1113 (fontified t) 1113 1114 (fontified t) 1114 1118 (fontified t) 1118 1132 (fontified t face font-lock-variable-name-face) 1132 1174 (fontified t) 1174 1177 (fontified t face font-lock-keyword-face) 1177 1180 (fontified t) 1180 1182 (fontified t face font-lock-keyword-face) 1182 1205 (fontified t) 1205 1210 (fontified t face font-lock-builtin-face) 1210 1211 (fontified t) 1211 1214 (fontified t face font-lock-builtin-face) 1214 1234 (fontified t) 1234 1238 (fontified nil) 1238 1239 (fontified nil)) . 1) (undo-tree-id371 . -672) (undo-tree-id372 . 6) (undo-tree-id373 . -1234) (undo-tree-id374 . -1118) (undo-tree-id375 . -1118) (undo-tree-id376 . -1238) (undo-tree-id377 . -1232) (undo-tree-id378 . -1232) (undo-tree-id379 . -1232) (undo-tree-id380 . -1233) (undo-tree-id381 . -1118) (undo-tree-id382 . -1118) (undo-tree-id383 . -1183) 1234) nil (26109 9325 229267 537000) 0 nil])
([nil nil ((1207 . 1211) (t 26109 9325 389811 240000)) nil (26109 9344 392379 923000) 0 nil])
([nil nil ((1231 . 1232)) nil (26109 9344 392347 880000) 0 nil])
([nil nil ((1240 . 1244) (#("    " 0 4 (fontified nil)) . 1239) (undo-tree-id427 . -4) (1238 . 1244) (t 26109 9344 571987 650000)) nil (26109 9492 69307 350000) 0 nil])
([nil nil ((1244 . 1264)) nil (26109 9492 69294 809000) 0 nil])
([nil nil ((1264 . 1273)) nil (26109 9492 69290 623000) 0 nil])
([nil nil ((1273 . 1287)) nil (26109 9492 69286 381000) 0 nil])
([nil nil ((1287 . 1306)) nil (26109 9492 69281 931000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1305) (undo-tree-id426 . -1) 1306) nil (26109 9492 69276 326000) 0 nil])
([nil nil ((1305 . 1315)) nil (26109 9492 69265 830000) 0 nil])
([nil nil ((1315 . 1329)) nil (26109 9492 69261 676000) 0 nil])
([nil nil ((1329 . 1338)) nil (26109 9492 69256 945000) 0 nil])
([nil nil ((1338 . 1339)) nil (26109 9492 69252 583000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -1338) (undo-tree-id423 . -1) (undo-tree-id424 . 1) (undo-tree-id425 . -1) 1339) nil (26109 9492 69245 992000) 0 nil])
([nil nil ((1338 . 1339)) nil (26109 9492 69226 811000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1338) (undo-tree-id420 . -1) (undo-tree-id421 . 1) (undo-tree-id422 . -1) 1339) nil (26109 9492 69220 428000) 0 nil])
([nil nil ((1338 . 1339)) nil (26109 9492 69198 658000) 0 nil])
([nil nil ((1339 . 1344)) nil (26109 9492 69193 967000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1334) 1339) nil (26109 9492 69188 450000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1330) 1335) nil (26109 9492 69181 899000) 0 nil])
([nil nil ((1330 . 1334) 1331) nil (26109 9492 69175 885000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1330) 1335) nil (26109 9492 69168 43000) 0 nil])
([nil nil ((1330 . 1334) 1331) nil (26109 9492 69157 707000) 0 nil])
([nil nil ((1 . 1336) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(6):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        print(keysize_guess, avg)
        if dist_avg == -1:
            dist_avg = avg
        else:
            if avg < dist_avg:
                keysize = keysize_guess
                dist_avg = avg

    emsg_in_blocks = [
        emsg[n * keysize : (n + 1) * keysize]
        for n in range(int(len(emsg) / keysize))
    ]

    single_char_keys = [
        break_single_char_xor(block) for block in emsg_in_blocks
    ]
    
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 598 (fontified t) 598 601 (fontified t face font-lock-keyword-face) 601 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 619 (fontified t) 619 624 (fontified t face font-lock-builtin-face) 624 657 (fontified t) 657 660 (fontified t face font-lock-keyword-face) 660 663 (fontified t) 663 665 (fontified t face font-lock-keyword-face) 665 666 (fontified t) 666 671 (fontified t face font-lock-builtin-face) 671 917 (fontified t) 917 922 (fontified t face font-lock-builtin-face) 922 951 (fontified t) 951 953 (fontified t face font-lock-keyword-face) 953 1005 (fontified t) 1005 1009 (fontified t face font-lock-keyword-face) 1009 1023 (fontified t) 1023 1025 (fontified t face font-lock-keyword-face) 1025 1183 (fontified t) 1183 1191 (fontified t) 1191 1194 (fontified t face font-lock-keyword-face) 1194 1197 (fontified t) 1197 1199 (fontified t face font-lock-keyword-face) 1199 1200 (fontified t) 1200 1205 (fontified t face font-lock-builtin-face) 1205 1206 (fontified t) 1206 1209 (fontified t face font-lock-builtin-face) 1209 1210 (fontified t) 1210 1213 (fontified t face font-lock-builtin-face) 1213 1232 (fontified t) 1232 1238 (fontified t) 1238 1239 (fontified t) 1239 1243 (fontified t) 1243 1259 (fontified t face font-lock-variable-name-face) 1259 1264 (fontified t) 1264 1272 (fontified t) 1272 1301 (fontified t) 1301 1304 (fontified t face font-lock-keyword-face) 1304 1311 (fontified t) 1311 1313 (fontified t face font-lock-keyword-face) 1313 1329 (fontified t) 1329 1333 (fontified t) 1333 1335 (fontified t) 1335 1339 (fontified t) 1339 1340 (fontified t)) . 1) (undo-tree-id399 . -201) (undo-tree-id400 . -1339) (undo-tree-id401 . -1237) (undo-tree-id402 . 6) (undo-tree-id403 . -1335) (undo-tree-id404 . -1243) (undo-tree-id405 . -1243) (undo-tree-id406 . -1243) (undo-tree-id407 . -1339) (undo-tree-id408 . -1339) (undo-tree-id409 . -1243) (undo-tree-id410 . -1243) (undo-tree-id411 . -1243) (undo-tree-id412 . -1243) (undo-tree-id413 . -1243) (undo-tree-id414 . -1243) (undo-tree-id415 . -1243) (undo-tree-id416 . -1243) (undo-tree-id417 . -1243) (undo-tree-id418 . -1243) (undo-tree-id419 . -1335) 1340) nil (26109 9492 69129 409000) 0 nil])
([nil nil ((1336 . 1341) (t 26109 9492 266488 399000)) nil (26109 10071 2313 803000) 0 nil])
([nil nil ((1240 . 1244) (#("    " 0 4 (fontified nil)) . 1239) (undo-tree-id579 . -4) (1238 . 1244)) nil (26109 10071 2312 327000) 0 nil])
([nil nil ((1244 . 1253)) nil (26109 10071 2310 379000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1251) (undo-tree-id577 . -1) (#("d" 0 1 (fontified t)) . -1252) (undo-tree-id578 . -1) 1253) nil (26109 10071 2309 266000) 0 nil])
([nil nil ((1251 . 1255)) nil (26109 10071 2306 695000) 0 nil])
([nil nil ((#("in_" 0 3 (fontified t)) . -1124) (undo-tree-id576 . -3) 1127) nil (26109 10071 2305 753000) 0 nil])
([nil nil ((#("emsg_" 0 5 (fontified t face font-lock-variable-name-face)) . -1119) (undo-tree-id575 . -5) 1124) nil (26109 10071 2303 833000) 0 nil])
([nil nil ((1247 . 1265)) nil (26109 10071 2302 76000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1262) (undo-tree-id570 . -1) (#("]" 0 1 (fontified t)) . -1263) (undo-tree-id571 . -1) (undo-tree-id572 . 1) (undo-tree-id573 . -1) (#(" " 0 1 (fontified t)) . -1264) (undo-tree-id574 . -1) 1265) nil (26109 10071 2300 591000) 0 nil])
([nil nil ((1262 . 1264)) nil (26109 10071 2295 499000) 0 nil])
([nil nil ((#("i]" 0 2 (fontified t)) . -1262) (undo-tree-id567 . -2) (undo-tree-id568 . 1) (undo-tree-id569 . -2) 1264) nil (26109 10071 2294 429000) 0 nil])
([nil nil ((#("emsg[" 0 5 (fontified t)) . -1257) (undo-tree-id566 . -5) 1262) nil (26109 10071 2291 32000) 0 nil])
([nil nil ((1257 . 1264)) nil (26109 10071 2289 376000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1256) (undo-tree-id565 . -1) 1257) nil (26109 10071 2288 434000) 0 nil])
([nil nil ((1256 . 1258)) nil (26109 10071 2286 783000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -1256) (undo-tree-id563 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -1257) (undo-tree-id564 . -1) 1258) nil (26109 10071 2285 602000) 0 nil])
([nil nil ((1256 . 1258)) nil (26109 10071 2282 811000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -1257) (undo-tree-id562 . -1) 1258) nil (26109 10071 2281 783000) 0 nil])
([nil nil ((1257 . 1259)) nil (26109 10071 2267 892000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -1258) (undo-tree-id559 . -1) (undo-tree-id560 . 1) (undo-tree-id561 . -1) 1259) nil (26109 10071 2266 849000) 0 nil])
([nil nil ((1258 . 1264)) nil (26109 10071 2263 758000) 0 nil])
([nil nil ((#("joinblocks[" 0 4 (fontified t) 4 11 (fontified t)) . -1260) (undo-tree-id558 . -11) 1271) nil (26109 10071 2262 821000) 0 nil])
([nil nil ((1260 . 1273)) nil (26109 10071 2261 138000) 0 nil])
([nil nil ((1273 . 1274)) nil (26109 10071 2260 425000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1273) (undo-tree-id557 . -1) 1274) nil (26109 10071 2259 480000) 0 nil])
([nil nil ((1273 . 1285)) nil (26109 10071 2257 771000) 0 nil])
([nil nil ((#("in " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -1282) (undo-tree-id556 . -3) 1285) nil (26109 10071 2256 725000) 0 nil])
([nil nil ((#("i " 0 2 (fontified t)) . -1280) (undo-tree-id555 . -2) 1282) nil (26109 10071 2254 826000) 0 nil])
([nil nil ((#("for " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -1276) (undo-tree-id554 . -4) 1280) nil (26109 10071 2252 997000) 0 nil])
([nil nil ((#("i] " 0 3 (fontified t)) . -1273) (undo-tree-id553 . -3) 1276) nil (26109 10071 2251 133000) 0 nil])
([nil nil ((1273 . 1276)) nil (26109 10071 2249 487000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1273) (undo-tree-id548 . -1) (#("0" 0 1 (fontified t)) . -1274) (undo-tree-id549 . -1) (#("]" 0 1 (fontified t)) . -1275) (undo-tree-id550 . -1) (undo-tree-id551 . 1) (undo-tree-id552 . -1) 1276) nil (26109 10071 2248 155000) 0 nil])
([nil nil ((1273 . 1275)) nil (26109 10071 2243 135000) 0 nil])
([nil nil ((1256 . 1257)) nil (26109 10071 2242 455000) 0 nil])
([nil nil ((1257 . 1266)) nil (26109 10071 2241 655000) 0 nil])
([nil nil ((1285 . 1287)) nil (26109 10071 2240 885000) 0 nil])
([nil nil ((1287 . 1296)) nil (26109 10071 2240 20000) 0 nil])
([nil nil ((1296 . 1308)) nil (26109 10071 2239 168000) 0 nil])
([nil nil ((#("ran" 0 3 (fontified t)) . -1305) (undo-tree-id547 . -3) 1308) nil (26109 10071 2238 198000) 0 nil])
([nil nil ((1305 . 1319)) nil (26109 10071 2236 508000) 0 nil])
([nil nil ((1319 . 1328)) nil (26109 10071 2235 793000) 0 nil])
([nil nil ((1328 . 1329)) nil (26109 10071 2235 49000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1324) 1329) nil (26109 10071 2234 148000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1286) (undo-tree-id544 . -1) (undo-tree-id545 . 1) (undo-tree-id546 . -1) 1287) nil (26109 10071 2232 901000) 0 nil])
([nil nil ((1286 . 1287)) nil (26109 10071 2229 320000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1286) (undo-tree-id541 . -1) (undo-tree-id542 . 1) (undo-tree-id543 . -1) 1287) nil (26109 10071 2228 231000) 0 nil])
([nil nil ((1286 . 1287)) nil (26109 10071 2224 342000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1286) (undo-tree-id538 . -1) (undo-tree-id539 . 1) (undo-tree-id540 . -1) 1287) nil (26109 10071 2223 309000) 0 nil])
([nil nil ((1286 . 1287)) nil (26109 10071 2220 228000) 0 nil])
([nil nil ((#("blocks" 0 6 (fontified t)) . -1276) (undo-tree-id537 . -6) 1282) nil (26109 10071 2219 214000) 0 nil])
([nil nil ((1276 . 1277)) nil (26109 10071 2217 627000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1276) (undo-tree-id536 . -1) 1277) nil (26109 10071 2216 596000) 0 nil])
([nil nil ((1276 . 1281)) nil (26109 10071 2214 801000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1283) (undo-tree-id527 . -1) (undo-tree-id528 . 1) (undo-tree-id529 . -1) (#("]" 0 1 (fontified t)) . -1284) (undo-tree-id530 . -1) (undo-tree-id531 . 1) (undo-tree-id532 . -1) (#(")" 0 1 (fontified t)) . -1285) (undo-tree-id533 . -1) (undo-tree-id534 . 1) (undo-tree-id535 . -1) 1286) nil (26109 10071 2213 62000) 0 nil])
([nil nil ((1283 . 1304)) nil (26109 10071 2205 289000) 0 nil])
([nil nil ((1304 . 1305)) nil (26109 10071 2204 474000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1304) (undo-tree-id524 . -1) (undo-tree-id525 . 1) (undo-tree-id526 . -1) 1305) nil (26109 10071 2203 84000) 0 nil])
([nil nil ((1304 . 1305)) nil (26109 10071 2199 275000) 0 nil])
([nil nil ((1305 . 1306)) nil (26109 10071 2197 936000) 0 nil])
([nil nil ((1 . 1434) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(6):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        print(keysize_guess, avg)
        if dist_avg == -1:
            dist_avg = avg
        else:
            if avg < dist_avg:
                keysize = keysize_guess
                dist_avg = avg

    blocks = [
        emsg[n * keysize : (n + 1) * keysize]
        for n in range(int(len(emsg) / keysize))
    ]

    transposed_blocks = [
        b\"\".join([block[i] for block in blocks])
        for i in range(keysize)
    ]

    single_char_keys = [
        break_single_char_xor(block) for block in emsg_in_blocks
    ]

    
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 201 (fontified t) 201 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 598 (fontified t) 598 601 (fontified t face font-lock-keyword-face) 601 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 619 (fontified t) 619 624 (fontified t face font-lock-builtin-face) 624 657 (fontified t) 657 660 (fontified t face font-lock-keyword-face) 660 663 (fontified t) 663 665 (fontified t face font-lock-keyword-face) 665 666 (fontified t) 666 671 (fontified t face font-lock-builtin-face) 671 917 (fontified t) 917 922 (fontified t face font-lock-builtin-face) 922 951 (fontified t) 951 953 (fontified t face font-lock-keyword-face) 953 1005 (fontified t) 1005 1009 (fontified t face font-lock-keyword-face) 1009 1023 (fontified t) 1023 1025 (fontified t face font-lock-keyword-face) 1025 1114 (fontified t) 1114 1118 (fontified t) 1118 1124 (fontified t face font-lock-variable-name-face) 1124 1129 (fontified t) 1129 1183 (fontified t) 1183 1186 (fontified t face font-lock-keyword-face) 1186 1189 (fontified t) 1189 1191 (fontified t face font-lock-keyword-face) 1191 1192 (fontified t) 1192 1197 (fontified t face font-lock-builtin-face) 1197 1198 (fontified t) 1198 1201 (fontified t face font-lock-builtin-face) 1201 1202 (fontified t) 1202 1205 (fontified t face font-lock-builtin-face) 1205 1224 (fontified t) 1224 1230 (fontified t) 1230 1231 (fontified t) 1231 1235 (fontified t) 1235 1252 (fontified t face font-lock-variable-name-face) 1252 1257 (fontified t) 1257 1266 (fontified t) 1266 1268 (fontified t face font-lock-string-face) 1268 1284 (fontified t) 1284 1287 (fontified t face font-lock-keyword-face) 1287 1294 (fontified t) 1294 1296 (fontified t face font-lock-keyword-face) 1296 1305 (fontified t) 1305 1306 (fontified t) 1306 1314 (fontified t) 1314 1317 (fontified t face font-lock-keyword-face) 1317 1320 (fontified t) 1320 1322 (fontified t face font-lock-keyword-face) 1322 1323 (fontified t) 1323 1328 (fontified t face font-lock-builtin-face) 1328 1338 (fontified t) 1338 1343 (fontified t) 1343 1344 (fontified t) 1344 1349 (fontified t) 1349 1365 (fontified t face font-lock-variable-name-face) 1365 1407 (fontified t) 1407 1410 (fontified t face font-lock-keyword-face) 1410 1417 (fontified t) 1417 1419 (fontified t face font-lock-keyword-face) 1419 1441 (fontified t) 1441 1442 (fontified t) 1442 1446 (fontified nil) 1446 1447 (fontified nil)) . 1) (undo-tree-id428 . -1118) (undo-tree-id429 . -202) (undo-tree-id430 . -1305) (undo-tree-id431 . -1235) (undo-tree-id432 . -1235) (undo-tree-id433 . -1235) (undo-tree-id434 . -1255) (undo-tree-id435 . -1235) (undo-tree-id436 . -1235) (undo-tree-id437 . -1235) (undo-tree-id438 . -1255) (undo-tree-id439 . -1235) (undo-tree-id440 . -1235) (undo-tree-id441 . -1235) (undo-tree-id442 . -1255) (undo-tree-id443 . -1235) (undo-tree-id444 . -1235) (undo-tree-id445 . -1235) (undo-tree-id446 . -1255) (undo-tree-id447 . -1235) (undo-tree-id448 . -1235) (undo-tree-id449 . -1235) (undo-tree-id450 . -1255) (undo-tree-id451 . -1235) (undo-tree-id452 . -1235) (undo-tree-id453 . -1235) (undo-tree-id454 . -1255) (undo-tree-id455 . -1235) (undo-tree-id456 . -1235) (undo-tree-id457 . -1235) (undo-tree-id458 . -1255) (undo-tree-id459 . -1235) (undo-tree-id460 . -1235) (undo-tree-id461 . -1235) (undo-tree-id462 . -1255) (undo-tree-id463 . -1235) (undo-tree-id464 . -1235) (undo-tree-id465 . -1235) (undo-tree-id466 . -1255) (undo-tree-id467 . -1235) (undo-tree-id468 . -1235) (undo-tree-id469 . -1235) (undo-tree-id470 . -1255) (undo-tree-id471 . -1235) (undo-tree-id472 . -1235) (undo-tree-id473 . -1235) (undo-tree-id474 . -1255) (undo-tree-id475 . -1235) (undo-tree-id476 . -1235) (undo-tree-id477 . -1235) (undo-tree-id478 . -1255) (undo-tree-id479 . -1235) (undo-tree-id480 . -1235) (undo-tree-id481 . -1235) (undo-tree-id482 . -1255) (undo-tree-id483 . -1235) (undo-tree-id484 . -1235) (undo-tree-id485 . -1235) (undo-tree-id486 . -1255) (undo-tree-id487 . -1235) (undo-tree-id488 . -1235) (undo-tree-id489 . -1235) (undo-tree-id490 . -1255) (undo-tree-id491 . -1235) (undo-tree-id492 . -1235) (undo-tree-id493 . -1235) (undo-tree-id494 . -1255) (undo-tree-id495 . -1235) (undo-tree-id496 . -1235) (undo-tree-id497 . -1235) (undo-tree-id498 . -1255) (undo-tree-id499 . -1235) (undo-tree-id500 . -1235) (undo-tree-id501 . -1235) (undo-tree-id502 . -1255) (undo-tree-id503 . -1235) (undo-tree-id504 . -1235) (undo-tree-id505 . -1235) (undo-tree-id506 . -1255) (undo-tree-id507 . -1235) (undo-tree-id508 . -1235) (undo-tree-id509 . -1235) (undo-tree-id510 . -1255) (undo-tree-id511 . -1235) (undo-tree-id512 . -1235) (undo-tree-id513 . -1235) (undo-tree-id514 . -1255) (undo-tree-id515 . 143) (undo-tree-id516 . -1305) (undo-tree-id517 . 174) (undo-tree-id518 . -1274) (undo-tree-id519 . -1235) (undo-tree-id520 . -1235) (undo-tree-id521 . -1235) (undo-tree-id522 . -1255) (undo-tree-id523 . -1257) (1447 . 1448) 1306) nil (26109 10071 2189 177000) 0 nil])
([nil nil ((#("blocks" 0 6 (fontified t)) . -1421) (undo-tree-id582 . -6) 1427 (t 26109 10071 127929 905000)) nil (26109 10169 818407 578000) 0 nil])
([nil nil ((#("in_" 0 3 (fontified t)) . -1418) (undo-tree-id581 . -3) 1421) nil (26109 10169 818404 901000) 0 nil])
([nil nil ((#("emsg_" 0 5 (fontified t)) . -1413) (undo-tree-id580 . -5) 1418) nil (26109 10169 818401 385000) 0 nil])
([nil nil ((1413 . 1430)) nil (26109 10169 818389 476000) 0 nil])
([nil nil ((1284 . 1293) (t 26109 10169 958467 105000)) nil (26109 10274 23238 582000) 0 nil])
([nil nil ((1293 . 1303)) nil (26109 10274 23236 902000) 0 nil])
([nil nil ((1 . 1464) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(6):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        print(keysize_guess, avg)
        if dist_avg == -1:
            dist_avg = avg
        else:
            if avg < dist_avg:
                keysize = keysize_guess
                dist_avg = avg

    blocks = [
        emsg[n * keysize : (n + 1) * keysize]
        for n in range(int(len(emsg) / keysize))
    ]

    transposed_blocks = [
        b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks]) for i in range(keysize)
    ]

    single_char_keys = [
        break_single_char_xor(block) for block in transposed_blocks
    ]
" 202 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 598 (fontified t) 598 601 (fontified t face font-lock-keyword-face) 601 616 (fontified t) 616 618 (fontified t face font-lock-keyword-face) 618 619 (fontified t) 619 624 (fontified t face font-lock-builtin-face) 624 657 (fontified t) 657 660 (fontified t face font-lock-keyword-face) 660 663 (fontified t) 663 665 (fontified t face font-lock-keyword-face) 665 666 (fontified t) 666 671 (fontified t face font-lock-builtin-face) 671 917 (fontified t) 917 922 (fontified t face font-lock-builtin-face) 922 951 (fontified t) 951 953 (fontified t face font-lock-keyword-face) 953 1005 (fontified t) 1005 1009 (fontified t face font-lock-keyword-face) 1009 1023 (fontified t) 1023 1025 (fontified t face font-lock-keyword-face) 1025 1183 (fontified t) 1183 1186 (fontified t face font-lock-keyword-face) 1186 1189 (fontified t) 1189 1191 (fontified t face font-lock-keyword-face) 1191 1192 (fontified t) 1192 1197 (fontified t face font-lock-builtin-face) 1197 1198 (fontified t) 1198 1201 (fontified t face font-lock-builtin-face) 1201 1202 (fontified t) 1202 1205 (fontified t face font-lock-builtin-face) 1205 1257 (fontified t) 1257 1266 (fontified t) 1266 1268 (fontified t face font-lock-string-face) 1268 1296 (fontified t) 1296 1301 (fontified t face font-lock-string-face) 1301 1302 (fontified t) 1302 1303 (fontified t) 1303 1306 (fontified t face font-lock-keyword-face) 1306 1313 (fontified t) 1313 1315 (fontified t face font-lock-keyword-face) 1315 1325 (fontified t) 1325 1328 (fontified t face font-lock-keyword-face) 1328 1331 (fontified t) 1331 1333 (fontified t face font-lock-keyword-face) 1333 1334 (fontified t) 1334 1339 (fontified t face font-lock-builtin-face) 1339 1349 (fontified t) 1349 1360 (fontified t) 1360 1376 (fontified t face font-lock-variable-name-face) 1376 1381 (fontified t) 1381 1418 (fontified t) 1418 1421 (fontified t face font-lock-keyword-face) 1421 1428 (fontified t) 1428 1430 (fontified t face font-lock-keyword-face) 1430 1449 (fontified t) 1449 1455 (fontified t)) . 1) (undo-tree-id583 . -202) (undo-tree-id584 . -1302) (undo-tree-id585 . -1282) (undo-tree-id586 . -1235) (undo-tree-id587 . -1235) (undo-tree-id588 . -1235) (undo-tree-id589 . -1255) (undo-tree-id590 . -1235) (undo-tree-id591 . -1235) (undo-tree-id592 . -1235) (undo-tree-id593 . -1255) (undo-tree-id594 . -1235) (undo-tree-id595 . -1235) (undo-tree-id596 . -1235) (undo-tree-id597 . -1255) (undo-tree-id598 . -1235) (undo-tree-id599 . -1235) (undo-tree-id600 . -1235) (undo-tree-id601 . -1255) (undo-tree-id602 . -1235) (undo-tree-id603 . -1235) (undo-tree-id604 . -1235) (undo-tree-id605 . -1255) (undo-tree-id606 . -1235) (undo-tree-id607 . -1235) (undo-tree-id608 . -1235) (undo-tree-id609 . -1255) (undo-tree-id610 . -1235) (undo-tree-id611 . -1235) (undo-tree-id612 . -1235) (undo-tree-id613 . -1255) (undo-tree-id614 . -1235) (undo-tree-id615 . -1235) (undo-tree-id616 . -1235) (undo-tree-id617 . -1255) (undo-tree-id618 . -1235) (undo-tree-id619 . -1235) (undo-tree-id620 . -1235) (undo-tree-id621 . -1255) (undo-tree-id622 . -1235) (undo-tree-id623 . -1235) (undo-tree-id624 . -1235) (undo-tree-id625 . -1255) (undo-tree-id626 . -1235) (undo-tree-id627 . -1235) (undo-tree-id628 . -1235) (undo-tree-id629 . -1255) (undo-tree-id630 . -1235) (undo-tree-id631 . -1235) (undo-tree-id632 . -1235) (undo-tree-id633 . -1255) (undo-tree-id634 . -1235) (undo-tree-id635 . -1235) (undo-tree-id636 . -1235) (undo-tree-id637 . -1255) (undo-tree-id638 . -1235) (undo-tree-id639 . -1235) (undo-tree-id640 . -1235) (undo-tree-id641 . -1255) (undo-tree-id642 . -1235) (undo-tree-id643 . -1235) (undo-tree-id644 . -1235) (undo-tree-id645 . -1255) (undo-tree-id646 . -1235) (undo-tree-id647 . -1235) (undo-tree-id648 . -1235) (undo-tree-id649 . -1255) (undo-tree-id650 . -1235) (undo-tree-id651 . -1235) (undo-tree-id652 . -1235) (undo-tree-id653 . -1255) (undo-tree-id654 . -1235) (undo-tree-id655 . -1235) (undo-tree-id656 . -1235) (undo-tree-id657 . -1255) (undo-tree-id658 . -1235) (undo-tree-id659 . -1235) (undo-tree-id660 . -1235) (undo-tree-id661 . -1255) (undo-tree-id662 . -1235) (undo-tree-id663 . -1235) (undo-tree-id664 . -1235) (undo-tree-id665 . -1255) (undo-tree-id666 . -1235) (undo-tree-id667 . -1235) (undo-tree-id668 . -1235) (undo-tree-id669 . -1255) (undo-tree-id670 . -1235) (undo-tree-id671 . -1235) (undo-tree-id672 . -1235) (undo-tree-id673 . -1255) (undo-tree-id674 . -1235) (undo-tree-id675 . -1235) (undo-tree-id676 . -1235) (undo-tree-id677 . -1255) (undo-tree-id678 . -1235) (undo-tree-id679 . -1235) (undo-tree-id680 . -1235) (undo-tree-id681 . -1255) (undo-tree-id682 . -1235) (undo-tree-id683 . -1235) (undo-tree-id684 . -1235) (undo-tree-id685 . -1255) (undo-tree-id686 . -1257) (undo-tree-id687 . 154) (undo-tree-id688 . -1302) (undo-tree-id689 . 163) (undo-tree-id690 . -1293) 1303) nil (26109 10274 23227 689000) 0 nil])
([nil nil ((674 . 676) (t 26109 10274 148270 303000)) nil (26109 10498 51819 926000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -673) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("=" 0 1 (fontified t)) . -674) (undo-tree-id693 . -1) (#("4" 0 1 (fontified t)) . -675) (undo-tree-id694 . -1) 676) nil (26109 10498 51816 980000) 0 nil])
([nil nil ((673 . 674)) nil (26109 10498 51801 110000) 0 nil])
([nil nil ((483 . 491) (t 26109 10498 222772 832000)) nil (26109 10889 101173 418000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t face font-lock-string-face)) . -490) (undo-tree-id764 . -1) 491) nil (26109 10889 101172 177000) 0 nil])
([nil nil ((490 . 491)) nil (26109 10889 101170 327000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -489) (undo-tree-id760 . -1) (#("]" 0 1 (fontified t face font-lock-string-face)) . -490) (undo-tree-id761 . -1) (undo-tree-id762 . 1) (undo-tree-id763 . -1) 491) nil (26109 10889 101168 980000) 0 nil])
([nil nil ((#("split(" 0 6 (fontified t)) . -483) (undo-tree-id759 . -6) 489) nil (26109 10889 101164 376000) 0 nil])
([nil nil ((470 . 478)) nil (26109 10889 101162 346000) 0 nil])
([nil nil ((489 . 494)) nil (26109 10889 101161 593000) 0 nil])
([nil nil ((496 . 497)) nil (26109 10889 101160 819000) 0 nil])
([nil nil ((478 . 479)) nil (26109 10889 101160 126000) 0 nil])
([nil nil ((479 . 488)) nil (26109 10889 101159 388000) 0 nil])
([nil nil ((488 . 490)) nil (26109 10889 101158 635000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -489) (undo-tree-id758 . -1) 490) nil (26109 10889 101157 670000) 0 nil])
([nil nil ((489 . 490)) nil (26109 10889 101155 401000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -489) (undo-tree-id757 . -1) 490) nil (26109 10889 101154 410000) 0 nil])
([nil nil ((489 . 507)) nil (26109 10889 101152 689000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -525) (undo-tree-id754 . -1) (undo-tree-id755 . 1) (undo-tree-id756 . -1) 526) nil (26109 10889 101151 618000) 0 nil])
([nil nil ((525 . 527)) nil (26109 10889 101148 428000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -526) (undo-tree-id751 . -1) (undo-tree-id752 . 1) (undo-tree-id753 . -1) 527) nil (26109 10889 101147 110000) 0 nil])
([nil nil ((526 . 553)) nil (26109 10889 101142 996000) 0 nil])
([nil nil ((553 . 554)) nil (26109 10889 101141 949000) 0 nil])
([nil nil ((525 . 530)) nil (26109 10889 101140 631000) 0 nil])
([nil nil ((1 . 1513) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    base64_emsg = \"\".join([
        x.strip() for x in file_6.readlines()
    ]
                          ).encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    keysize = -1
    dist_avg = -1

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        print(keysize_guess, avg)
        if dist_avg == -1:
            dist_avg = avg
        else:
            if avg < dist_avg:
                keysize = keysize_guess
                dist_avg = avg

    blocks = [
        emsg[n * keysize : (n + 1) * keysize]
        for n in range(int(len(emsg) / keysize))
    ]

    transposed_blocks = [
        b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
        for i in range(keysize)
    ]

    single_char_keys = [
        break_single_char_xor(block) for block in transposed_blocks
    ]
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-delimiter-face) 16 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 201 (fontified t) 201 202 (fontified t) 202 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 451 (fontified t) 451 455 (fontified t) 455 466 (fontified t face font-lock-variable-name-face) 466 469 (fontified t) 469 471 (fontified t face font-lock-string-face) 471 479 (fontified t) 479 497 (fontified t) 497 500 (fontified t face font-lock-keyword-face) 500 503 (fontified t) 503 505 (fontified t face font-lock-keyword-face) 505 506 (fontified t) 506 531 (fontified t) 531 558 (fontified t) 558 576 (fontified t) 576 600 (fontified t) 600 604 (fontified t face font-lock-variable-name-face) 604 638 (fontified t) 638 645 (fontified t face font-lock-variable-name-face) 645 655 (fontified t) 655 663 (fontified t face font-lock-variable-name-face) 663 674 (fontified t) 674 677 (fontified t face font-lock-keyword-face) 677 692 (fontified t) 692 694 (fontified t face font-lock-keyword-face) 694 695 (fontified t) 695 700 (fontified t face font-lock-builtin-face) 700 717 (fontified t) 717 720 (fontified t face font-lock-variable-name-face) 720 725 (fontified t) 725 733 (fontified t) 733 736 (fontified t face font-lock-keyword-face) 736 739 (fontified t) 739 741 (fontified t face font-lock-keyword-face) 741 742 (fontified t) 742 747 (fontified t face font-lock-builtin-face) 747 752 (fontified t) 752 764 (fontified t) 764 771 (fontified t face font-lock-variable-name-face) 771 836 (fontified t) 836 843 (fontified t face font-lock-variable-name-face) 843 914 (fontified t) 914 917 (fontified t face font-lock-variable-name-face) 917 976 (fontified t) 976 979 (fontified t face font-lock-variable-name-face) 979 993 (fontified t) 993 998 (fontified t face font-lock-builtin-face) 998 1027 (fontified t) 1027 1029 (fontified t face font-lock-keyword-face) 1029 1081 (fontified t) 1081 1085 (fontified t face font-lock-keyword-face) 1085 1099 (fontified t) 1099 1101 (fontified t face font-lock-keyword-face) 1101 1259 (fontified t) 1259 1262 (fontified t face font-lock-keyword-face) 1262 1265 (fontified t) 1265 1267 (fontified t face font-lock-keyword-face) 1267 1268 (fontified t) 1268 1273 (fontified t face font-lock-builtin-face) 1273 1274 (fontified t) 1274 1277 (fontified t face font-lock-builtin-face) 1277 1278 (fontified t) 1278 1281 (fontified t face font-lock-builtin-face) 1281 1342 (fontified t) 1342 1344 (fontified t face font-lock-string-face) 1344 1372 (fontified t) 1372 1377 (fontified t face font-lock-string-face) 1377 1379 (fontified t) 1379 1382 (fontified t face font-lock-keyword-face) 1382 1389 (fontified t) 1389 1391 (fontified t face font-lock-keyword-face) 1391 1409 (fontified t) 1409 1412 (fontified t face font-lock-keyword-face) 1412 1415 (fontified t) 1415 1417 (fontified t face font-lock-keyword-face) 1417 1418 (fontified t) 1418 1423 (fontified t face font-lock-builtin-face) 1423 1502 (fontified t) 1502 1505 (fontified t face font-lock-keyword-face) 1505 1512 (fontified t) 1512 1514 (fontified t face font-lock-keyword-face) 1514 1539 (fontified t)) . 1) (undo-tree-id695 . -1439) (undo-tree-id696 . -266) (undo-tree-id697 . -624) (undo-tree-id698 . -529) (undo-tree-id699 . -469) (undo-tree-id700 . -455) (undo-tree-id701 . -455) (undo-tree-id702 . -455) (undo-tree-id703 . -455) (undo-tree-id704 . -469) (undo-tree-id705 . -455) (undo-tree-id706 . -455) (undo-tree-id707 . -455) (undo-tree-id708 . -455) (undo-tree-id709 . -469) (undo-tree-id710 . -455) (undo-tree-id711 . -455) (undo-tree-id712 . -455) (undo-tree-id713 . -455) (undo-tree-id714 . -469) (undo-tree-id715 . -455) (undo-tree-id716 . -455) (undo-tree-id717 . -455) (undo-tree-id718 . -455) (undo-tree-id719 . -469) (undo-tree-id720 . -1311) (undo-tree-id721 . -1311) (undo-tree-id722 . -1311) (undo-tree-id723 . -1331) (undo-tree-id724 . -1311) (undo-tree-id725 . -1311) (undo-tree-id726 . -1311) (undo-tree-id727 . -1331) (undo-tree-id728 . 1009) (undo-tree-id729 . -455) (undo-tree-id730 . -455) (undo-tree-id731 . -1311) (undo-tree-id732 . -1311) (undo-tree-id733 . -1311) (undo-tree-id734 . -1331) (undo-tree-id735 . -1311) (undo-tree-id736 . -1311) (undo-tree-id737 . -1311) (undo-tree-id738 . -1331) (undo-tree-id739 . 1015) (undo-tree-id740 . -455) (undo-tree-id741 . -455) (undo-tree-id742 . -525) (undo-tree-id743 . -1311) (undo-tree-id744 . -1311) (undo-tree-id745 . -1311) (undo-tree-id746 . -1331) (undo-tree-id747 . -1311) (undo-tree-id748 . -1311) (undo-tree-id749 . -1311) (undo-tree-id750 . -1331) 530) nil (26109 10889 101134 180000) 0 nil])
([nil nil ((549 . 554) (t 26109 10889 264585 147000)) nil (26109 10962 390641 888000) 0 nil])
([nil nil ((554 . 570)) nil (26109 10962 390640 828000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -568) (undo-tree-id777 . -1) (#("f" 0 1 (fontified t)) . -569) (undo-tree-id778 . -1) 570) nil (26109 10962 390639 555000) 0 nil])
([nil nil ((568 . 586)) nil (26109 10962 390636 621000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -581) (undo-tree-id770 . -1) (#("e" 0 1 (fontified t)) . -582) (undo-tree-id771 . -1) (#("s" 0 1 (fontified t)) . -583) (undo-tree-id772 . -1) (#("(" 0 1 (fontified t)) . -584) (undo-tree-id773 . -1) (#(")" 0 1 (fontified t)) . -585) (undo-tree-id774 . -1) (undo-tree-id775 . 1) (undo-tree-id776 . -1) 586) nil (26109 10962 390634 670000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -579) (undo-tree-id768 . -1) (#("i" 0 1 (fontified t)) . -580) (undo-tree-id769 . -1) 581) nil (26109 10962 390626 645000) 0 nil])
([nil nil ((579 . 596)) nil (26109 10962 390623 313000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -593) (undo-tree-id765 . -1) (#("n" 0 1 (fontified t)) . -594) (undo-tree-id766 . -1) (#("g" 0 1 (fontified t)) . -595) (undo-tree-id767 . -1) 596) nil (26109 10962 390621 188000) 0 nil])
([nil nil ((593 . 598)) nil (26109 10962 390609 700000) 0 nil])
([nil nil ((apply -6 452 605 undo--wrap-and-run-primitive-undo 452 605 ((552 . 554) (533 . 535) (456 . 458) 550))) nil (26109 10962 390604 721000) 0 nil])
([nil nil ((1218 . 1234) (t 26109 10962 532285 156000)) nil (26109 11024 457497 871000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1230) (undo-tree-id820 . -4) 1234) nil (26109 11024 457496 590000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1226) (undo-tree-id819 . -4) 1230) nil (26109 11024 457494 614000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1222) (undo-tree-id818 . -4) 1226) nil (26109 11024 457492 562000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -674) (undo-tree-id813 . -1) (#("=" 0 1 (fontified t)) . -675) (undo-tree-id814 . -1) (#(" " 0 1 (fontified t)) . -676) (undo-tree-id815 . -1) (#("-" 0 1 (fontified t)) . -677) (undo-tree-id816 . -1) (#("1" 0 1 (fontified t)) . -678) (undo-tree-id817 . -1) 679) nil (26109 11024 457489 710000) 0 nil])
([nil nil ((#("keysize" 0 7 (fontified t)) . -667) (undo-tree-id812 . -7) 674) nil (26109 11024 457483 494000) 0 nil])
([nil nil ((667 . 671)) nil (26109 11024 457481 719000) 0 nil])
([nil nil ((671 . 681)) nil (26109 11024 457480 935000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -679) (undo-tree-id808 . -1) (#("]" 0 1 (fontified t)) . -680) (undo-tree-id809 . -1) (undo-tree-id810 . 1) (undo-tree-id811 . -1) 681) nil (26109 11024 457479 643000) 0 nil])
([nil nil ((679 . 681)) nil (26109 11024 457474 914000) 0 nil])
([nil nil ((#("    dist_avg = -1" 0 4 (fontified t) 4 12 (fontified t face font-lock-variable-name-face) 12 17 (fontified t)) . 682)) nil (26109 11024 457474 87000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 682)) nil (26109 11024 457473 266000) 0 nil])
([nil nil ((#("        print(keysize_guess, avg)" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 33 (fontified t)) . 998)) nil (26109 11024 457472 381000) 0 nil])
([nil nil ((998 . 1006)) nil (26109 11024 457471 611000) 0 nil])
([nil nil ((1006 . 1008)) nil (26109 11024 457470 892000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1006) (undo-tree-id806 . -1) (#("i" 0 1 (fontified t)) . -1007) (undo-tree-id807 . -1) 1008) nil (26109 11024 457469 734000) 0 nil])
([nil nil ((1006 . 1027)) nil (26109 11024 457466 869000) 0 nil])
([nil nil ((1027 . 1030)) nil (26109 11024 457466 33000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1029) (undo-tree-id805 . -1) 1030) nil (26109 11024 457464 932000) 0 nil])
([nil nil ((1029 . 1036)) nil (26109 11024 457462 739000) 0 nil])
([nil nil ((#("        if dist_avg == -1:
            dist_avg = avg
        else:
            if avg < dist_avg:
                keysize = keysize_guess
                dist_avg = avg
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 62 (fontified t) 62 66 (fontified t face font-lock-keyword-face) 66 80 (fontified t) 80 82 (fontified t face font-lock-keyword-face) 82 170 (fontified t)) . -1037) (undo-tree-id801 . -170) (undo-tree-id802 . -170) (undo-tree-id803 . -170) (undo-tree-id804 . -170) 1207) nil (26109 11024 457460 768000) 0 nil])
([nil nil ((1 . 1387) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    dist_avgs = {}

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        dist_avgs[keysize_guess] = avg
    
    blocks = [
        emsg[n * keysize : (n + 1) * keysize]
        for n in range(int(len(emsg) / keysize))
    ]

    transposed_blocks = [
        b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
        for i in range(keysize)
    ]

    single_char_keys = [
        break_single_char_xor(block) for block in transposed_blocks
    ]
" 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 451 (fontified t) 451 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 471 (fontified t face font-lock-comment-face) 471 473 (fontified t face font-lock-comment-face) 473 490 (fontified t face font-lock-comment-face) 490 493 (fontified t face font-lock-comment-face) 493 496 (fontified t face font-lock-comment-face) 496 498 (fontified t face font-lock-comment-face) 498 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 534 (fontified t face font-lock-comment-delimiter-face) 534 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 559 (fontified t) 559 570 (fontified t face font-lock-variable-name-face) 570 573 (fontified t) 573 603 (fontified t) 603 604 (fontified t) 604 623 (fontified t) 623 628 (fontified t) 628 632 (fontified t face font-lock-variable-name-face) 632 662 (fontified t) 662 666 (fontified t) 666 675 (fontified t face font-lock-variable-name-face) 675 680 (fontified t) 680 681 (fontified t) 681 682 (fontified t) 682 686 (fontified t) 686 689 (fontified t face font-lock-keyword-face) 689 704 (fontified t) 704 706 (fontified t face font-lock-keyword-face) 706 707 (fontified t) 707 712 (fontified t face font-lock-builtin-face) 712 729 (fontified t) 729 732 (fontified t face font-lock-variable-name-face) 732 745 (fontified t) 745 748 (fontified t face font-lock-keyword-face) 748 751 (fontified t) 751 753 (fontified t face font-lock-keyword-face) 753 754 (fontified t) 754 759 (fontified t face font-lock-builtin-face) 759 776 (fontified t) 776 783 (fontified t face font-lock-variable-name-face) 783 848 (fontified t) 848 855 (fontified t face font-lock-variable-name-face) 855 926 (fontified t) 926 929 (fontified t face font-lock-variable-name-face) 929 988 (fontified t) 988 991 (fontified t face font-lock-variable-name-face) 991 997 (fontified t) 997 1005 (fontified t) 1005 1014 (fontified t face font-lock-variable-name-face) 1014 1015 (fontified t) 1015 1028 (fontified t face font-lock-variable-name-face) 1028 1035 (fontified t) 1035 1036 (fontified t) 1036 1041 (fontified t) 1041 1045 (fontified t) 1045 1051 (fontified t) 1051 1110 (fontified t) 1110 1113 (fontified t face font-lock-keyword-face) 1113 1116 (fontified t) 1116 1118 (fontified t face font-lock-keyword-face) 1118 1119 (fontified t) 1119 1124 (fontified t face font-lock-builtin-face) 1124 1125 (fontified t) 1125 1128 (fontified t face font-lock-builtin-face) 1128 1129 (fontified t) 1129 1132 (fontified t face font-lock-builtin-face) 1132 1162 (fontified t) 1162 1179 (fontified t) 1179 1193 (fontified t) 1193 1195 (fontified t face font-lock-string-face) 1195 1223 (fontified t) 1223 1228 (fontified t face font-lock-string-face) 1228 1230 (fontified t) 1230 1233 (fontified t face font-lock-keyword-face) 1233 1240 (fontified t) 1240 1242 (fontified t face font-lock-keyword-face) 1242 1260 (fontified t) 1260 1263 (fontified t face font-lock-keyword-face) 1263 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1274 (fontified t face font-lock-builtin-face) 1274 1295 (fontified t) 1295 1311 (fontified t) 1311 1353 (fontified t) 1353 1356 (fontified t face font-lock-keyword-face) 1356 1363 (fontified t) 1363 1365 (fontified t face font-lock-keyword-face) 1365 1390 (fontified t)) . 1) (undo-tree-id779 . -1036) (undo-tree-id780 . -266) (undo-tree-id781 . -1036) (undo-tree-id782 . -1036) (undo-tree-id783 . -1162) (undo-tree-id784 . -1162) (undo-tree-id785 . -1162) (undo-tree-id786 . -1182) (undo-tree-id787 . -1162) (undo-tree-id788 . -1162) (undo-tree-id789 . -1162) (undo-tree-id790 . -1182) (undo-tree-id791 . -1162) (undo-tree-id792 . -1162) (undo-tree-id793 . -1162) (undo-tree-id794 . -1182) (undo-tree-id795 . -1162) (undo-tree-id796 . -1162) (undo-tree-id797 . -1162) (undo-tree-id798 . -1182) (undo-tree-id799 . -451) (undo-tree-id800 . -1036) 1037) nil (26109 11024 457451 765000) 0 nil])
([nil nil ((#("dist" 0 4 (fontified t)) . -667) (undo-tree-id878 . -4) 671 (t 26109 11024 632908 263000)) nil (26109 11380 998481 171000) 0 nil])
([nil nil ((667 . 670)) nil (26109 11380 998479 247000) 0 nil])
([nil nil ((#("avgs" 0 4 (fontified t face font-lock-variable-name-face)) . -1010) (undo-tree-id877 . -4) 1014) nil (26109 11380 998478 283000) 0 nil])
([nil nil ((#("dist_" 0 5 (fontified t face font-lock-variable-name-face)) . -1005) (undo-tree-id876 . -5) 1010) nil (26109 11380 998476 379000) 0 nil])
([nil nil ((1005 . 1009)) nil (26109 11380 998474 605000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -1008) (undo-tree-id875 . -1) 1009) nil (26109 11380 998473 624000) 0 nil])
([nil nil ((1008 . 1013)) nil (26109 11380 998471 885000) 0 nil])
([nil nil ((1035 . 1043)) nil (26109 11380 998471 142000) 0 nil])
([nil nil ((1036 . 1044) (#("        " 0 8 (fontified nil)) . 1035) (undo-tree-id873 . -8) (undo-tree-id874 . -8) (1043 . 1044)) nil (26109 11380 998470 5000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1040) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) 1044) nil (26109 11380 998466 956000) 0 nil])
([nil nil ((1035 . 1043)) nil (26109 11380 998463 122000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1039) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) 1043) nil (26109 11380 998462 35000) 0 nil])
([nil nil ((1036 . 1044) (#("    " 0 4 (fontified nil)) . 1035) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (1039 . 1040)) nil (26109 11380 998457 749000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1040) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) 1044) nil (26109 11380 998452 904000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1036) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) 1040) nil (26109 11380 998448 648000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1035) (undo-tree-id842 . -1) (undo-tree-id843 . 1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 1036) nil (26109 11380 998442 677000) 0 nil])
([nil nil ((1035 . 1043)) nil (26109 11380 998434 511000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1039) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) 1043) nil (26109 11380 998433 385000) 0 nil])
([nil nil ((1039 . 1040)) nil (26109 11380 998429 251000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1039) (undo-tree-id837 . -1) 1040) nil (26109 11380 998428 315000) 0 nil])
([nil nil ((1039 . 1048)) nil (26109 11380 998426 574000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1047) (undo-tree-id836 . -1) 1048) nil (26109 11380 998425 638000) 0 nil])
([nil nil ((1047 . 1049)) nil (26109 11380 998423 919000) 0 nil])
([nil nil ((#("guesses = " 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t)) . -1039) (undo-tree-id835 . -10) 1049) nil (26109 11482 226659 251000) 0 nil])
([nil nil ((apply -22 1039 1416 undo--wrap-and-run-primitive-undo 1039 1416 ((1412 . 1414) (1342 . 1344) (1315 . 1317) (1306 . 1308) (1272 . 1274) (1202 . 1204) (1174 . 1176) (1165 . 1167) (1114 . 1116) (1066 . 1068) (1049 . 1051) 1394))) nil (26109 11487 857454 986000) 0 nil] [nil nil ((1039 . 1047)) ((#("keyseize" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 1039) (undo-tree-id910 . -8)) (26109 11481 899564 324000) 0 nil])
([nil nil ((1 . 1407) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = {}

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs[keysize_guess] = avg
    
    
    # blocks = [
    #     emsg[n * keysize : (n + 1) * keysize]
    #     for n in range(int(len(emsg) / keysize))
    # ]

    # transposed_blocks = [
    #     b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
    #     for i in range(keysize)
    # ]

    # single_char_keys = [
    #     break_single_char_xor(block) for block in transposed_blocks
    # ]
" 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 662 (fontified t) 662 666 (fontified t) 666 669 (fontified t) 669 674 (fontified t) 674 680 (fontified t) 680 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 728 (fontified t) 728 731 (fontified t) 731 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 775 (fontified t) 775 782 (fontified t) 782 847 (fontified t) 847 854 (fontified t) 854 925 (fontified t) 925 928 (fontified t) 928 987 (fontified t) 987 990 (fontified t) 990 996 (fontified t) 996 1004 (fontified t) 1004 1012 (fontified t) 1012 1013 (fontified t) 1013 1021 (fontified t face font-lock-variable-name-face) 1021 1026 (fontified t face font-lock-variable-name-face) 1026 1030 (fontified t) 1030 1033 (fontified t) 1033 1034 (fontified t) 1034 1038 (fontified t) 1038 1039 (fontified t) 1039 1043 (fontified t) 1043 1044 (fontified t) 1044 1048 (fontified t) 1048 1050 (fontified t face font-lock-comment-delimiter-face) 1050 1056 (fontified t face font-lock-comment-face) 1056 1061 (fontified t face font-lock-comment-face) 1061 1065 (fontified t) 1065 1067 (fontified t face font-lock-comment-delimiter-face) 1067 1071 (fontified t face font-lock-comment-delimiter-face) 1071 1109 (fontified t face font-lock-comment-face) 1109 1113 (fontified t) 1113 1115 (fontified t face font-lock-comment-delimiter-face) 1115 1119 (fontified t face font-lock-comment-delimiter-face) 1119 1122 (fontified t face font-lock-comment-face) 1122 1125 (fontified t face font-lock-comment-face) 1125 1127 (fontified t face font-lock-comment-face) 1127 1128 (fontified t face font-lock-comment-face) 1128 1133 (fontified t face font-lock-comment-face) 1133 1134 (fontified t face font-lock-comment-face) 1134 1137 (fontified t face font-lock-comment-face) 1137 1138 (fontified t face font-lock-comment-face) 1138 1141 (fontified t face font-lock-comment-face) 1141 1160 (fontified t face font-lock-comment-face) 1160 1164 (fontified t) 1164 1166 (fontified t face font-lock-comment-delimiter-face) 1166 1168 (fontified t face font-lock-comment-face) 1168 1173 (fontified t) 1173 1175 (fontified t face font-lock-comment-delimiter-face) 1175 1192 (fontified t face font-lock-comment-face) 1192 1197 (fontified t face font-lock-comment-face) 1197 1201 (fontified t) 1201 1203 (fontified t face font-lock-comment-delimiter-face) 1203 1207 (fontified t face font-lock-comment-delimiter-face) 1207 1208 (fontified t face font-lock-comment-face) 1208 1210 (fontified t face font-lock-comment-face) 1210 1238 (fontified t face font-lock-comment-face) 1238 1243 (fontified t face font-lock-comment-face) 1243 1245 (fontified t face font-lock-comment-face) 1245 1248 (fontified t face font-lock-comment-face) 1248 1255 (fontified t face font-lock-comment-face) 1255 1257 (fontified t face font-lock-comment-face) 1257 1267 (fontified t face font-lock-comment-face) 1267 1271 (fontified t) 1271 1273 (fontified t face font-lock-comment-delimiter-face) 1273 1277 (fontified t face font-lock-comment-delimiter-face) 1277 1280 (fontified t face font-lock-comment-face) 1280 1283 (fontified t face font-lock-comment-face) 1283 1285 (fontified t face font-lock-comment-face) 1285 1286 (fontified t face font-lock-comment-face) 1286 1291 (fontified t face font-lock-comment-face) 1291 1301 (fontified t face font-lock-comment-face) 1301 1305 (fontified t) 1305 1307 (fontified t face font-lock-comment-delimiter-face) 1307 1309 (fontified t face font-lock-comment-face) 1309 1314 (fontified t) 1314 1316 (fontified t face font-lock-comment-delimiter-face) 1316 1332 (fontified t face font-lock-comment-face) 1332 1337 (fontified t face font-lock-comment-face) 1337 1341 (fontified t) 1341 1343 (fontified t face font-lock-comment-delimiter-face) 1343 1347 (fontified t face font-lock-comment-delimiter-face) 1347 1376 (fontified t face font-lock-comment-face) 1376 1379 (fontified t face font-lock-comment-face) 1379 1386 (fontified t face font-lock-comment-face) 1386 1388 (fontified t face font-lock-comment-face) 1388 1407 (fontified t face font-lock-comment-face) 1407 1411 (fontified t) 1411 1413 (fontified t face font-lock-comment-delimiter-face) 1413 1415 (fontified t face font-lock-comment-face)) . -1) (undo-tree-id911 . -1038) (undo-tree-id912 . -1034) (undo-tree-id913 . -397) (undo-tree-id914 . -397) (undo-tree-id915 . -428) (undo-tree-id916 . -428) (undo-tree-id917 . -437) (undo-tree-id918 . -1173) (undo-tree-id919 . -1173) (undo-tree-id920 . -1173) (undo-tree-id921 . -1195) (undo-tree-id922 . -1173) (undo-tree-id923 . -1173) (undo-tree-id924 . -1173) (undo-tree-id925 . -1195) (undo-tree-id926 . -397) (undo-tree-id927 . -397) (undo-tree-id928 . -428) (undo-tree-id929 . -428) (undo-tree-id930 . -437) (undo-tree-id931 . -1173) (undo-tree-id932 . -1173) (undo-tree-id933 . -1173) (undo-tree-id934 . -1195) (undo-tree-id935 . -1173) (undo-tree-id936 . -1173) (undo-tree-id937 . -1173) (undo-tree-id938 . -1195) (undo-tree-id939 . -1043) (undo-tree-id940 . -1038) (undo-tree-id941 . -1038) (undo-tree-id942 . -266) (undo-tree-id943 . -266) (undo-tree-id944 . -1038) (undo-tree-id945 . -1415) (undo-tree-id946 . -1415) 1416) nil (26109 11487 857449 233000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1043) (undo-tree-id831 . -1) (#("i" 0 1 (fontified t)) . -1044) (undo-tree-id832 . -1) (#("z" 0 1 (fontified t)) . -1045) (undo-tree-id833 . -1) (#("e" 0 1 (fontified t)) . -1046) (undo-tree-id834 . -1) 1047) ((1043 . 1047)) (26109 11481 507757 337000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -678) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("}" 0 1 (fontified t)) . -679) (undo-tree-id950 . -1) (undo-tree-id951 . 1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) 680 (t 26109 11487 989155 323000)) nil (26109 11543 656675 704000) 0 nil])
([nil nil ((1043 . 1064)) ((#("ize_guesses = keysize" 0 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 21 (fontified t)) . 1043) (undo-tree-id909 . -21)) (26109 11481 203241 501000) 0 nil])
([nil nil ((678 . 680)) nil (26109 11543 656668 247000) 0 nil])
([nil nil ((1064 . 1065)) ((#("[" 0 1 (fontified t)) . 1064) (undo-tree-id908 . -1)) (26109 11480 917354 805000) 0 nil])
([nil nil ((1013 . 1021)) nil (26109 11543 656725 462000) 0 nil])
([nil nil ((1065 . 1066)) ((#("i" 0 1 (fontified t)) . 1065) (undo-tree-id907 . -1)) (26109 11480 580032 830000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1035) (undo-tree-id954 . -1) (#(" " 0 1 (fontified t)) . -1036) (undo-tree-id955 . -1) (#("=" 0 1 (fontified t)) . -1037) (undo-tree-id956 . -1) (#(" " 0 1 (fontified t)) . -1038) (undo-tree-id957 . -1) 1039) nil (26109 11546 594160 414000) 0 nil] [nil nil ((#("guess] = " 0 5 (fontified t) 5 9 (fontified t)) . -1030) (undo-tree-id947 . -9) 1039) ((1030 . 1039)) (26109 11543 656662 407000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1064) (undo-tree-id829 . -1) (#("i" 0 1 (fontified t)) . -1065) (undo-tree-id830 . -1) 1066) ((1064 . 1066)) (26109 11480 274890 650000) 0 nil])
([nil nil ((1035 . 1037)) nil (26109 11546 594136 103000) 0 nil])
nil
([nil nil ((#("keysize" 0 7 (fontified t)) . -1057) (undo-tree-id828 . -7) 1064) ((1057 . 1064)) (26109 11479 933730 137000) 0 nil])
([nil nil ((1040 . 1042)) nil (26109 11546 594129 272000) 0 nil])
([nil nil ((1057 . 1060)) ((#("key" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1057) (undo-tree-id906 . -3)) (26109 11479 548659 423000) 0 nil])
([nil nil ((1042 . 1051) (t 26109 11546 738872 179000)) nil (26109 11638 634503 84000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1057) (undo-tree-id825 . -1) (#("e" 0 1 (fontified t)) . -1058) (undo-tree-id826 . -1) (#("y" 0 1 (fontified t)) . -1059) (undo-tree-id827 . -1) 1060) ((1057 . 1060)) (26109 11479 220441 637000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1047) (undo-tree-id971 . -4) 1051) nil (26109 11638 634501 904000) 0 nil])
([nil nil ((1057 . 1062)) ((#("sorte" 0 5 (fontified t)) . 1057) (undo-tree-id905 . -5)) (26109 11478 843323 844000) 0 nil])
([nil nil ((1044 . 1052) (#("    " 0 4 (fontified nil)) . 1043) (undo-tree-id970 . -4) (1047 . 1048)) nil (26109 11638 634499 918000) 0 nil])
([nil nil ((#("sorte" 0 5 (fontified t)) . -1057) (undo-tree-id824 . -5) 1062) ((1057 . 1062)) (26109 11478 445126 96000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1048) (undo-tree-id969 . -4) 1052) nil (26109 11638 634497 749000) 0 nil])
([nil nil ((#("guess" 0 5 (fontified t face font-lock-variable-name-face)) . 1022) (undo-tree-id880 . -5)) ((1022 . 1027)) (26109 11478 150990 76000) 0 nil])
([nil nil ((1048 . 1066)) nil (26109 11638 634495 900000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t face font-lock-variable-name-face)) . 1014) (undo-tree-id881 . -8)) ((1014 . 1022)) (26109 11478 924 971000) 0 nil])
([nil nil ((#("guesses = " 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t)) . -1056) (undo-tree-id968 . -10) 1066) nil (26109 11638 634494 876000) 0 nil])
([nil nil ((1014 . 1017)) ((#("avg" 0 3 (fontified t face font-lock-variable-name-face)) . 1014)) (26109 11477 846344 201000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t)) . -1048) (undo-tree-id967 . -8) 1056) nil (26109 11638 634491 654000) 0 nil])
([nil nil ((#("avg" 0 3 (fontified t)) . 1021)) ((1021 . 1024)) (26109 11477 694804 874000) 0 nil])
([nil nil ((1048 . 1051)) nil (26109 11638 634489 903000) 0 nil])
([nil nil ((1021 . 1026)) ((#("keys0" 0 4 (fontified t) 4 5 (fontified t)) . 1021) (undo-tree-id904 . -5)) (26109 11477 526252 665000) 0 nil] [nil nil ((1021 . 1024)) ((#("key" 0 3 (fontified t)) . 1021) (undo-tree-id879 . -3)) (26109 11380 998379 602000) 0 nil])
([nil nil ((1051 . 1058)) nil (26109 11638 634489 128000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1025) (undo-tree-id890 . -1) 1026) ((1025 . 1026)) (26109 11477 199582 124000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -1057) (undo-tree-id966 . -1) 1058) nil (26109 11638 634488 129000) 0 nil])
([nil nil ((1025 . 1034)) ((#("ize_guess" 0 9 (fontified t)) . 1025)) (26109 11476 976487 78000) 0 nil])
([nil nil ((1057 . 1062)) nil (26109 11638 634486 392000) 0 nil])
([nil nil ((1057 . 1073)) ((#("sorted(key_avgs)" 0 6 (fontified t face font-lock-builtin-face) 6 15 (fontified t) 15 16 (fontified t)) . 1057) (undo-tree-id899 . -16) (undo-tree-id900 . 1) (undo-tree-id901 . -16) (undo-tree-id902 . 10) (undo-tree-id903 . -7)) (26109 11476 788431 813000) 0 nil])
([nil nil ((1062 . 1068)) nil (26109 11638 634485 618000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1072) (undo-tree-id887 . -1) (undo-tree-id888 . 1) (undo-tree-id889 . -1) 1073) ((1072 . 1073)) (26109 11476 602307 713000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1067) (undo-tree-id965 . -1) 1068) nil (26109 11638 634484 664000) 0 nil])
([nil nil ((1072 . 1086)) ((#(").values()[:3]" 0 14 (fontified t)) . 1072)) (26109 11476 311289 183000) 0 nil])
([nil nil ((1063 . 1064)) nil (26109 11638 634482 870000) 0 nil])
([nil nil ((apply -22 1091 1463 undo--wrap-and-run-primitive-undo 1091 1463 ((1459 . 1461) (1389 . 1391) (1362 . 1364) (1353 . 1355) (1319 . 1321) (1249 . 1251) (1221 . 1223) (1212 . 1214) (1161 . 1163) (1113 . 1115) (1096 . 1098) 1441))) ((apply 22 1091 1441 undo--wrap-and-run-primitive-undo 1091 1441 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1096) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1113) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1161) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1212) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1221) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1249) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1319) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1353) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1362) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1389) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1459) 1463))) (26109 11476 88755 210000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1063) (undo-tree-id964 . -1) 1064) nil (26109 11638 634481 891000) 0 nil])
([nil nil ((1 . 1459) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = {}

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs[avg] = keysize_guess
    keysize_guesses = sorted(key_avgs).values()[:3]
    
    # blocks = [
    #     emsg[n * keysize : (n + 1) * keysize]
    #     for n in range(int(len(emsg) / keysize))
    # ]

    # transposed_blocks = [
    #     b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
    #     for i in range(keysize)
    # ]

    # single_char_keys = [
    #     break_single_char_xor(block) for block in transposed_blocks
    # ]
" 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 662 (fontified t) 662 666 (fontified t) 666 669 (fontified t face font-lock-variable-name-face) 669 674 (fontified t face font-lock-variable-name-face) 674 680 (fontified t) 680 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 728 (fontified t) 728 731 (fontified t face font-lock-variable-name-face) 731 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 775 (fontified t) 775 782 (fontified t face font-lock-variable-name-face) 782 847 (fontified t) 847 854 (fontified t face font-lock-variable-name-face) 854 925 (fontified t) 925 928 (fontified t face font-lock-variable-name-face) 928 987 (fontified t) 987 990 (fontified t face font-lock-variable-name-face) 990 996 (fontified t) 996 1004 (fontified t) 1004 1012 (fontified t face font-lock-variable-name-face) 1012 1013 (fontified t) 1013 1016 (fontified t face font-lock-variable-name-face) 1016 1033 (fontified t) 1033 1034 (fontified t) 1034 1038 (fontified t) 1038 1053 (fontified t face font-lock-variable-name-face) 1053 1056 (fontified t) 1056 1062 (fontified t face font-lock-builtin-face) 1062 1085 (fontified t) 1085 1086 (fontified t) 1086 1090 (fontified t) 1090 1091 (fontified t) 1091 1095 (fontified t) 1095 1097 (fontified t face font-lock-comment-delimiter-face) 1097 1103 (fontified t face font-lock-comment-face) 1103 1108 (fontified t face font-lock-comment-face) 1108 1112 (fontified t) 1112 1114 (fontified t face font-lock-comment-delimiter-face) 1114 1118 (fontified t face font-lock-comment-delimiter-face) 1118 1156 (fontified t face font-lock-comment-face) 1156 1160 (fontified t) 1160 1162 (fontified t face font-lock-comment-delimiter-face) 1162 1166 (fontified t face font-lock-comment-delimiter-face) 1166 1169 (fontified t face font-lock-comment-face) 1169 1172 (fontified t face font-lock-comment-face) 1172 1174 (fontified t face font-lock-comment-face) 1174 1175 (fontified t face font-lock-comment-face) 1175 1180 (fontified t face font-lock-comment-face) 1180 1181 (fontified t face font-lock-comment-face) 1181 1184 (fontified t face font-lock-comment-face) 1184 1185 (fontified t face font-lock-comment-face) 1185 1188 (fontified t face font-lock-comment-face) 1188 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1213 (fontified t face font-lock-comment-delimiter-face) 1213 1215 (fontified t face font-lock-comment-face) 1215 1220 (fontified t) 1220 1222 (fontified t face font-lock-comment-delimiter-face) 1222 1239 (fontified t face font-lock-comment-face) 1239 1244 (fontified t face font-lock-comment-face) 1244 1248 (fontified t) 1248 1250 (fontified t face font-lock-comment-delimiter-face) 1250 1254 (fontified t face font-lock-comment-delimiter-face) 1254 1255 (fontified t face font-lock-comment-face) 1255 1257 (fontified t face font-lock-comment-face) 1257 1285 (fontified t face font-lock-comment-face) 1285 1290 (fontified t face font-lock-comment-face) 1290 1292 (fontified t face font-lock-comment-face) 1292 1295 (fontified t face font-lock-comment-face) 1295 1302 (fontified t face font-lock-comment-face) 1302 1304 (fontified t face font-lock-comment-face) 1304 1314 (fontified t face font-lock-comment-face) 1314 1318 (fontified t) 1318 1320 (fontified t face font-lock-comment-delimiter-face) 1320 1324 (fontified t face font-lock-comment-delimiter-face) 1324 1327 (fontified t face font-lock-comment-face) 1327 1330 (fontified t face font-lock-comment-face) 1330 1332 (fontified t face font-lock-comment-face) 1332 1333 (fontified t face font-lock-comment-face) 1333 1338 (fontified t face font-lock-comment-face) 1338 1348 (fontified t face font-lock-comment-face) 1348 1352 (fontified t) 1352 1354 (fontified t face font-lock-comment-delimiter-face) 1354 1356 (fontified t face font-lock-comment-face) 1356 1361 (fontified t) 1361 1363 (fontified t face font-lock-comment-delimiter-face) 1363 1379 (fontified t face font-lock-comment-face) 1379 1384 (fontified t face font-lock-comment-face) 1384 1388 (fontified t) 1388 1390 (fontified t face font-lock-comment-delimiter-face) 1390 1394 (fontified t face font-lock-comment-delimiter-face) 1394 1423 (fontified t face font-lock-comment-face) 1423 1426 (fontified t face font-lock-comment-face) 1426 1433 (fontified t face font-lock-comment-face) 1433 1435 (fontified t face font-lock-comment-face) 1435 1454 (fontified t face font-lock-comment-face) 1454 1458 (fontified t) 1458 1460 (fontified t face font-lock-comment-delimiter-face) 1460 1462 (fontified t face font-lock-comment-face)) . -1) (undo-tree-id882 . -1090) (undo-tree-id883 . -266) (undo-tree-id884 . -1462) (undo-tree-id885 . -1034) (undo-tree-id886 . -1462) 1463) ((1 . 1463) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = {}

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs[avg] = keysize_guess
    keysize_guesses = sorted(key_avgs).values()[:3]

    # blocks = [
    #     emsg[n * keysize : (n + 1) * keysize]
    #     for n in range(int(len(emsg) / keysize))
    # ]

    # transposed_blocks = [
    #     b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
    #     for i in range(keysize)
    # ]

    # single_char_keys = [
    #     break_single_char_xor(block) for block in transposed_blocks
    # ]
" 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 1013 (fontified t) 1013 1016 (fontified t face font-lock-variable-name-face) 1016 1056 (fontified t) 1056 1062 (fontified t face font-lock-builtin-face) 1062 1091 (fontified t) 1091 1093 (fontified t face font-lock-comment-delimiter-face) 1093 1104 (fontified t face font-lock-comment-face) 1104 1108 (fontified t) 1108 1114 (fontified t face font-lock-comment-delimiter-face) 1114 1152 (fontified t face font-lock-comment-face) 1152 1156 (fontified t) 1156 1162 (fontified t face font-lock-comment-delimiter-face) 1162 1203 (fontified t face font-lock-comment-face) 1203 1207 (fontified t) 1207 1209 (fontified t face font-lock-comment-delimiter-face) 1209 1211 (fontified t face font-lock-comment-face) 1211 1216 (fontified t) 1216 1218 (fontified t face font-lock-comment-delimiter-face) 1218 1240 (fontified t face font-lock-comment-face) 1240 1244 (fontified t) 1244 1250 (fontified t face font-lock-comment-delimiter-face) 1250 1310 (fontified t face font-lock-comment-face) 1310 1314 (fontified t) 1314 1320 (fontified t face font-lock-comment-delimiter-face) 1320 1344 (fontified t face font-lock-comment-face) 1344 1348 (fontified t) 1348 1350 (fontified t face font-lock-comment-delimiter-face) 1350 1352 (fontified t face font-lock-comment-face) 1352 1357 (fontified t) 1357 1359 (fontified t face font-lock-comment-delimiter-face) 1359 1380 (fontified t face font-lock-comment-face) 1380 1384 (fontified t) 1384 1390 (fontified t face font-lock-comment-delimiter-face) 1390 1450 (fontified t face font-lock-comment-face) 1450 1454 (fontified t) 1454 1456 (fontified t face font-lock-comment-delimiter-face) 1456 1458 (fontified t face font-lock-comment-face)) . 1) (undo-tree-id891 . -266) (undo-tree-id892 . -1458) (undo-tree-id893 . -1458) (undo-tree-id894 . -397) (undo-tree-id895 . -397) (undo-tree-id896 . -428) (undo-tree-id897 . -428) (undo-tree-id898 . -437) (t 26109 11411 663237 140000)) (26109 11411 490610 542000) 0 nil])
([nil nil ((1059 . 1066)) nil (26109 11638 634479 984000) 0 nil])
nil
([nil nil ((1074 . 1082)) nil (26109 11638 634479 152000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1079) (undo-tree-id961 . -1) (#("=" 0 1 (fontified t)) . -1080) (undo-tree-id962 . -1) (#(" " 0 1 (fontified t)) . -1081) (undo-tree-id963 . -1) 1082) nil (26109 11638 634477 452000) 0 nil])
([nil nil ((1079 . 1091)) nil (26109 11638 634472 948000) 0 nil])
([nil nil ((1091 . 1096)) nil (26109 11638 634471 595000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1095) (undo-tree-id958 . -1) (undo-tree-id959 . 1) (undo-tree-id960 . -1) 1096) nil (26109 11638 634467 390000) 0 nil])
([nil nil ((1095 . 1099) (t 26109 11638 769010 348000)) nil (26109 11687 47197 214000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -1098) (undo-tree-id987 . -1) (undo-tree-id988 . 1) (undo-tree-id989 . -1) 1099) nil (26109 11687 47195 811000) 0 nil])
([nil nil ((1098 . 1099)) nil (26109 11687 47190 685000) 0 nil])
([nil nil ((1059 . 1074)) nil (26109 11687 47189 922000) 0 nil])
([nil nil ((1074 . 1090) (#(" " 0 1 (fontified nil)) . 1073) (undo-tree-id986 . -1) (1074 . 1075)) nil (26109 11687 47188 743000) 0 nil])
([nil nil ((1130 . 1131)) nil (26109 11687 47186 335000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1130) (undo-tree-id983 . -1) (undo-tree-id984 . 1) (undo-tree-id985 . -1) 1131) nil (26109 11687 47184 917000) 0 nil])
([nil nil ((1130 . 1147)) nil (26109 11687 47180 133000) 0 nil])
([nil nil ((1147 . 1148)) nil (26109 11687 47178 718000) 0 nil])
([nil nil ((1 . 1488) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = []

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs.append([keysize_guess, avg])

    keysizes = [x[0] for x in
                sorted(key_avgs, key=lambda x: x[1])[:3]
                ]

    # blocks = [
    #     emsg[n * keysize : (n + 1) * keysize]
    #     for n in range(int(len(emsg) / keysize))
    # ]

    # transposed_blocks = [
    #     b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
    #     for i in range(keysize)
    # ]

    # single_char_keys = [
    #     break_single_char_xor(block) for block in transposed_blocks
    # ]
" 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 662 (fontified t) 662 666 (fontified t) 666 674 (fontified t face font-lock-variable-name-face) 674 680 (fontified t) 680 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 728 (fontified t) 728 731 (fontified t face font-lock-variable-name-face) 731 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 775 (fontified t) 775 782 (fontified t face font-lock-variable-name-face) 782 847 (fontified t) 847 854 (fontified t face font-lock-variable-name-face) 854 925 (fontified t) 925 928 (fontified t face font-lock-variable-name-face) 928 987 (fontified t) 987 990 (fontified t face font-lock-variable-name-face) 990 996 (fontified t) 996 1004 (fontified t) 1004 1013 (fontified t) 1013 1020 (fontified t) 1020 1021 (fontified t) 1021 1029 (fontified t) 1029 1036 (fontified t) 1036 1042 (fontified t) 1042 1043 (fontified t) 1043 1047 (fontified t) 1047 1055 (fontified t face font-lock-variable-name-face) 1055 1064 (fontified t) 1064 1067 (fontified t face font-lock-keyword-face) 1067 1070 (fontified t) 1070 1072 (fontified t face font-lock-keyword-face) 1072 1073 (fontified t) 1073 1089 (fontified t) 1089 1095 (fontified t face font-lock-builtin-face) 1095 1110 (fontified t) 1110 1116 (fontified t face font-lock-keyword-face) 1116 1130 (fontified t) 1130 1147 (fontified t) 1147 1148 (fontified t) 1148 1153 (fontified t) 1153 1155 (fontified t face font-lock-comment-delimiter-face) 1155 1166 (fontified t face font-lock-comment-face) 1166 1170 (fontified t) 1170 1176 (fontified t face font-lock-comment-delimiter-face) 1176 1214 (fontified t face font-lock-comment-face) 1214 1218 (fontified t) 1218 1224 (fontified t face font-lock-comment-delimiter-face) 1224 1265 (fontified t face font-lock-comment-face) 1265 1269 (fontified t) 1269 1271 (fontified t face font-lock-comment-delimiter-face) 1271 1273 (fontified t face font-lock-comment-face) 1273 1278 (fontified t) 1278 1280 (fontified t face font-lock-comment-delimiter-face) 1280 1302 (fontified t face font-lock-comment-face) 1302 1306 (fontified t) 1306 1312 (fontified t face font-lock-comment-delimiter-face) 1312 1372 (fontified t face font-lock-comment-face) 1372 1376 (fontified t) 1376 1382 (fontified t face font-lock-comment-delimiter-face) 1382 1406 (fontified t face font-lock-comment-face) 1406 1410 (fontified t) 1410 1412 (fontified t face font-lock-comment-delimiter-face) 1412 1414 (fontified t face font-lock-comment-face) 1414 1419 (fontified t) 1419 1421 (fontified t face font-lock-comment-delimiter-face) 1421 1442 (fontified t face font-lock-comment-face) 1442 1446 (fontified t) 1446 1452 (fontified t face font-lock-comment-delimiter-face) 1452 1512 (fontified t face font-lock-comment-face) 1512 1516 (fontified t) 1516 1518 (fontified t face font-lock-comment-delimiter-face) 1518 1520 (fontified t face font-lock-comment-face)) . 1) (undo-tree-id972 . -266) (undo-tree-id973 . -1147) (undo-tree-id974 . -1058) (undo-tree-id975 . 391) (undo-tree-id976 . -1047) (undo-tree-id977 . -1047) (undo-tree-id978 . -1130) (undo-tree-id979 . 374) (undo-tree-id980 . -1147) (undo-tree-id981 . 462) (undo-tree-id982 . -1059) 1148) nil (26109 11687 47173 658000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -760) (undo-tree-id990 . -1) 761 (t 26109 11687 233616 294000)) nil (26109 11698 334962 201000) 0 nil])
([nil nil ((760 . 761)) nil (26109 11698 334948 217000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t)) . -760) (undo-tree-id991 . -1) 761 (t 26109 11698 568758 607000)) nil (26109 11708 701091 386000) 0 nil])
([nil nil ((760 . 761)) nil (26109 11708 701078 493000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -760) (undo-tree-id993 . -1) 761 (t 26109 11708 853887 922000)) nil (26109 11723 657797 269000) 0 nil])
([nil nil ((760 . 761)) nil (26109 11723 657794 446000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -760) (undo-tree-id992 . -1) 761) nil (26109 11723 657792 361000) 0 nil])
([nil nil ((760 . 761)) nil (26109 11723 657779 346000) 0 nil])
([nil nil ((1116 . 1121) (t 26109 11723 883077 194000)) nil (26109 11780 921669 861000) 0 nil])
([nil nil ((1121 . 1142)) nil (26109 11780 921668 959000) 0 nil])
([nil nil ((1142 . 1144)) nil (26109 11780 921667 814000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1143) (undo-tree-id1057 . -1) 1144) nil (26109 11780 921666 824000) 0 nil])
([nil nil ((1143 . 1144)) nil (26109 11780 921664 862000) 0 nil])
([nil nil ((apply 22 1145 1494 undo--wrap-and-run-primitive-undo 1145 1494 ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1492) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1424) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1399) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1392) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1360) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1292) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1266) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1259) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1210) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1164) (#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1149) 1516))) nil (26109 11780 921664 157000) 0 nil])
([nil nil ((1145 . 1153) (#("    " 0 4 (fontified t)) . 1145)) nil (26109 11780 921663 240000) 0 nil])
([nil nil ((1172 . 1176)) nil (26109 11780 921662 257000) 0 nil])
([nil nil ((1222 . 1226) 1226) nil (26109 11780 921661 475000) 0 nil])
([nil nil ((1267 . 1275) (#("    " 0 4 (fontified t)) . 1267) 1272) nil (26109 11780 921660 275000) 0 nil])
([nil nil ((1277 . 1285)) nil (26109 11780 921659 159000) 0 nil])
([nil nil ((1286 . 1294) (#("    " 0 4 (fontified t)) . 1286) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) 1294) nil (26109 11780 921657 727000) 0 nil])
([nil nil ((1324 . 1328) 1328) nil (26109 11780 921650 594000) 0 nil])
([nil nil ((1396 . 1400) 1404) nil (26109 11780 921649 587000) 0 nil])
([nil nil ((1424 . 1432) (#("    " 0 4 (fontified t)) . 1424) 1429) nil (26109 11780 921648 380000) 0 nil])
([nil nil ((1435 . 1443) (#("    " 0 4 (fontified t)) . 1435) (undo-tree-id1049 . -4) 1444) nil (26109 11780 921646 833000) 0 nil])
([nil nil ((1472 . 1476) 1477) nil (26109 11780 921644 418000) 0 nil])
([nil nil ((1536 . 1544) (#("    " 0 4 (fontified t)) . 1536) 1541) nil (26109 11780 921642 645000) 0 nil])
([nil nil ((1 . 1538) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = []

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(2):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs.append([keysize_guess, avg])

    keysizes = [x[0] for x in sorted(key_avgs, key=lambda x: x[1])[:3]]

    for keysize in keysize:
        blocks = [
            emsg[n * keysize : (n + 1) * keysize]
            for n in range(int(len(emsg) / keysize))
        ]
        
        transposed_blocks = [
            b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
            for i in range(keysize)
        ]

        single_char_keys = [
            break_single_char_xor(block) for block in transposed_blocks
        ]
" 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 736 (fontified t) 736 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 763 (fontified t) 763 775 (fontified t) 775 782 (fontified t face font-lock-variable-name-face) 782 847 (fontified t) 847 854 (fontified t face font-lock-variable-name-face) 854 925 (fontified t) 925 928 (fontified t face font-lock-variable-name-face) 928 987 (fontified t) 987 990 (fontified t face font-lock-variable-name-face) 990 1047 (fontified t) 1047 1055 (fontified t face font-lock-variable-name-face) 1055 1064 (fontified t) 1064 1067 (fontified t face font-lock-keyword-face) 1067 1070 (fontified t) 1070 1072 (fontified t face font-lock-keyword-face) 1072 1073 (fontified t) 1073 1079 (fontified t face font-lock-builtin-face) 1079 1094 (fontified t) 1094 1100 (fontified t face font-lock-keyword-face) 1100 1115 (fontified t) 1115 1116 (fontified t) 1116 1120 (fontified t) 1120 1123 (fontified t face font-lock-keyword-face) 1123 1132 (fontified t) 1132 1134 (fontified t face font-lock-keyword-face) 1134 1143 (fontified t) 1143 1144 (fontified t) 1144 1152 (fontified t) 1152 1158 (fontified t face font-lock-variable-name-face) 1158 1163 (fontified t) 1163 1167 (fontified t) 1167 1175 (fontified t) 1175 1213 (fontified t) 1213 1217 (fontified t) 1217 1225 (fontified t) 1225 1228 (fontified t face font-lock-keyword-face) 1228 1231 (fontified t) 1231 1233 (fontified t face font-lock-keyword-face) 1233 1234 (fontified t) 1234 1239 (fontified t face font-lock-builtin-face) 1239 1240 (fontified t) 1240 1243 (fontified t face font-lock-builtin-face) 1243 1244 (fontified t) 1244 1247 (fontified t face font-lock-builtin-face) 1247 1266 (fontified t) 1266 1274 (fontified t) 1274 1276 (fontified t) 1276 1284 (fontified t) 1284 1285 (fontified t) 1285 1293 (fontified t) 1293 1310 (fontified t face font-lock-variable-name-face) 1310 1315 (fontified t) 1315 1319 (fontified t) 1319 1327 (fontified t) 1327 1328 (fontified t) 1328 1330 (fontified t face font-lock-string-face) 1330 1358 (fontified t) 1358 1363 (fontified t face font-lock-string-face) 1363 1365 (fontified t) 1365 1368 (fontified t face font-lock-keyword-face) 1368 1375 (fontified t) 1375 1377 (fontified t face font-lock-keyword-face) 1377 1387 (fontified t) 1387 1391 (fontified t) 1391 1399 (fontified t) 1399 1402 (fontified t face font-lock-keyword-face) 1402 1405 (fontified t) 1405 1407 (fontified t face font-lock-keyword-face) 1407 1408 (fontified t) 1408 1413 (fontified t face font-lock-builtin-face) 1413 1423 (fontified t) 1423 1431 (fontified t) 1431 1433 (fontified t) 1433 1434 (fontified t) 1434 1442 (fontified t) 1442 1458 (fontified t face font-lock-variable-name-face) 1458 1463 (fontified t) 1463 1467 (fontified t) 1467 1475 (fontified t) 1475 1504 (fontified t) 1504 1507 (fontified t face font-lock-keyword-face) 1507 1514 (fontified t) 1514 1516 (fontified t face font-lock-keyword-face) 1516 1535 (fontified t) 1535 1543 (fontified t) 1543 1545 (fontified t)) . 1) (undo-tree-id994 . -1545) (undo-tree-id995 . -266) (undo-tree-id996 . -1276) (undo-tree-id997 . -1285) (undo-tree-id998 . -1285) (undo-tree-id999 . -1285) (undo-tree-id1000 . -1313) (undo-tree-id1001 . -1285) (undo-tree-id1002 . -1285) (undo-tree-id1003 . -1285) (undo-tree-id1004 . -1313) (undo-tree-id1005 . -1120) (undo-tree-id1006 . -1120) (undo-tree-id1007 . -1152) (undo-tree-id1008 . -1152) (undo-tree-id1009 . -1152) (undo-tree-id1010 . -1152) (undo-tree-id1011 . -1152) (undo-tree-id1012 . -1152) (undo-tree-id1013 . -1152) (undo-tree-id1014 . -1276) (undo-tree-id1015 . -1152) (undo-tree-id1016 . -1152) (undo-tree-id1017 . -1152) (undo-tree-id1018 . -1284) (undo-tree-id1019 . -1285) (undo-tree-id1020 . -1152) (undo-tree-id1021 . -1152) (undo-tree-id1022 . -1152) (undo-tree-id1023 . -1293) (undo-tree-id1024 . -1293) (undo-tree-id1025 . -1293) (undo-tree-id1026 . -1293) (undo-tree-id1027 . -1293) (undo-tree-id1028 . -1293) (undo-tree-id1029 . -1313) (undo-tree-id1030 . -1293) (undo-tree-id1031 . -1293) (undo-tree-id1032 . -1293) (undo-tree-id1033 . -1313) (undo-tree-id1034 . -1293) (undo-tree-id1035 . -1293) (undo-tree-id1036 . -1293) (undo-tree-id1037 . -1293) (undo-tree-id1038 . -1434) (undo-tree-id1039 . -1293) (undo-tree-id1040 . -1293) (undo-tree-id1041 . -1293) (undo-tree-id1042 . -1442) (undo-tree-id1043 . -1442) (undo-tree-id1044 . -1442) (undo-tree-id1045 . -1442) (undo-tree-id1046 . -1442) (undo-tree-id1047 . -1144) (undo-tree-id1048 . -1276) 1277) nil (26109 11780 921635 310000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1144) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) 1145 (t 26109 11781 181801 997000)) nil (26109 11796 39164 386000) 0 nil])
([nil nil ((1144 . 1145)) nil (26109 11796 39160 583000) 0 nil])
([nil nil ((1276 . 1277)) nil (26109 11796 39159 266000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1276) (undo-tree-id1058 . -1) 1277) nil (26109 11796 39154 851000) 0 nil])
([nil nil ((1143 . 1144) (t 26109 11796 226993 98000)) nil (26109 11807 314432 10000) 0 nil])
([nil nil ((1538 . 1539) (t 26109 11807 507136 590000)) nil (26109 11838 544718 376000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -1538) (undo-tree-id1064 . -1) 1539) nil (26109 11838 544717 201000) 0 nil])
([nil nil ((1540 . 1548) (#("        " 0 8 (fontified nil)) . 1539) (undo-tree-id1063 . -8) (1538 . 1548)) nil (26109 11838 544714 925000) 0 nil])
([nil nil ((1548 . 1569)) nil (26109 11838 544712 699000) 0 nil])
([nil nil ((1569 . 1571)) nil (26109 11838 544711 999000) 0 nil])
([nil nil ((1145 . 1154)) nil (26109 11838 544711 229000) 0 nil])
([nil nil ((1154 . 1173)) nil (26109 11838 544710 483000) 0 nil])
([nil nil ((1173 . 1176)) nil (26109 11838 544709 666000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -1175) (undo-tree-id1062 . -1) 1176) nil (26109 11838 544708 472000) 0 nil])
([nil nil ((1175 . 1177)) nil (26109 11838 544705 993000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1176) (undo-tree-id1061 . -1) 1177) nil (26109 11838 544703 893000) 0 nil])
([nil nil ((1176 . 1186)) nil (26109 11838 544689 625000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -760) (undo-tree-id1066 . -1) 761 (t 26109 11838 719534 506000)) nil (26109 11874 466692 370000) 0 nil])
([nil nil ((760 . 761)) nil (26109 11874 466689 603000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -760) (undo-tree-id1065 . -1) 761) nil (26109 11874 466687 525000) 0 nil])
([nil nil ((760 . 761)) nil (26109 11874 466674 764000) 0 nil])
([nil nil ((#("keysizes" 0 8 (fontified t)) . -1136) (undo-tree-id1067 . -8) 1144 (t 26109 11874 676994 438000)) nil (26109 11959 488842 613000) 0 nil])
([nil nil ((1136 . 1148)) nil (26109 11959 488823 331000) 0 nil])
([nil nil ((#("10)" 0 3 (fontified t)) . -1145) (undo-tree-id1070 . -3) (undo-tree-id1071 . 1) (undo-tree-id1072 . -3) 1148 (t 26109 11959 643087 123000)) nil (26109 12437 990846 403000) 0 nil])
([nil nil ((#("2, " 0 3 (fontified t)) . -1142) (undo-tree-id1069 . -3) 1145) nil (26109 12437 990841 286000) 0 nil])
([nil nil ((#("range(" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t)) . -1136) (undo-tree-id1068 . -6) 1142) nil (26109 12437 990837 783000) 0 nil])
([nil nil ((1136 . 1144)) nil (26109 12437 990824 629000) 0 nil])
([nil nil ((1538 . 1541) (t 26109 12438 73306 268000)) nil (26109 12482 497910 330000) 0 nil])
([nil nil ((1496 . 1497)) nil (26109 12482 497909 289000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -1496) (undo-tree-id1086 . -1) 1497) nil (26109 12482 497908 126000) 0 nil])
([nil nil ((1496 . 1505)) nil (26109 12482 497905 920000) 0 nil])
([nil nil ((1505 . 1518)) nil (26109 12482 497905 50000) 0 nil])
([nil nil ((1604 . 1617)) nil (26109 12482 497904 109000) 0 nil])
([nil nil ((1617 . 1618)) nil (26109 12482 497902 854000) 0 nil])
([nil nil ((1 . 1626) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = []

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs.append([keysize_guess, avg])

    keysizes = [x[0] for x in sorted(key_avgs, key=lambda x: x[1])[:3]]

    for keysize in keysizes:
        print(\"Trying keysize\", keysize)
        blocks = [
            emsg[n * keysize : (n + 1) * keysize]
            for n in range(int(len(emsg) / keysize))
        ]

        transposed_blocks = [
            b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
            for i in range(keysize)
        ]

        single_char_keys = b\"\".join(
            [
            break_single_char_xor(block)[0] for block in transposed_blocks
        ]
            )

        print(single_char_keys)
" 40 41 (fontified t) 41 45 (fontified t face font-lock-keyword-face) 45 62 (fontified t) 62 68 (fontified t face font-lock-keyword-face) 68 71 (fontified t) 71 75 (fontified t face font-lock-keyword-face) 75 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 114 (fontified t) 114 120 (fontified t face font-lock-keyword-face) 120 123 (fontified t) 123 127 (fontified t face font-lock-keyword-face) 127 140 (fontified t) 140 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 153 (fontified t face font-lock-keyword-face) 153 166 (fontified t) 166 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 201 (fontified t) 201 202 (fontified t) 202 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 227 (fontified t) 227 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 240 (fontified t) 240 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 266 (fontified t) 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 282 (fontified t face font-lock-variable-name-face) 282 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 736 (fontified t) 736 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 763 (fontified t) 763 775 (fontified t) 775 782 (fontified t face font-lock-variable-name-face) 782 847 (fontified t) 847 854 (fontified t face font-lock-variable-name-face) 854 925 (fontified t) 925 928 (fontified t face font-lock-variable-name-face) 928 987 (fontified t) 987 990 (fontified t face font-lock-variable-name-face) 990 1047 (fontified t) 1047 1055 (fontified t face font-lock-variable-name-face) 1055 1064 (fontified t) 1064 1067 (fontified t face font-lock-keyword-face) 1067 1070 (fontified t) 1070 1072 (fontified t face font-lock-keyword-face) 1072 1073 (fontified t) 1073 1079 (fontified t face font-lock-builtin-face) 1079 1094 (fontified t) 1094 1100 (fontified t face font-lock-keyword-face) 1100 1116 (fontified t) 1116 1120 (fontified t) 1120 1123 (fontified t face font-lock-keyword-face) 1123 1132 (fontified t) 1132 1134 (fontified t face font-lock-keyword-face) 1134 1143 (fontified t) 1143 1145 (fontified t) 1145 1153 (fontified t) 1153 1158 (fontified t face font-lock-builtin-face) 1158 1159 (fontified t) 1159 1175 (fontified t face font-lock-string-face) 1175 1185 (fontified t) 1185 1186 (fontified t) 1186 1194 (fontified t) 1194 1200 (fontified t face font-lock-variable-name-face) 1200 1205 (fontified t) 1205 1267 (fontified t) 1267 1270 (fontified t face font-lock-keyword-face) 1270 1273 (fontified t) 1273 1275 (fontified t face font-lock-keyword-face) 1275 1276 (fontified t) 1276 1281 (fontified t face font-lock-builtin-face) 1281 1282 (fontified t) 1282 1285 (fontified t face font-lock-builtin-face) 1285 1286 (fontified t) 1286 1289 (fontified t face font-lock-builtin-face) 1289 1308 (fontified t) 1308 1318 (fontified t) 1318 1327 (fontified t) 1327 1344 (fontified t face font-lock-variable-name-face) 1344 1362 (fontified t) 1362 1364 (fontified t face font-lock-string-face) 1364 1392 (fontified t) 1392 1397 (fontified t face font-lock-string-face) 1397 1399 (fontified t) 1399 1402 (fontified t face font-lock-keyword-face) 1402 1409 (fontified t) 1409 1411 (fontified t face font-lock-keyword-face) 1411 1433 (fontified t) 1433 1436 (fontified t face font-lock-keyword-face) 1436 1439 (fontified t) 1439 1441 (fontified t face font-lock-keyword-face) 1441 1442 (fontified t) 1442 1447 (fontified t face font-lock-builtin-face) 1447 1468 (fontified t) 1468 1476 (fontified t) 1476 1492 (fontified t face font-lock-variable-name-face) 1492 1496 (fontified t) 1496 1498 (fontified t face font-lock-string-face) 1498 1517 (fontified t) 1517 1519 (fontified t) 1519 1563 (fontified t) 1563 1566 (fontified t face font-lock-keyword-face) 1566 1573 (fontified t) 1573 1575 (fontified t face font-lock-keyword-face) 1575 1594 (fontified t) 1594 1604 (fontified t) 1604 1618 (fontified t) 1618 1619 (fontified t) 1619 1627 (fontified t) 1627 1632 (fontified t face font-lock-builtin-face) 1632 1650 (fontified t) 1650 1651 (fontified t)) . 1) (undo-tree-id1073 . -327) (undo-tree-id1074 . -1651) (undo-tree-id1075 . -1651) (undo-tree-id1076 . -327) (undo-tree-id1077 . -555) (undo-tree-id1078 . -1617) (undo-tree-id1079 . -679) (undo-tree-id1080 . -1618) (undo-tree-id1081 . -1604) (undo-tree-id1082 . 35) (undo-tree-id1083 . -1617) (undo-tree-id1084 . 148) (undo-tree-id1085 . -1504) 1618) nil (26109 12482 497897 886000) 0 nil])
([nil nil ((1592 . 1593) (t 26109 12482 562365 717000)) nil (26109 12492 426857 84000) 0 nil])
([nil nil ((1 . 1626) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = []

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs.append([keysize_guess, avg])

    keysizes = [x[0] for x in sorted(key_avgs, key=lambda x: x[1])[:3]]

    for keysize in keysizes:
        print(\"Trying keysize\", keysize)
        blocks = [
            emsg[n * keysize : (n + 1) * keysize]
            for n in range(int(len(emsg) / keysize))
        ]

        transposed_blocks = [
            b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
            for i in range(keysize)
        ]

        single_char_keys = b\"\".join(
            [break_single_char_xor(block)[0] for block in transposed_blocks]
        ) 

        print(single_char_keys)
" 327 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 1064 (fontified t) 1064 1067 (fontified t face font-lock-keyword-face) 1067 1070 (fontified t) 1070 1072 (fontified t face font-lock-keyword-face) 1072 1073 (fontified t) 1073 1079 (fontified t face font-lock-builtin-face) 1079 1094 (fontified t) 1094 1100 (fontified t face font-lock-keyword-face) 1100 1120 (fontified t) 1120 1123 (fontified t face font-lock-keyword-face) 1123 1132 (fontified t) 1132 1134 (fontified t face font-lock-keyword-face) 1134 1153 (fontified t) 1153 1158 (fontified t face font-lock-builtin-face) 1158 1159 (fontified t) 1159 1175 (fontified t face font-lock-string-face) 1175 1267 (fontified t) 1267 1270 (fontified t face font-lock-keyword-face) 1270 1273 (fontified t) 1273 1275 (fontified t face font-lock-keyword-face) 1275 1276 (fontified t) 1276 1281 (fontified t face font-lock-builtin-face) 1281 1282 (fontified t) 1282 1285 (fontified t face font-lock-builtin-face) 1285 1286 (fontified t) 1286 1289 (fontified t face font-lock-builtin-face) 1289 1362 (fontified t) 1362 1364 (fontified t face font-lock-string-face) 1364 1392 (fontified t) 1392 1397 (fontified t face font-lock-string-face) 1397 1399 (fontified t) 1399 1402 (fontified t face font-lock-keyword-face) 1402 1409 (fontified t) 1409 1411 (fontified t face font-lock-keyword-face) 1411 1433 (fontified t) 1433 1436 (fontified t face font-lock-keyword-face) 1436 1439 (fontified t) 1439 1441 (fontified t face font-lock-keyword-face) 1441 1442 (fontified t) 1442 1447 (fontified t face font-lock-builtin-face) 1447 1496 (fontified t) 1496 1498 (fontified t face font-lock-string-face) 1498 1550 (fontified t) 1550 1553 (fontified t face font-lock-keyword-face) 1553 1560 (fontified t) 1560 1562 (fontified t face font-lock-keyword-face) 1562 1582 (fontified t) 1582 1593 (fontified t) 1593 1602 (fontified t) 1602 1607 (fontified t face font-lock-builtin-face) 1607 1626 (fontified t)) . 1) (undo-tree-id1087 . -327) (undo-tree-id1088 . -1592) (undo-tree-id1089 . -397) (undo-tree-id1090 . -397) (undo-tree-id1091 . -428) (undo-tree-id1092 . -428) (undo-tree-id1093 . -437) (undo-tree-id1094 . -1153) (undo-tree-id1095 . -1153) (undo-tree-id1096 . -1327) (undo-tree-id1097 . -1327) (undo-tree-id1098 . -1327) (undo-tree-id1099 . -1347) (undo-tree-id1100 . -1327) (undo-tree-id1101 . -1327) (undo-tree-id1102 . -1327) (undo-tree-id1103 . -1347) (undo-tree-id1104 . -1476) (undo-tree-id1105 . -1476) (undo-tree-id1106 . -1495) (undo-tree-id1107 . -1582) 1593) nil (26109 12492 426850 343000) 0 nil])
([nil nil ((1627 . 1635) (#("        " 0 8 (fontified nil)) . 1626) (undo-tree-id1135 . -8) (1625 . 1635) (t 26109 12492 488383 680000)) nil (26109 12721 629951 422000) 0 nil])
([nil nil ((1116 . 1117)) nil (26109 12721 629947 913000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1116) (undo-tree-id1134 . -1) 1117) nil (26109 12721 629946 242000) 0 nil])
([nil nil ((1116 . 1120)) nil (26109 12721 629943 258000) 0 nil])
([nil nil ((1120 . 1136)) nil (26109 12721 629942 123000) 0 nil])
([nil nil ((1613 . 1621)) nil (26109 12721 629940 950000) 0 nil])
([nil nil ((1621 . 1631)) nil (26109 12721 629939 717000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1630) (undo-tree-id1133 . -1) 1631) nil (26109 12721 629938 182000) 0 nil])
([nil nil ((1630 . 1640)) nil (26109 12721 629935 521000) 0 nil])
([nil nil ((1640 . 1656)) nil (26109 12721 629934 109000) 0 nil])
([nil nil ((#("join(" 0 5 (fontified t)) . -1520) (undo-tree-id1132 . -5) 1525) nil (26109 12721 629932 527000) 0 nil])
([nil nil ((#("b\"\"." 0 1 (fontified t) 1 3 (fontified t face font-lock-string-face) 3 4 (fontified t)) . -1516) (undo-tree-id1131 . -4) 1520) nil (26109 12721 629929 453000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1515) (undo-tree-id1130 . -1) 1516) nil (26109 12721 629926 279000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1515)) nil (26109 12721 629923 2000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 1515)) nil (26109 12721 629921 665000) 0 nil])
([nil nil ((1515 . 1516)) nil (26109 12721 629920 290000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1589) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . 1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) 1590) nil (26109 12721 629918 326000) 0 nil])
([nil nil ((1589 . 1606)) nil (26109 12721 629910 830000) 0 nil])
([nil nil ((#("singl" 0 5 (fontified t)) . -1601) (undo-tree-id1124 . -5) 1606) nil (26109 12721 629909 150000) 0 nil])
([nil nil ((1601 . 1622)) nil (26109 12721 629906 370000) 0 nil])
([nil nil ((1622 . 1627)) nil (26109 12721 629904 931000) 0 nil])
([nil nil ((#("keys" 0 4 (fontified t)) . -1667) (undo-tree-id1123 . -4) 1671) nil (26109 12721 629903 207000) 0 nil])
([nil nil ((#("char_" 0 5 (fontified t)) . -1662) (undo-tree-id1122 . -5) 1667) nil (26109 12721 629900 60000) 0 nil])
([nil nil ((1662 . 1663)) nil (26109 12721 629897 118000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -1662) (undo-tree-id1121 . -1) 1663) nil (26109 12721 629895 157000) 0 nil])
([nil nil ((#("single_" 0 7 (fontified t)) . -1655) (undo-tree-id1120 . -7) 1662) nil (26109 12721 629892 127000) 0 nil])
([nil nil ((1655 . 1658)) nil (26109 12721 629889 235000) 0 nil])
([nil nil ((1658 . 1665)) nil (26109 12721 629888 81000) 0 nil])
([nil nil ((#("keys" 0 4 (fontified t)) . -1692) (undo-tree-id1119 . -4) 1696) nil (26109 12721 629886 342000) 0 nil])
([nil nil ((#("char_" 0 5 (fontified t)) . -1687) (undo-tree-id1118 . -5) 1692) nil (26109 12721 629882 40000) 0 nil])
([nil nil ((#("single_" 0 7 (fontified t)) . -1680) (undo-tree-id1117 . -7) 1687) nil (26109 12721 629878 422000) 0 nil])
([nil nil ((1680 . 1689)) nil (26109 12721 629874 294000) 0 nil])
([nil nil ((1 . 1713) (#("# Challenge 6
# Break repeating-key XOR

from basic_functions import *
from challenge_1 import *
from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from challenge_5 import *


def hamming_dist(s, t):
    dist = 0
    foo = xor_bytes(s, t)
    for x in foo:
        i = 0
        while (x >> i) != 0:
            dist += (x >> i) % 2
            i += 1
    return dist


if __name__ == \"__main__\":
    file_6 = open(\"6.txt\")
    # base64_emsg = \"\".join([x.strip() for x in file_6.readlines()]).encode(
    #     encoding
    # )
    base64_emsg = file_6.read().encode(encoding)
    file_6.close()

    emsg = decode_base64(base64_emsg)
    key_avgs = []

    for keysize_guess in range(2, 40):
        avg = 0
        for n in range(4):
            block_0 = emsg[n * keysize_guess : (n + 1) * keysize_guess]
            block_1 = emsg[(n + 1) * keysize_guess : (n + 2) * keysize_guess]
            avg += hamming_dist(block_0, block_1) / keysize_guess
        avg /= 4
        key_avgs.append([keysize_guess, avg])

    keysizes = [x[0] for x in sorted(key_avgs, key=lambda x: x[1])[:3]]
    key_guesses = []
    for keysize in keysizes:
        print(\"Trying keysize\", keysize)
        blocks = [
            emsg[n * keysize : (n + 1) * keysize]
            for n in range(int(len(emsg) / keysize))
        ]

        transposed_blocks = [
            b\"\".join([block[i].to_bytes(1, \"big\") for block in blocks])
            for i in range(keysize)
        ]

        single_char_keys = [break_single_char_xor(block)[0] for block in transposed_blocks]
        key_guess = b\"\".join(single_char_keys)
        key_guesses.append(key_guess)
        print(key_guess)

        
" 175 179 (fontified t face font-lock-keyword-face) 179 192 (fontified t) 192 198 (fontified t face font-lock-keyword-face) 198 201 (fontified t) 201 202 (fontified t) 202 203 (fontified t) 203 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 219 (fontified t face font-lock-function-name-face) 219 227 (fontified t) 227 231 (fontified t) 231 235 (fontified t face font-lock-variable-name-face) 235 240 (fontified t) 240 244 (fontified t) 244 247 (fontified t face font-lock-variable-name-face) 247 266 (fontified t) 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 276 (fontified t) 276 278 (fontified t face font-lock-keyword-face) 278 284 (fontified t) 284 292 (fontified t) 292 293 (fontified t face font-lock-variable-name-face) 293 298 (fontified t) 298 306 (fontified t) 306 311 (fontified t face font-lock-keyword-face) 311 327 (fontified t) 327 339 (fontified t) 339 343 (fontified t face font-lock-variable-name-face) 343 372 (fontified t) 372 373 (fontified t face font-lock-variable-name-face) 373 383 (fontified t) 383 389 (fontified t face font-lock-keyword-face) 389 397 (fontified t) 397 399 (fontified t face font-lock-keyword-face) 399 400 (fontified t) 400 408 (fontified t face font-lock-builtin-face) 408 412 (fontified t) 412 422 (fontified t face font-lock-string-face) 422 437 (fontified t) 437 441 (fontified t face font-lock-builtin-face) 441 442 (fontified t) 442 449 (fontified t face font-lock-string-face) 449 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 528 (fontified t face font-lock-comment-face) 528 532 (fontified t) 532 538 (fontified t face font-lock-comment-delimiter-face) 538 547 (fontified t face font-lock-comment-face) 547 551 (fontified t) 551 553 (fontified t face font-lock-comment-delimiter-face) 553 555 (fontified t face font-lock-comment-face) 555 685 (fontified t) 685 688 (fontified t face font-lock-keyword-face) 688 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-builtin-face) 711 744 (fontified t) 744 747 (fontified t face font-lock-keyword-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-keyword-face) 752 753 (fontified t) 753 758 (fontified t face font-lock-builtin-face) 758 1064 (fontified t) 1064 1067 (fontified t face font-lock-keyword-face) 1067 1070 (fontified t) 1070 1072 (fontified t face font-lock-keyword-face) 1072 1073 (fontified t) 1073 1079 (fontified t face font-lock-builtin-face) 1079 1094 (fontified t) 1094 1100 (fontified t face font-lock-keyword-face) 1100 1115 (fontified t) 1115 1119 (fontified t) 1119 1130 (fontified t face font-lock-variable-name-face) 1130 1135 (fontified t) 1135 1136 (fontified t) 1136 1140 (fontified t) 1140 1143 (fontified t face font-lock-keyword-face) 1143 1152 (fontified t) 1152 1154 (fontified t face font-lock-keyword-face) 1154 1155 (fontified t) 1155 1163 (fontified t face font-lock-variable-name-face) 1163 1173 (fontified t) 1173 1178 (fontified t face font-lock-builtin-face) 1178 1179 (fontified t) 1179 1195 (fontified t face font-lock-string-face) 1195 1287 (fontified t) 1287 1290 (fontified t face font-lock-keyword-face) 1290 1293 (fontified t) 1293 1295 (fontified t face font-lock-keyword-face) 1295 1296 (fontified t) 1296 1301 (fontified t face font-lock-builtin-face) 1301 1302 (fontified t) 1302 1305 (fontified t face font-lock-builtin-face) 1305 1306 (fontified t) 1306 1309 (fontified t face font-lock-builtin-face) 1309 1347 (fontified t) 1347 1364 (fontified t face font-lock-variable-name-face) 1364 1382 (fontified t) 1382 1384 (fontified t face font-lock-string-face) 1384 1412 (fontified t) 1412 1417 (fontified t face font-lock-string-face) 1417 1419 (fontified t) 1419 1422 (fontified t face font-lock-keyword-face) 1422 1429 (fontified t) 1429 1431 (fontified t face font-lock-keyword-face) 1431 1453 (fontified t) 1453 1456 (fontified t face font-lock-keyword-face) 1456 1459 (fontified t) 1459 1461 (fontified t face font-lock-keyword-face) 1461 1462 (fontified t) 1462 1467 (fontified t face font-lock-builtin-face) 1467 1488 (fontified t) 1488 1496 (fontified t) 1496 1512 (fontified t face font-lock-variable-name-face) 1512 1515 (fontified t) 1515 1548 (fontified t) 1548 1551 (fontified t face font-lock-keyword-face) 1551 1558 (fontified t) 1558 1560 (fontified t face font-lock-keyword-face) 1560 1580 (fontified t) 1580 1588 (fontified t) 1588 1597 (fontified t face font-lock-variable-name-face) 1597 1601 (fontified t) 1601 1603 (fontified t face font-lock-string-face) 1603 1626 (fontified t) 1626 1627 (fontified t) 1627 1665 (fontified t) 1665 1673 (fontified t) 1673 1678 (fontified t face font-lock-builtin-face) 1678 1690 (fontified t) 1690 1700 (fontified t)) . 1) (undo-tree-id1108 . -175) (undo-tree-id1109 . -1514) (undo-tree-id1110 . -1688) (undo-tree-id1111 . -1588) (undo-tree-id1112 . -1514) (undo-tree-id1113 . -1514) (undo-tree-id1114 . -327) (undo-tree-id1115 . -1588) (undo-tree-id1116 . -1665) 1689) nil (26109 12721 629867 623000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -760) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) 761 (t 26109 12721 761197 394000)) nil (26109 12756 321038 68000) 0 nil])
([nil nil ((760 . 761)) nil (26109 12756 321004 577000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -760) (undo-tree-id1138 . -1) 761 (t 26109 12756 439376 205000)) nil (26109 12763 419076 898000) 0 nil])
([nil nil ((760 . 762)) nil (26109 12763 419053 86000) 0 nil])
([nil nil ((762 . 763) (t 26109 12763 562414 442000)) nil (26109 12774 431218 615000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -762) (undo-tree-id1139 . -1) 763 (t 26109 12774 578474 556000)) nil (26109 12783 225160 113000) 0 nil])
([nil nil ((#("10" 0 2 (fontified t)) . -760) (undo-tree-id1140 . -2) 762 (t 26109 12783 381523 434000)) nil (26109 12829 457402 3000) 0 nil])
([nil nil ((760 . 773)) nil (26109 12829 457391 436000) 0 nil])
([nil nil ((773 . 786)) nil (26109 12829 457386 317000) 0 nil])
([nil nil ((#("guess" 0 5 (fontified t)) . -781) (undo-tree-id1145 . -5) 786 (t 26109 12829 603791 806000)) nil (26109 12875 472227 1000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t)) . -773) (undo-tree-id1144 . -8) 781) nil (26109 12875 472224 360000) 0 nil])
([nil nil ((#("emsg) // " 0 9 (fontified t)) . -764) (undo-tree-id1143 . -9) 773) nil (26109 12875 472221 198000) 0 nil])
([nil nil ((#("len(" 0 3 (fontified t face font-lock-builtin-face) 3 4 (fontified t)) . -760) (undo-tree-id1142 . -4) 764) nil (26109 12875 472217 985000) 0 nil])
([nil nil ((760 . 763)) nil (26109 12875 472213 693000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -762) (undo-tree-id1141 . -1) 763) nil (26109 12875 472208 555000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -760) (undo-tree-id1146 . -1) (#("0" 0 1 (fontified t)) . -761) (undo-tree-id1147 . -1) 762 (t 26109 12875 632077 389000)) nil (26109 12882 738905 282000) 0 nil])
([nil nil ((760 . 762)) nil (26109 12882 738891 366000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -760) (undo-tree-id1148 . -1) (#("0" 0 1 (fontified t)) . -761) (undo-tree-id1149 . -1) 762 (t 26109 12882 881123 930000)) nil (26109 12910 289060 141000) 0 nil])
([nil nil ((760 . 762)) nil (26109 12910 289043 828000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -760) (undo-tree-id1151 . -1) (#("1" 0 1 (fontified t)) . -761) (undo-tree-id1152 . -1) 762 (t 26109 12910 439304 539000)) nil (26109 12956 397524 700000) 0 nil])
([nil nil ((760 . 772)) nil (26109 12956 397519 984000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -771) (undo-tree-id1150 . -1) 772) nil (26109 12956 397517 606000) 0 nil])
([nil nil ((771 . 786)) nil (26109 12956 397504 27000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -1137) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) 1138 (t 26109 12956 541619 42000)) nil (26109 12968 662217 173000) 0 nil])
([nil nil ((1137 . 1139)) nil (26109 12968 662203 49000) 0 nil])
([nil nil ((#("guess" 0 5 (fontified t)) . -781) (undo-tree-id1157 . -5) (undo-tree-id1158 . -5) 786 (t 26109 12968 813705 225000)) nil (26109 13025 149585 202000) 0 nil])
([nil nil ((#("keysize_" 0 8 (fontified t)) . -773) (undo-tree-id1155 . -8) (undo-tree-id1156 . -8) 781) nil (26109 13025 149580 587000) 0 nil])
([nil nil ((773 . 775)) nil (26109 13025 149566 619000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -1009) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) 1010 (t 26109 13025 295114 299000)) nil (26109 13060 169524 418000) 0 nil])
([nil nil ((1009 . 1021)) nil (26109 13060 169517 840000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1020) (undo-tree-id1161 . -1) 1021) nil (26109 13060 169515 859000) 0 nil])
([nil nil ((1020 . 1035)) nil (26109 13060 169511 850000) 0 nil])
([nil nil ((#("40" 0 2 (fontified t)) . -773) (undo-tree-id1160 . -2) 775) nil (26109 13060 169509 792000) 0 nil])
([nil nil ((773 . 775)) nil (26109 13060 169505 160000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -774) (undo-tree-id1159 . -1) 775) nil (26109 13060 169501 529000) 0 nil])
([nil nil ((774 . 786)) nil (26109 13060 169483 360000) 0 nil])
([nil nil ((736 . 745) (t 26109 13060 310377 473000)) nil (26109 13087 855468 881000) 0 nil])
([nil nil ((745 . 748)) nil (26109 13087 855467 802000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face font-lock-comment-face)) . -747) (undo-tree-id1167 . -1) 748) nil (26109 13087 855466 312000) 0 nil])
([nil nil ((747 . 750)) nil (26109 13087 855463 737000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-comment-face)) . -747) (undo-tree-id1164 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -748) (undo-tree-id1165 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -749) (undo-tree-id1166 . -1) 750) nil (26109 13087 855461 468000) 0 nil])
([nil nil ((747 . 757)) nil (26109 13087 855449 245000) 0 nil])
([nil nil ((757 . 778)) nil (26109 13087 855447 673000) 0 nil])
([nil nil ((778 . 782)) nil (26109 13116 484650 130000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1208) (undo-tree-id1180 . -1) (#("0" 0 1 (fontified t)) . -1209) (undo-tree-id1181 . -1) 1210) nil (26109 13118 835234 161000) 0 nil] [nil nil ((#(":" 0 1 (fontified t)) . -1207) (undo-tree-id1168 . -1) (#("1" 0 1 (fontified t)) . -1208) (undo-tree-id1169 . -1) (#("0" 0 1 (fontified t)) . -1209) (undo-tree-id1170 . -1) (#("]" 0 1 (fontified t)) . -1210) (undo-tree-id1171 . -1) (undo-tree-id1172 . 1) (undo-tree-id1173 . -1) (#("]" 0 1 (fontified t)) . -1211) (undo-tree-id1174 . -1) (undo-tree-id1175 . 1) (undo-tree-id1176 . -1) 1212 (t 26109 13087 998590 370000)) ((1207 . 1212)) (26109 13116 293771 173000) 0 nil])
([nil current ((1208 . 1209)) nil (26109 13118 835219 949000) 0 nil])
([nil nil ((1207 . 1209)) ((#("0]" 0 2 (fontified t)) . 1207) (undo-tree-id1177 . -2) (undo-tree-id1178 . 1) (undo-tree-id1179 . -2) (t 26109 13115 103802 658000)) (26109 13114 953651 108000) 0 nil])
nil
nil
