(undo-tree-save-format-version . 1)
"177858effb32caba602f19a813098c3370c5fd08"
[nil nil nil nil (26109 2348 800179 772000) 0 nil]
([nil nil ((1 . 5) (t . -1)) nil (26109 2348 800178 391000) 0 nil])
([nil nil ((5 . 19)) nil (26109 2348 800177 252000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -18) (undo-tree-id18 . -1) 19) nil (26109 2348 800176 328000) 0 nil])
([nil nil ((18 . 28)) nil (26109 2348 800174 520000) 0 nil])
([nil nil ((28 . 29)) nil (26109 2348 800173 686000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -28) (undo-tree-id17 . -1) 29) nil (26109 2348 800172 626000) 0 nil])
([nil nil ((28 . 33)) nil (26109 2348 800170 892000) 0 nil])
([nil nil ((33 . 38)) nil (26109 2348 800170 109000) 0 nil])
([nil nil ((38 . 47)) nil (26109 2348 800169 320000) 0 nil])
([nil nil ((#("in " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -44) (undo-tree-id16 . -3) 47) nil (26109 2348 800168 356000) 0 nil])
([nil nil ((#("x " 0 2 (fontified t)) . -42) (undo-tree-id15 . -2) 44) nil (26109 2348 800166 401000) 0 nil])
([nil nil ((42 . 62)) nil (26109 2348 800164 446000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -61) (undo-tree-id14 . -1) 62) nil (26109 2348 800163 464000) 0 nil])
([nil nil ((61 . 63)) nil (26109 2348 800161 653000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -61) (undo-tree-id12 . -1) (#(":" 0 1 (fontified t)) . -62) (undo-tree-id13 . -1) 63) nil (26109 2348 800160 315000) 0 nil])
([nil nil ((61 . 63)) nil (26109 2348 800156 190000) 0 nil])
([nil nil ((63 . 72)) nil (26109 2348 800155 353000) 0 nil])
([nil nil ((72 . 76)) nil (26109 2348 800154 558000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -75) (undo-tree-id11 . -1) 76) nil (26109 2348 800153 523000) 0 nil])
([nil nil ((#("pri" 0 3 (fontified t)) . -72) (undo-tree-id10 . -3) 75) nil (26109 2348 800151 470000) 0 nil])
([nil nil ((33 . 38)) nil (26109 2348 800149 499000) 0 nil])
([nil nil ((38 . 40)) nil (26109 2348 800148 780000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -39) (undo-tree-id9 . -1) 40) nil (26109 2348 800147 729000) 0 nil])
([nil nil ((39 . 46)) nil (26109 2348 800116 695000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -45) (undo-tree-id8 . -1) 46) nil (26109 2348 800115 744000) 0 nil])
([nil nil ((45 . 48)) nil (26109 2348 800114 82000) 0 nil])
([nil nil ((87 . 101)) nil (26109 2348 800113 358000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -100) (undo-tree-id7 . -1) 101) nil (26109 2348 800112 362000) 0 nil])
([nil nil ((100 . 104)) nil (26109 2348 800110 565000) 0 nil])
([nil nil ((104 . 105)) nil (26109 2348 800109 637000) 0 nil])
([nil nil ((105 . 118)) nil (26109 2348 800108 861000) 0 nil])
([nil nil ((#("^" 0 1 (fontified t)) . -116) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t)) . -117) (undo-tree-id6 . -1) 118) nil (26109 2348 800107 740000) 0 nil])
([nil nil ((116 . 118)) nil (26109 2348 800104 616000) 0 nil])
([nil nil ((118 . 128)) nil (26109 2348 800103 788000) 0 nil])
([nil nil ((128 . 137)) nil (26109 2348 800102 971000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -133) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) 137) nil (26109 2348 800101 673000) 0 nil])
([nil nil ((133 . 137)) nil (26109 2348 800096 537000) 0 nil])
([nil nil ((#("reut" 0 4 (fontified t)) . -133) (undo-tree-id0 . -4) 137) nil (26109 2348 800094 794000) 0 nil])
([nil nil ((133 . 142)) nil (26109 2348 800083 156000) 0 nil])
([nil nil ((142 . 144)) nil (26109 2348 800081 661000) 0 nil])
([nil nil ((144 . 145)) nil (26109 2348 800076 976000) 0 nil])
([nil nil ((48 . 53) (t 26109 2348 953620 589000)) nil (26109 2425 74793 337000) 0 nil])
([nil nil ((53 . 55)) nil (26109 2425 74792 262000) 0 nil])
([nil nil ((55 . 64)) nil (26109 2425 74791 420000) 0 nil])
([nil nil ((#("msg " 0 4 (fontified t)) . -60) (undo-tree-id27 . -4) 64) nil (26109 2425 74790 298000) 0 nil])
([nil nil ((60 . 75)) nil (26109 2425 74788 237000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -73) (undo-tree-id25 . -1) (#(" " 0 1 (fontified t)) . -74) (undo-tree-id26 . -1) 75) nil (26109 2425 74786 852000) 0 nil])
([nil nil ((#("msg" 0 3 (fontified t)) . -70) (undo-tree-id24 . -3) 73) nil (26109 2425 74783 756000) 0 nil])
([nil nil ((#("bytes(" 0 6 (fontified t)) . -64) (undo-tree-id23 . -6) 70) nil (26109 2425 74781 293000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t)) . -60) (undo-tree-id22 . -4) 64) nil (26109 2425 74779 320000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . -53) (undo-tree-id21 . -7) 60) nil (26109 2425 74777 8000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -49) (undo-tree-id20 . -4) 53) nil (26109 2425 74773 905000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -48) (undo-tree-id19 . -1) 49) nil (26109 2425 74768 289000) 0 nil])
([nil nil ((108 . 111) (t 26109 2425 205334 766000)) nil (26109 2439 578734 578000) 0 nil])
([nil nil ((105 . 111) (t 26109 2439 751121 331000)) nil (26109 2593 518749 727000) 0 nil])
([nil nil ((117 . 118)) nil (26109 2593 518748 760000) 0 nil])
([nil nil ((120 . 126)) nil (26109 2593 518747 893000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -141) (undo-tree-id40 . -1) (undo-tree-id41 . 1) (undo-tree-id42 . -1) (#("]" 0 1 (fontified t)) . -142) (undo-tree-id43 . -1) (undo-tree-id44 . 1) (undo-tree-id45 . -1) (#(")" 0 1 (fontified t)) . -143) (undo-tree-id46 . -1) (undo-tree-id47 . 1) (undo-tree-id48 . -1) 144) nil (26109 2593 518746 227000) 0 nil])
([nil nil ((141 . 144)) nil (26109 2593 518738 269000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -141) (undo-tree-id31 . -1) (undo-tree-id32 . 1) (undo-tree-id33 . -1) (#(")" 0 1 (fontified t)) . -142) (undo-tree-id34 . -1) (undo-tree-id35 . 1) (undo-tree-id36 . -1) (#(")" 0 1 (fontified t)) . -143) (undo-tree-id37 . -1) (undo-tree-id38 . 1) (undo-tree-id39 . -1) 144) nil (26109 2593 518736 458000) 0 nil])
([nil nil ((141 . 143)) nil (26109 2593 518727 349000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -142) (undo-tree-id28 . -1) (undo-tree-id29 . 1) (undo-tree-id30 . -1) 143) nil (26109 2593 518724 942000) 0 nil])
([nil nil ((142 . 145)) nil (26109 2593 518710 445000) 0 nil])
([nil nil ((162 . 163) (t 26109 2593 673566 887000)) nil (26109 2632 133160 600000) 0 nil])
([nil nil ((1 . 22)) nil (26109 2632 133159 637000) 0 nil])
([nil nil ((22 . 26)) nil (26109 2632 133158 866000) 0 nil])
([nil nil ((26 . 27)) nil (26109 2632 133158 102000) 0 nil])
([nil nil ((nil rear-nonsticky nil 52 . 53) (nil fontified nil 50 . 53) (nil fontified nil 44 . 50) (nil fontified nil 31 . 44) (nil fontified nil 27 . 31) (27 . 53)) nil (26109 2632 133157 137000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78 . 79) (nil fontified nil 76 . 79) (nil fontified nil 70 . 76) (nil fontified nil 57 . 70) (nil fontified nil 53 . 57) (53 . 79)) nil (26109 2632 133155 198000) 0 nil])
([nil nil ((79 . 80)) nil (26109 2632 133153 576000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -42) (undo-tree-id74 . -1) 43) nil (26109 2632 133152 589000) 0 nil])
([nil nil ((42 . 43)) nil (26109 2632 133150 699000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -68) (undo-tree-id73 . -1) 69) nil (26109 2632 133149 503000) 0 nil])
([nil nil ((68 . 69)) nil (26109 2632 133147 73000) 0 nil])
([nil nil ((1 . 242) (#("from challenge_2 import *
from challenge_3 import *
from challenge_4 import *

def repeating_key_xor(msg, key):
    emsg = b\"\"
    for i in range(len(msg)):
        emsg += xor_bytes(bytes(msg[i]), bytes(key[i % len(key)]))
    return emsg

" 0 4 (fontified t face font-lock-keyword-face) 4 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 51 (fontified t) 51 52 (fontified t rear-nonsticky t) 52 56 (fontified t face font-lock-keyword-face) 56 69 (fontified t) 69 75 (fontified t face font-lock-keyword-face) 75 77 (fontified t) 77 78 (fontified t rear-nonsticky t) 78 79 (fontified t) 79 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 100 (fontified t face font-lock-function-name-face) 100 112 (fontified t) 112 116 (fontified t) 116 120 (fontified t face font-lock-variable-name-face) 120 124 (fontified t) 124 126 (fontified t face font-lock-string-face) 126 127 (fontified t) 127 131 (fontified t) 131 134 (fontified t face font-lock-keyword-face) 134 137 (fontified t) 137 139 (fontified t face font-lock-keyword-face) 139 140 (fontified t) 140 145 (fontified t face font-lock-builtin-face) 145 146 (fontified t) 146 149 (fontified t face font-lock-builtin-face) 149 157 (fontified t) 157 165 (fontified t) 165 169 (fontified t face font-lock-variable-name-face) 169 183 (fontified t) 183 188 (fontified t face font-lock-builtin-face) 188 198 (fontified t) 198 203 (fontified t face font-lock-builtin-face) 203 212 (fontified t) 212 215 (fontified t face font-lock-builtin-face) 215 224 (fontified t) 224 228 (fontified t) 228 234 (fontified t face font-lock-keyword-face) 234 239 (fontified t) 239 240 (fontified t) 240 241 (fontified t)) . 1) (undo-tree-id49 . -68) (undo-tree-id50 . -52) (undo-tree-id51 . -240) (undo-tree-id52 . -192) (undo-tree-id53 . -240) (undo-tree-id54 . -223) (undo-tree-id55 . -240) (undo-tree-id56 . -241) (undo-tree-id57 . -116) (undo-tree-id58 . -116) (undo-tree-id59 . -123) (undo-tree-id60 . -26) (undo-tree-id61 . -116) (undo-tree-id62 . -116) (undo-tree-id63 . -123) (undo-tree-id64 . 163) (undo-tree-id65 . -79) (undo-tree-id66 . -52) (undo-tree-id67 . -52) (undo-tree-id68 . -79) (undo-tree-id69 . -52) (undo-tree-id70 . -116) (undo-tree-id71 . -116) (undo-tree-id72 . -123) 69) nil (26109 2632 133141 927000) 0 nil])
([nil nil ((242 . 243) (t 26109 2632 321185 13000)) nil (26109 2666 48119 332000) 0 nil])
([nil nil ((243 . 253)) nil (26109 2666 48118 382000) 0 nil])
([nil nil ((253 . 258)) nil (26109 2666 48117 650000) 0 nil])
([nil nil ((258 . 259)) nil (26109 2666 48116 976000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -258) (undo-tree-id175 . -1) 259) nil (26109 2666 48116 47000) 0 nil])
([nil nil ((258 . 259)) nil (26109 2666 48114 397000) 0 nil])
([nil nil ((nil rear-nonsticky nil 332 . 333) (nil fontified nil 259 . 333) (259 . 333)) nil (26109 2666 48113 545000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-string-face)) . -301) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 302) nil (26109 2666 48112 74000) 0 nil])
([nil nil ((301 . 303)) nil (26109 2666 48109 542000) 0 nil])
([nil nil ((334 . 336)) nil (26109 2666 48108 867000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -335) (undo-tree-id172 . -1) 336) nil (26109 2666 48107 726000) 0 nil])
([nil nil ((335 . 336)) nil (26109 2666 48105 557000) 0 nil])
([nil nil ((336 . 337)) nil (26109 2666 48104 685000) 0 nil])
([nil nil ((258 . 259)) nil (26109 2666 48103 466000) 0 nil])
([nil nil ((1 . 332) (#("from challenge_2 import *
from challenge_3 import *
from challenge_4 import *


def repeating_key_xor(msg, key):
    emsg = b\"\"
    for i in range(len(msg)):
        emsg += xor_bytes(bytes(msg[i]), bytes(key[i % len(key)]))
    return emsg

string = \\
    b\"Burning 'em, if you ain't quick and nimble\\nI go crazy when I hear a cymbal\"

" 0 4 (fontified t face font-lock-keyword-face) 4 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 52 (fontified t) 52 56 (fontified t face font-lock-keyword-face) 56 69 (fontified t) 69 75 (fontified t face font-lock-keyword-face) 75 80 (fontified t) 80 83 (fontified t face font-lock-keyword-face) 83 84 (fontified t) 84 101 (fontified t face font-lock-function-name-face) 101 117 (fontified t) 117 121 (fontified t face font-lock-variable-name-face) 121 125 (fontified t) 125 127 (fontified t face font-lock-string-face) 127 132 (fontified t) 132 135 (fontified t face font-lock-keyword-face) 135 138 (fontified t) 138 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 146 (fontified t face font-lock-builtin-face) 146 147 (fontified t) 147 150 (fontified t face font-lock-builtin-face) 150 166 (fontified t) 166 170 (fontified t face font-lock-variable-name-face) 170 184 (fontified t) 184 189 (fontified t face font-lock-builtin-face) 189 199 (fontified t) 199 204 (fontified t face font-lock-builtin-face) 204 213 (fontified t) 213 216 (fontified t face font-lock-builtin-face) 216 229 (fontified t) 229 235 (fontified t face font-lock-keyword-face) 235 241 (fontified t) 241 242 (fontified t) 242 248 (fontified t face font-lock-variable-name-face) 248 253 (fontified t) 253 258 (fontified t) 258 259 (fontified t face font-lock-string-face) 259 333 (fontified t face font-lock-string-face) 333 334 (rear-nonsticky t fontified t face font-lock-string-face) 334 335 (fontified t face font-lock-string-face) 335 336 (fontified t) 336 337 (fontified t)) . 1) (undo-tree-id75 . -336) (undo-tree-id76 . -259) (undo-tree-id77 . 96) (undo-tree-id78 . -242) (undo-tree-id79 . -229) (undo-tree-id80 . -229) (undo-tree-id81 . -242) (undo-tree-id82 . 85) (undo-tree-id83 . -252) (undo-tree-id84 . -252) (undo-tree-id85 . -252) (undo-tree-id86 . -252) (undo-tree-id87 . -252) (undo-tree-id88 . -251) (undo-tree-id89 . -252) (undo-tree-id90 . -242) (undo-tree-id91 . -242) (undo-tree-id92 . -252) (undo-tree-id93 . -242) (undo-tree-id94 . -242) (undo-tree-id95 . -242) (undo-tree-id96 . -251) (undo-tree-id97 . -252) (undo-tree-id98 . -242) (undo-tree-id99 . -242) (undo-tree-id100 . -242) (undo-tree-id101 . -251) (undo-tree-id102 . -68) (undo-tree-id103 . -252) (undo-tree-id104 . -242) (undo-tree-id105 . -242) (undo-tree-id106 . -242) (undo-tree-id107 . -251) (undo-tree-id108 . -252) (undo-tree-id109 . -242) (undo-tree-id110 . -242) (undo-tree-id111 . -242) (undo-tree-id112 . -251) (undo-tree-id113 . -252) (undo-tree-id114 . -242) (undo-tree-id115 . -242) (undo-tree-id116 . -242) (undo-tree-id117 . -251) (undo-tree-id118 . -252) (undo-tree-id119 . -242) (undo-tree-id120 . -242) (undo-tree-id121 . -242) (undo-tree-id122 . -251) (undo-tree-id123 . -252) (undo-tree-id124 . -242) (undo-tree-id125 . -242) (undo-tree-id126 . -242) (undo-tree-id127 . -251) (undo-tree-id128 . -252) (undo-tree-id129 . -242) (undo-tree-id130 . -242) (undo-tree-id131 . -242) (undo-tree-id132 . -251) (undo-tree-id133 . -252) (undo-tree-id134 . -242) (undo-tree-id135 . -242) (undo-tree-id136 . -242) (undo-tree-id137 . -251) (undo-tree-id138 . 2) (undo-tree-id139 . -336) (undo-tree-id140 . -252) (undo-tree-id141 . -242) (undo-tree-id142 . -242) (undo-tree-id143 . -242) (undo-tree-id144 . -336) (undo-tree-id145 . -252) (undo-tree-id146 . -242) (undo-tree-id147 . -242) (undo-tree-id148 . -242) (undo-tree-id149 . -251) (undo-tree-id150 . 1) (undo-tree-id151 . -337) (undo-tree-id152 . -252) (undo-tree-id153 . -242) (undo-tree-id154 . -242) (undo-tree-id155 . -242) (undo-tree-id156 . -337) (undo-tree-id157 . -252) (undo-tree-id158 . -252) (undo-tree-id159 . -252) (undo-tree-id160 . -252) (undo-tree-id161 . -252) (undo-tree-id162 . -251) (undo-tree-id163 . -252) (undo-tree-id164 . -242) (undo-tree-id165 . -242) (undo-tree-id166 . -252) (undo-tree-id167 . -242) (undo-tree-id168 . -242) (undo-tree-id169 . -242) (undo-tree-id170 . -251) (undo-tree-id171 . -336) 337) nil (26109 2666 48095 467000) 0 nil])
([nil nil ((331 . 332) (t 26109 2666 181538 629000)) nil (26109 2692 351506 586000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -331) (undo-tree-id176 . -1) 332) nil (26109 2692 351505 198000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil face font-lock-string-face)) . 315) (314 . 315) (331 . 332)) nil (26109 2692 351495 918000) 0 nil])
([nil nil ((314 . 315)) nil (26109 2695 693702 308000) 0 nil])
([nil nil ((310 . 311)) nil (26109 2701 771371 576000) 0 nil] [nil nil ((#(" " 0 1 (fontified nil face font-lock-string-face)) . 310) (309 . 310) (315 . 316)) ((#(" " 0 1 (fontified nil face font-lock-string-face)) . 315) (undo-tree-id179 . -1) (#("
" 0 1 (fontified t face font-lock-string-face)) . 309) (undo-tree-id180 . -1) (310 . 311)) (26109 2695 693626 511000) 0 nil] [nil nil ((#(" " 0 1 (fontified nil face font-lock-string-face)) . 314) (314 . 316)) ((#(" 
" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 314) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (314 . 315)) (26109 2692 351488 236000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . -315) (undo-tree-id214 . -1) 316) nil (26109 2701 771370 426000) 0 nil])
nil
nil
([nil nil ((311 . 312)) nil (26109 2701 771368 317000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-string-face)) . 316)) nil (26109 2701 771367 257000) 0 nil])
([nil nil ((316 . 317)) nil (26109 2701 771365 879000) 0 nil])
([nil nil ((1 . 334) (#("from challenge_2 import *
from challenge_3 import *
from challenge_4 import *


def repeating_key_xor(msg, key):
    emsg = b\"\"
    for i in range(len(msg)):
        emsg += xor_bytes(bytes(msg[i]), bytes(key[i % len(key)]))
    return emsg


string = b\"Burning 'em, if you ain't quick and nimble\\nI go crazy \\
when I hear a cymbal\"

" 0 4 (fontified t face font-lock-keyword-face) 4 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 52 (fontified t) 52 56 (fontified t face font-lock-keyword-face) 56 69 (fontified t) 69 75 (fontified t face font-lock-keyword-face) 75 80 (fontified t) 80 83 (fontified t face font-lock-keyword-face) 83 84 (fontified t) 84 101 (fontified t face font-lock-function-name-face) 101 117 (fontified t) 117 121 (fontified t face font-lock-variable-name-face) 121 125 (fontified t) 125 127 (fontified t face font-lock-string-face) 127 132 (fontified t) 132 135 (fontified t face font-lock-keyword-face) 135 138 (fontified t) 138 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 146 (fontified t face font-lock-builtin-face) 146 147 (fontified t) 147 150 (fontified t face font-lock-builtin-face) 150 166 (fontified t) 166 170 (fontified t face font-lock-variable-name-face) 170 184 (fontified t) 184 189 (fontified t face font-lock-builtin-face) 189 199 (fontified t) 199 204 (fontified t face font-lock-builtin-face) 204 213 (fontified t) 213 216 (fontified t face font-lock-builtin-face) 216 229 (fontified t) 229 235 (fontified t face font-lock-keyword-face) 235 243 (fontified t) 243 249 (fontified t face font-lock-variable-name-face) 249 253 (fontified t) 253 308 (fontified t face font-lock-string-face) 308 311 (fontified t face font-lock-string-face) 311 316 (fontified t face font-lock-string-face) 316 332 (fontified t face font-lock-string-face) 332 333 (fontified t) 333 334 (fontified t)) . 1) (undo-tree-id181 . -333) (undo-tree-id182 . -332) (undo-tree-id183 . -316) (undo-tree-id184 . -315) (undo-tree-id185 . -243) (undo-tree-id186 . -243) (undo-tree-id187 . -252) (undo-tree-id188 . -243) (undo-tree-id189 . -243) (undo-tree-id190 . -252) (undo-tree-id191 . -243) (undo-tree-id192 . -243) (undo-tree-id193 . -252) (undo-tree-id194 . -243) (undo-tree-id195 . -243) (undo-tree-id196 . -252) (undo-tree-id197 . 24) (undo-tree-id198 . -243) (undo-tree-id199 . -243) (undo-tree-id200 . -243) (undo-tree-id201 . -252) (undo-tree-id202 . -243) (undo-tree-id203 . -243) (undo-tree-id204 . -243) (undo-tree-id205 . -243) (undo-tree-id206 . -252) (undo-tree-id207 . -243) (undo-tree-id208 . -243) (undo-tree-id209 . -252) (undo-tree-id210 . -311) (undo-tree-id211 . -243) (undo-tree-id212 . -243) (undo-tree-id213 . -252) 317) nil (26109 2701 771360 32000) 0 nil])
([nil nil ((334 . 335) (t 26109 2701 914074 967000)) nil (26109 2748 59329 254000) 0 nil])
([nil nil ((334 . 335)) nil (26109 2748 59328 264000) 0 nil])
([nil nil ((335 . 344)) nil (26109 2748 59327 527000) 0 nil])
([nil nil ((#("in " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -341) (undo-tree-id219 . -3) 344) nil (26109 2748 59326 578000) 0 nil])
([nil nil ((#("x " 0 2 (fontified t)) . -339) (undo-tree-id218 . -2) 341) nil (26109 2748 59324 557000) 0 nil])
([nil nil ((#("for " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -335) (undo-tree-id217 . -4) 339) nil (26109 2748 59322 341000) 0 nil])
([nil nil ((335 . 356)) nil (26109 2748 59320 221000) 0 nil])
([nil nil ((356 . 369)) nil (26109 2748 59319 431000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -367) (undo-tree-id215 . -1) (#("I" 0 1 (fontified t face font-lock-string-face)) . -368) (undo-tree-id216 . -1) 369) nil (26109 2748 59317 628000) 0 nil])
([nil nil ((367 . 369)) nil (26109 2748 59307 101000) 0 nil])
([nil nil ((369 . 375)) nil (26109 2748 59302 863000) 0 nil])
([nil nil ((79 . 100) (t 26109 2748 291436 155000)) nil (26109 2756 888057 932000) 0 nil])
([nil nil ((100 . 105)) nil (26109 2756 888056 854000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -102) (undo-tree-id224 . -1) (#("p" 0 1 (fontified t)) . -103) (undo-tree-id225 . -1) (#("o" 0 1 (fontified t)) . -104) (undo-tree-id226 . -1) 105) nil (26109 2756 888054 778000) 0 nil])
([nil nil ((102 . 106)) nil (26109 2756 888048 945000) 0 nil])
([nil nil ((106 . 108)) nil (26109 2756 888047 459000) 0 nil])
([nil nil ((1 . 406) (#("from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from basic_functions import *

def repeating_key_xor(msg, key):
    emsg = b\"\"
    for i in range(len(msg)):
        emsg += xor_bytes(bytes(msg[i]), bytes(key[i % len(key)]))
    return emsg


string = b\"Burning 'em, if you ain't quick and nimble\\nI go crazy \\
when I hear a cymbal\"

print(repeating_key_xor(string, b\"ICE\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 52 (fontified t) 52 56 (fontified t face font-lock-keyword-face) 56 69 (fontified t) 69 75 (fontified t face font-lock-keyword-face) 75 78 (fontified t) 78 82 (fontified t face font-lock-keyword-face) 82 99 (fontified t) 99 105 (fontified t face font-lock-keyword-face) 105 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 112 (fontified t face font-lock-keyword-face) 112 113 (fontified t) 113 130 (fontified t face font-lock-function-name-face) 130 146 (fontified t) 146 150 (fontified t face font-lock-variable-name-face) 150 154 (fontified t) 154 156 (fontified t face font-lock-string-face) 156 161 (fontified t) 161 164 (fontified t face font-lock-keyword-face) 164 167 (fontified t) 167 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t) 170 175 (fontified t face font-lock-builtin-face) 175 176 (fontified t) 176 179 (fontified t face font-lock-builtin-face) 179 195 (fontified t) 195 199 (fontified t face font-lock-variable-name-face) 199 213 (fontified t) 213 218 (fontified t face font-lock-builtin-face) 218 228 (fontified t) 228 233 (fontified t face font-lock-builtin-face) 233 242 (fontified t) 242 245 (fontified t face font-lock-builtin-face) 245 258 (fontified t) 258 264 (fontified t face font-lock-keyword-face) 264 272 (fontified t) 272 278 (fontified t face font-lock-variable-name-face) 278 282 (fontified t) 282 361 (fontified t face font-lock-string-face) 361 362 (fontified t) 362 363 (fontified t) 363 368 (fontified t face font-lock-builtin-face) 368 387 (fontified t) 387 396 (fontified t) 396 401 (fontified t face font-lock-string-face) 401 403 (fontified t) 403 404 (fontified t)) . 1) (undo-tree-id220 . -403) (undo-tree-id221 . -107) (undo-tree-id222 . -403) (undo-tree-id223 . -78) 108) nil (26109 2756 888042 71000) 0 nil])
([nil nil ((#("bytes(" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t)) . -215) (undo-tree-id330 . -6) (undo-tree-id331 . -6) 221 (t 26109 2757 98082 257000)) nil (26109 2803 831491 711000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -221) (undo-tree-id327 . -1) (undo-tree-id328 . 1) (undo-tree-id329 . -1) 222) nil (26109 2803 831488 558000) 0 nil])
([nil nil ((221 . 240)) nil (26109 2803 831470 231000) 0 nil])
([nil nil ((#("bytes(" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t)) . -242) (undo-tree-id326 . -6) 248) nil (26109 2803 831469 316000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -258) (undo-tree-id317 . -1) (undo-tree-id318 . 1) (undo-tree-id319 . -1) (#(")" 0 1 (fontified t)) . -259) (undo-tree-id320 . -1) (undo-tree-id321 . 1) (undo-tree-id322 . -1) (#(")" 0 1 (fontified t)) . -260) (undo-tree-id323 . -1) (undo-tree-id324 . 1) (undo-tree-id325 . -1) 261) nil (26109 2803 831466 802000) 0 nil])
([nil nil ((250 . 307) (#(" " 0 1 (fontified nil)) . 250) (249 . 250) (258 . 271)) nil (26109 2803 831458 600000) 0 nil])
([nil nil ((328 . 331)) nil (26109 2803 831457 224000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-string-face)) . -329) (undo-tree-id315 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -330) (undo-tree-id316 . -1) 331) nil (26109 2803 831455 911000) 0 nil])
([nil nil ((329 . 335)) nil (26109 2803 831453 162000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -334) (undo-tree-id312 . -1) (undo-tree-id313 . 1) (undo-tree-id314 . -1) 335) nil (26109 2803 831451 405000) 0 nil])
([nil nil ((1 . 450) (#("from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from basic_functions import *


def repeating_key_xor(msg, key):
    emsg = b\"\"
    for i in range(len(msg)):
        emsg += xor_bytes(msg[i].to_bytes(1, \"big\"), key[i %
                                                         len(key)].to_bytes1, \"big\")
    return emsg


string = b\"Burning 'em, if you ain't quick and nimble\\nI go crazy \\
when I hear a cymbal\"

print(repeating_key_xor(string, b\"ICE\"))
" 0 4 (fontified t face font-lock-keyword-face) 4 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 52 (fontified t) 52 56 (fontified t face font-lock-keyword-face) 56 69 (fontified t) 69 75 (fontified t face font-lock-keyword-face) 75 78 (fontified t) 78 82 (fontified t face font-lock-keyword-face) 82 99 (fontified t) 99 105 (fontified t face font-lock-keyword-face) 105 110 (fontified t) 110 113 (fontified t face font-lock-keyword-face) 113 114 (fontified t) 114 131 (fontified t face font-lock-function-name-face) 131 147 (fontified t) 147 151 (fontified t face font-lock-variable-name-face) 151 155 (fontified t) 155 157 (fontified t face font-lock-string-face) 157 162 (fontified t) 162 165 (fontified t face font-lock-keyword-face) 165 168 (fontified t) 168 170 (fontified t face font-lock-keyword-face) 170 171 (fontified t) 171 176 (fontified t face font-lock-builtin-face) 176 177 (fontified t) 177 180 (fontified t face font-lock-builtin-face) 180 188 (fontified t) 188 196 (fontified t) 196 200 (fontified t face font-lock-variable-name-face) 200 214 (fontified t) 214 233 (fontified t) 233 238 (fontified t face font-lock-string-face) 238 239 (fontified t) 239 241 (fontified t) 241 249 (fontified t) 249 306 (fontified t) 306 309 (fontified t face font-lock-builtin-face) 309 327 (fontified t) 327 332 (fontified t face font-lock-string-face) 332 333 (fontified t) 333 334 (fontified t) 334 338 (fontified t) 338 344 (fontified t face font-lock-keyword-face) 344 352 (fontified t) 352 358 (fontified t face font-lock-variable-name-face) 358 362 (fontified t) 362 441 (fontified t face font-lock-string-face) 441 443 (fontified t) 443 448 (fontified t face font-lock-builtin-face) 448 476 (fontified t) 476 481 (fontified t face font-lock-string-face) 481 484 (fontified t)) . 1) (undo-tree-id227 . -333) (undo-tree-id228 . -187) (undo-tree-id229 . -214) (undo-tree-id230 . -204) (undo-tree-id231 . -196) (undo-tree-id232 . -196) (undo-tree-id233 . -196) (undo-tree-id234 . -196) (undo-tree-id235 . -204) (undo-tree-id236 . -196) (undo-tree-id237 . -196) (undo-tree-id238 . -196) (undo-tree-id239 . -204) (undo-tree-id240 . -196) (undo-tree-id241 . -196) (undo-tree-id242 . -196) (undo-tree-id243 . -204) (undo-tree-id244 . -196) (undo-tree-id245 . -196) (undo-tree-id246 . -196) (undo-tree-id247 . -204) (undo-tree-id248 . -196) (undo-tree-id249 . -196) (undo-tree-id250 . -196) (undo-tree-id251 . -204) (undo-tree-id252 . -196) (undo-tree-id253 . -196) (undo-tree-id254 . -196) (undo-tree-id255 . -204) (undo-tree-id256 . -196) (undo-tree-id257 . -196) (undo-tree-id258 . -196) (undo-tree-id259 . -204) (undo-tree-id260 . -196) (undo-tree-id261 . -196) (undo-tree-id262 . -196) (undo-tree-id263 . -204) (undo-tree-id264 . -196) (undo-tree-id265 . -196) (undo-tree-id266 . -196) (undo-tree-id267 . -204) (undo-tree-id268 . -196) (undo-tree-id269 . -196) (undo-tree-id270 . -196) (undo-tree-id271 . -204) (undo-tree-id272 . -196) (undo-tree-id273 . -196) (undo-tree-id274 . -196) (undo-tree-id275 . -204) (undo-tree-id276 . -196) (undo-tree-id277 . -196) (undo-tree-id278 . -196) (undo-tree-id279 . -204) (undo-tree-id280 . -196) (undo-tree-id281 . -196) (undo-tree-id282 . -196) (undo-tree-id283 . -204) (undo-tree-id284 . 152) (undo-tree-id285 . -333) (undo-tree-id286 . -352) (undo-tree-id287 . -352) (undo-tree-id288 . -361) (undo-tree-id289 . -443) (undo-tree-id290 . -443) (undo-tree-id291 . -196) (undo-tree-id292 . -196) (undo-tree-id293 . -196) (undo-tree-id294 . -204) (undo-tree-id295 . -352) (undo-tree-id296 . -352) (undo-tree-id297 . -361) (undo-tree-id298 . -443) (undo-tree-id299 . -443) (undo-tree-id300 . -249) (undo-tree-id301 . -196) (undo-tree-id302 . -196) (undo-tree-id303 . -196) (undo-tree-id304 . -204) (undo-tree-id305 . 271) (undo-tree-id306 . -214) (undo-tree-id307 . -352) (undo-tree-id308 . -352) (undo-tree-id309 . -361) (undo-tree-id310 . -443) (undo-tree-id311 . -443) 334) nil (26109 2803 831440 726000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -281) (undo-tree-id332 . -1) 282 (t 26109 2803 989559 358000)) nil (26109 2813 255468 530000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -281) (undo-tree-id336 . -1) (#(" " 0 1 (fontified t)) . -282) (undo-tree-id337 . -1) 283 (t 26109 2813 417265 333000)) nil (26109 2825 639347 847000) 0 nil])
([nil nil ((281 . 285)) nil (26109 2825 639344 558000) 0 nil])
([nil nil ((290 . 291)) nil (26109 2825 639343 577000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -300) (undo-tree-id333 . -1) (undo-tree-id334 . 1) (undo-tree-id335 . -1) 301) nil (26109 2825 639341 446000) 0 nil])
([nil nil ((300 . 301)) nil (26109 2825 639326 625000) 0 nil])
([nil nil ((#("print" 0 5 (fontified t face font-lock-builtin-face)) . 411) (undo-tree-id348 . -5) (t 26109 2825 780194 296000)) nil (26109 2861 895946 180000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 411) (undo-tree-id346 . 1) (undo-tree-id347 . -1)) nil (26109 2861 895943 157000) 0 nil])
([nil nil ((411 . 414)) nil (26109 2861 895940 782000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -412) (undo-tree-id344 . -1) (#("c" 0 1 (fontified t)) . -413) (undo-tree-id345 . -1) 414) nil (26109 2861 895939 476000) 0 nil])
([nil nil ((412 . 418)) nil (26109 2861 895936 795000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -451) (undo-tree-id341 . -1) (undo-tree-id342 . 1) (undo-tree-id343 . -1) 452) nil (26109 2861 895935 771000) 0 nil])
([nil nil ((451 . 452)) nil (26109 2861 895932 385000) 0 nil])
([nil nil ((452 . 458)) nil (26109 2861 895931 672000) 0 nil])
([nil nil ((458 . 460)) nil (26109 2861 895930 825000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -458) (undo-tree-id339 . -1) (#("e" 0 1 (fontified t)) . -459) (undo-tree-id340 . -1) 460) nil (26109 2861 895929 390000) 0 nil])
([nil nil ((458 . 465)) nil (26109 2861 895925 715000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -464) (undo-tree-id338 . -1) 465) nil (26109 2861 895923 726000) 0 nil])
([nil nil ((464 . 475)) nil (26109 5997 108771 844000) 0 nil])
([nil nil ((474 . 491)) ((#(".decode(encoding)" 0 17 (fontified t)) . 474) (t 26109 5988 705459 739000)) (26109 5998 53657 713000) 0 nil])
([nil nil ((319 . 336) (t 26109 5988 705459 739000)) nil (26109 8012 421561 854000) 0 nil])
([nil nil ((336 . 342)) nil (26109 8012 421560 789000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -341) (undo-tree-id432 . -1) 342) nil (26109 8012 421559 745000) 0 nil])
([nil nil ((341 . 345)) nil (26109 8012 421557 544000) 0 nil])
([nil nil ((346 . 350) 372) nil (26109 8012 421556 497000) 0 nil])
([nil nil ((418 . 422) 439) nil (26109 8012 421555 454000) 0 nil])
([nil nil ((445 . 449) 470) nil (26109 8012 421554 443000) 0 nil])
([nil nil ((490 . 494) 519) nil (26109 8012 421553 307000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 418) (#(" " 0 1 (fontified t face font-lock-string-face)) . 418) (#(" " 0 1 (fontified t face font-lock-string-face)) . 418) (#(" " 0 1 (fontified t face font-lock-string-face)) . 418)) nil (26109 8012 421550 971000) 0 nil])
([nil current ((1 . 532) (#("from challenge_2 import *
from challenge_3 import *
from challenge_4 import *
from basic_functions import *


def repeating_key_xor(msg, key):
    emsg = b\"\"
    for i in range(len(msg)):
        emsg += xor_bytes(
            msg[i].to_bytes(1, \"big\"), key[i % len(key)].to_bytes(1, \"big\")
        )
    return emsg

if __name__ == \"__main__\":
    string = b\"Burning 'em, if you ain't quick and nimble\\nI go crazy \\
when I hear a cymbal\"

    emsg = repeating_key_xor(string, b\"ICE\")
    print(encode_hex(emsg).decode(encoding))
" 0 4 (fontified t face font-lock-keyword-face) 4 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 26 (fontified t) 26 30 (fontified t face font-lock-keyword-face) 30 43 (fontified t) 43 49 (fontified t face font-lock-keyword-face) 49 52 (fontified t) 52 56 (fontified t face font-lock-keyword-face) 56 69 (fontified t) 69 75 (fontified t face font-lock-keyword-face) 75 78 (fontified t) 78 82 (fontified t face font-lock-keyword-face) 82 99 (fontified t) 99 105 (fontified t face font-lock-keyword-face) 105 110 (fontified t) 110 113 (fontified t face font-lock-keyword-face) 113 114 (fontified t) 114 131 (fontified t face font-lock-function-name-face) 131 147 (fontified t) 147 151 (fontified t face font-lock-variable-name-face) 151 155 (fontified t) 155 157 (fontified t face font-lock-string-face) 157 162 (fontified t) 162 165 (fontified t face font-lock-keyword-face) 165 168 (fontified t) 168 170 (fontified t face font-lock-keyword-face) 170 171 (fontified t) 171 176 (fontified t face font-lock-builtin-face) 176 177 (fontified t) 177 180 (fontified t face font-lock-builtin-face) 180 196 (fontified t) 196 200 (fontified t face font-lock-variable-name-face) 200 215 (fontified t) 215 246 (fontified t) 246 251 (fontified t face font-lock-string-face) 251 262 (fontified t) 262 265 (fontified t face font-lock-builtin-face) 265 284 (fontified t) 284 289 (fontified t face font-lock-string-face) 289 290 (fontified t) 290 291 (fontified t) 291 301 (fontified t) 301 305 (fontified t) 305 311 (fontified t face font-lock-keyword-face) 311 318 (fontified t) 318 320 (fontified t face font-lock-keyword-face) 320 321 (fontified t) 321 329 (fontified t face font-lock-builtin-face) 329 333 (fontified t) 333 343 (fontified t face font-lock-string-face) 343 344 (fontified t) 344 345 (fontified t) 345 349 (fontified t) 349 355 (fontified t face font-lock-variable-name-face) 355 359 (fontified t) 359 417 (fontified t face font-lock-string-face) 417 438 (fontified t face font-lock-string-face) 438 439 (fontified t) 439 440 (fontified t) 440 444 (fontified t) 444 448 (fontified t face font-lock-variable-name-face) 448 451 (fontified t) 451 478 (fontified t) 478 483 (fontified t face font-lock-string-face) 483 485 (fontified t) 485 489 (fontified t) 489 494 (fontified t face font-lock-builtin-face) 494 511 (fontified t) 511 528 (fontified t) 528 529 (fontified t) 529 530 (fontified t)) . 1) (undo-tree-id349 . -511) (undo-tree-id350 . -511) (undo-tree-id351 . -511) (undo-tree-id352 . -417) (undo-tree-id353 . -318) (undo-tree-id354 . -318) (undo-tree-id355 . -318) (undo-tree-id356 . -318) (undo-tree-id357 . -318) (undo-tree-id358 . -318) (undo-tree-id359 . -318) (undo-tree-id360 . -318) (undo-tree-id361 . -318) (undo-tree-id362 . -318) (undo-tree-id363 . -318) (undo-tree-id364 . -318) (undo-tree-id365 . -318) (undo-tree-id366 . -318) (undo-tree-id367 . -318) (undo-tree-id368 . -318) (undo-tree-id369 . -318) (undo-tree-id370 . -318) (undo-tree-id371 . -318) (undo-tree-id372 . -318) (undo-tree-id373 . -318) (undo-tree-id374 . -318) (undo-tree-id375 . -318) (undo-tree-id376 . -318) (undo-tree-id377 . -318) (undo-tree-id378 . -318) (undo-tree-id379 . -318) (undo-tree-id380 . -318) (undo-tree-id381 . -318) (undo-tree-id382 . -349) (undo-tree-id383 . -349) (undo-tree-id384 . -349) (undo-tree-id385 . -358) (undo-tree-id386 . -349) (undo-tree-id387 . -349) (undo-tree-id388 . -358) (undo-tree-id389 . -440) (undo-tree-id390 . -440) (undo-tree-id391 . -451) (undo-tree-id392 . -349) (undo-tree-id393 . -349) (undo-tree-id394 . -349) (undo-tree-id395 . -358) (undo-tree-id396 . -349) (undo-tree-id397 . -349) (undo-tree-id398 . -349) (undo-tree-id399 . -349) (undo-tree-id400 . -358) (undo-tree-id401 . -440) (undo-tree-id402 . -349) (undo-tree-id403 . -349) (undo-tree-id404 . -349) (undo-tree-id405 . -444) (undo-tree-id406 . -444) (undo-tree-id407 . -444) (undo-tree-id408 . -451) (undo-tree-id409 . -485) (undo-tree-id410 . -444) (undo-tree-id411 . -444) (undo-tree-id412 . -489) (undo-tree-id413 . -444) (undo-tree-id414 . -444) (undo-tree-id415 . -451) (undo-tree-id416 . -349) (undo-tree-id417 . -349) (undo-tree-id418 . -358) (undo-tree-id419 . -349) (undo-tree-id420 . -349) (undo-tree-id421 . -358) (undo-tree-id422 . -349) (undo-tree-id423 . -349) (undo-tree-id424 . -358) (undo-tree-id425 . -417) (undo-tree-id426 . -349) (undo-tree-id427 . -349) (undo-tree-id428 . -358) (undo-tree-id429 . -444) (undo-tree-id430 . -444) (undo-tree-id431 . -451) 418) nil (26109 8012 421542 327000) 0 nil])
nil
