from freqfuncts import *

A = "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736".decode("hex")
B = []

for i in range(26):
    B.append([chr(97 + i), xorz(A, chr(97 + i) * len(A))])
    B.append([chr(65 + i), xorz(A, chr(65 + i) * len(A))])

# ==========
for [i, j] in B:
    if checkFreq(j, 0.17) == 1:
        print(i, j, checkFreq(j, 0.17))
print("\n\n")

# okay, the above method works only insofar as it reduces the number of strings that I have to look at... So below is a dictionary method
# ==========


words = [i for i in open("wlist/wlist_match3.txt").read().split("\n")]
words.pop()
sepwords = [list() for i in range(26)]

for i in words:
    if "a" <= i[0] <= "z":
        sepwords[ord(i[0]) - 97].append(i)


def checkWords(LOL):  # for string of words>=0
    words = 0
    for i in LOL.split():
        if (
            i.isalpha()
            and ((len(i) > 1 and i[0] != i[1]) or i.lower() == "a")
            and (i.islower() or i.isupper() or i.istitle())
        ):
            for j in sepwords[
                ord(i[0]) - (i[0].isupper()) * 65 - (i[0].islower()) * 97
            ]:
                if i.lower() == j.lower():
                    words += 1
                    break
    return [words, len(LOL.split())]


for i in B:
    if checkWords(i[1])[0] > 0:
        print(i[1], "(words: ", checkWords(i[1])[0], " out of ", checkWords(i[1]))
