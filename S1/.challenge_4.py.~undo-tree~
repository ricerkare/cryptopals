(undo-tree-save-format-version . 1)
"8d0e7074c1274713b7dea963ad2ce2f47d864ed1"
[nil nil nil nil (26107 58260 26529 925000) 0 nil]
([nil nil ((nil rear-nonsticky nil 547 . 548) (nil fontified nil 547 . 548) (nil fontified nil 545 . 547) (nil fontified nil 544 . 545) (nil fontified nil 292 . 544) (nil fontified nil 291 . 292) (nil fontified nil 289 . 291) (nil fontified nil 282 . 289) (nil fontified nil 275 . 282) (nil fontified nil 264 . 275) (nil fontified nil 261 . 264) (nil fontified nil 252 . 261) (nil fontified nil 249 . 252) (nil fontified nil 231 . 249) (nil fontified nil 228 . 231) (nil fontified nil 196 . 228) (nil fontified nil 191 . 196) (nil fontified nil 190 . 191) (nil fontified nil 188 . 190) (nil fontified nil 185 . 188) (nil fontified nil 182 . 185) (nil fontified nil 174 . 182) (nil fontified nil 143 . 174) (nil fontified nil 142 . 143) (nil fontified nil 131 . 142) (nil fontified nil 129 . 131) (nil fontified nil 123 . 129) (nil fontified nil 120 . 123) (nil fontified nil 108 . 120) (nil fontified nil 106 . 108) (nil fontified nil 103 . 106) (nil fontified nil 100 . 103) (nil fontified nil 76 . 100) (nil fontified nil 75 . 76) (nil fontified nil 70 . 75) (nil fontified nil 65 . 70) (nil fontified nil 50 . 65) (nil fontified nil 39 . 50) (nil fontified nil 38 . 39) (nil fontified nil 34 . 38) (nil fontified nil 33 . 34) (nil fontified nil 31 . 33) (nil fontified nil 28 . 31) (nil fontified nil 25 . 28) (nil fontified nil 5 . 25) (nil fontified nil 2 . 5) (nil fontified nil 1 . 2) (1 . 548) (t . -1)) nil (26107 58260 26522 19000) 0 nil])
([nil nil ((548 . 549)) nil (26107 58260 26499 692000) 0 nil])
([nil nil ((549 . 568)) nil (26107 58260 26497 747000) 0 nil])
([nil nil ((568 . 571)) nil (26107 58260 26495 926000) 0 nil])
([nil nil ((571 . 574)) nil (26107 58260 26494 65000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -573) (undo-tree-id22 . -1) 574) nil (26107 58260 26491 716000) 0 nil])
([nil nil ((#("my" 0 2 (fontified t)) . -571) (undo-tree-id21 . -2) 573) nil (26107 58260 26486 978000) 0 nil])
([nil nil ((571 . 576)) nil (26107 58260 26482 821000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -575) (undo-tree-id20 . -1) 576) nil (26107 58260 26480 559000) 0 nil])
([nil nil ((575 . 576)) nil (26107 58260 26476 149000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -571) (undo-tree-id15 . -1) (#("i" 0 1 (fontified t)) . -572) (undo-tree-id16 . -1) (#("l" 0 1 (fontified t)) . -573) (undo-tree-id17 . -1) (#("e" 0 1 (face font-lock-builtin-face fontified t)) . -574) (undo-tree-id18 . -1) (#("_" 0 1 (fontified t)) . -575) (undo-tree-id19 . -1) 576) nil (26107 58260 26472 106000) 0 nil])
([nil nil ((571 . 572)) nil (26107 58260 26456 264000) 0 nil])
([nil nil ((572 . 575)) nil (26107 58260 26454 409000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -571) (undo-tree-id11 . -1) (#("p" 0 1 (fontified t)) . -572) (undo-tree-id12 . -1) (#("e" 0 1 (fontified t)) . -573) (undo-tree-id13 . -1) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -574) (undo-tree-id14 . -1) 575) nil (26107 58260 26450 971000) 0 nil])
([nil nil ((571 . 578)) nil (26107 58260 26439 203000) 0 nil])
([nil nil ((#("strings" 0 7 (fontified t)) . -571) (undo-tree-id10 . -7) 578) nil (26107 58260 26436 951000) 0 nil])
([nil nil ((571 . 572)) nil (26107 58260 26432 326000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -571) (undo-tree-id9 . -1) 572) nil (26107 58260 26430 7000) 0 nil])
([nil nil ((571 . 576)) nil (26107 58260 26425 774000) 0 nil])
([nil nil ((#("open_" 0 5 (fontified t)) . -571) (undo-tree-id8 . -5) 576) nil (26107 58260 26423 592000) 0 nil])
([nil nil ((571 . 575)) nil (26107 58260 26419 211000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -571) (undo-tree-id4 . -1) (#("f" 0 1 (fontified t)) . -572) (undo-tree-id5 . -1) (#(":" 0 1 (fontified t)) . -573) (undo-tree-id6 . -1) (#(" " 0 1 (fontified t)) . -574) (undo-tree-id7 . -1) 575) nil (26107 58260 26415 582000) 0 nil])
([nil nil ((571 . 584)) nil (26107 58260 26404 91000) 0 nil])
([nil nil ((584 . 589)) nil (26107 58260 26402 147000) 0 nil])
([nil nil ((#("with" 0 4 (face font-lock-keyword-face fontified t)) . 549)) nil (26107 58260 26399 894000) 0 nil])
([nil nil ((#("file:" 0 5 (fontified t)) . -575) (undo-tree-id3 . -5) 580) nil (26107 58260 743651 90000) 0 nil])
([nil nil ((#("strings_" 0 8 (fontified t)) . -567) (undo-tree-id120 . -8) 575) nil (26107 58367 571016 678000) 0 nil] [nil nil ((#("strings_" 0 8 (fontified t)) . -567) (undo-tree-id2 . -8) 575) ((567 . 575)) (26107 58260 277743 30000) 0 nil])
([nil nil ((#("as " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -564) (undo-tree-id119 . -3) 567) nil (26107 58367 571013 996000) 0 nil])
([nil nil ((#("as " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -564) (undo-tree-id1 . -3) 567) ((564 . 567)) (26107 58260 26623 314000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -563) (undo-tree-id118 . -1) 564) nil (26107 58367 571012 111000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -563) (undo-tree-id0 . -1) 564) ((563 . 564)) (26107 58260 26373 257000) 0 nil])
([nil nil ((563 . 574)) nil (26107 58367 571010 416000) 0 nil])
nil
([nil nil ((#("aplit" 0 5 (fontified t)) . -569) (undo-tree-id117 . -5) 574) nil (26107 58367 571009 465000) 0 nil])
([nil nil ((569 . 580)) nil (26107 58367 571007 713000) 0 nil])
([nil nil ((563 . 565)) nil (26107 58367 571006 976000) 0 nil])
([nil nil ((550 . 564)) nil (26107 58367 571006 184000) 0 nil])
([nil nil ((562 . 563)) nil (26107 58367 571005 371000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . -599) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) 602) nil (26107 58367 571004 177000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -598) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 599) nil (26107 58367 570998 998000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -549) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 550) nil (26107 58367 570992 82000) 0 nil])
([nil nil ((578 . 582)) nil (26107 58367 570987 182000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -578) (undo-tree-id96 . -1) (#("e" 0 1 (fontified t)) . -579) (undo-tree-id97 . -1) (#("x" 0 1 (face font-lock-builtin-face fontified t)) . -580) (undo-tree-id98 . -1) (#("_" 0 1 (fontified t)) . -581) (undo-tree-id99 . -1) 582) nil (26107 58367 570985 614000) 0 nil])
([nil nil ((578 . 590)) nil (26107 58367 570978 338000) 0 nil])
([nil nil ((#("lines = " 0 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t)) . -582) (undo-tree-id95 . -8) 590) nil (26107 58367 570977 451000) 0 nil])
([nil nil ((#("hex_" 0 4 (fontified t)) . -578) (undo-tree-id94 . -4) 582) nil (26107 58367 570975 565000) 0 nil])
([nil nil ((578 . 590)) nil (26107 58367 570973 819000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -589) (undo-tree-id93 . -1) 590) nil (26107 58367 570972 835000) 0 nil])
([nil nil ((589 . 590)) nil (26107 58367 570970 961000) 0 nil])
([nil nil ((581 . 583)) nil (26107 58367 570970 49000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -592) (undo-tree-id92 . -1) 593) nil (26107 58367 570969 124000) 0 nil])
([nil nil ((592 . 604)) nil (26107 58367 570967 317000) 0 nil])
([nil nil ((621 . 622)) nil (26107 58367 570966 501000) 0 nil])
([nil nil ((622 . 633)) nil (26107 58367 570965 643000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -629) (undo-tree-id88 . -1) (#("i" 0 1 (fontified t)) . -630) (undo-tree-id89 . -1) (#("l" 0 1 (fontified t)) . -631) (undo-tree-id90 . -1) (#("e" 0 1 (fontified t)) . -632) (undo-tree-id91 . -1) 633) nil (26107 58367 570963 739000) 0 nil])
([nil nil ((629 . 642)) nil (26107 58367 570958 52000) 0 nil])
([nil nil ((1 . 655) (#("#Q4

Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
Fload = []#list of words by letter
for i in Hexes:
    for case in (65, 97): #we gonna test all dem chars :D
        for j in range(26):
            Fload.append([chr(case+j), xorz(i, chr(case+j)*len(Hexes))])
guesses = []

'''for i in range(len(Fload)): 
    if checkWords(Fload[i][1])[0] > 0:
        print (i, Fload[i][0])
        print checkWords(Fload[i][1]), Fload[i][1]
        guesses.append([i, Fload[i][1], Fload[i][0]])
for i in guesses:
    print i[1]
    print i[2]
'''

strings_file = open(\"4.txt\")
hexed_lines = strings_file.read.split(\"\\n\")
strings_file.close()
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 4 (face font-lock-comment-face fontified t) 4 5 (fontified t) 5 10 (face font-lock-variable-name-face fontified t) 10 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 30 (fontified t) 30 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 37 (face font-lock-builtin-face fontified t) 37 38 (fontified t) 38 49 (face font-lock-string-face fontified t) 49 64 (fontified t) 64 69 (face font-lock-variable-name-face fontified t) 69 74 (fontified t) 74 75 (face font-lock-comment-delimiter-face fontified t) 75 99 (face font-lock-comment-face fontified t) 99 102 (face font-lock-keyword-face fontified t) 102 105 (fontified t) 105 107 (face font-lock-keyword-face fontified t) 107 119 (fontified t) 119 122 (face font-lock-keyword-face fontified t) 122 128 (fontified t) 128 130 (face font-lock-keyword-face fontified t) 130 141 (fontified t) 141 142 (face font-lock-comment-delimiter-face fontified t) 142 173 (face font-lock-comment-face fontified t) 173 181 (fontified t) 181 184 (face font-lock-keyword-face fontified t) 184 187 (fontified t) 187 189 (face font-lock-keyword-face fontified t) 189 190 (fontified t) 190 195 (face font-lock-builtin-face fontified t) 195 227 (fontified t) 227 230 (face font-lock-builtin-face fontified t) 230 248 (fontified t) 248 251 (face font-lock-builtin-face fontified t) 251 260 (fontified t) 260 263 (face font-lock-builtin-face fontified t) 263 274 (fontified t) 274 281 (face font-lock-variable-name-face fontified t) 281 288 (fontified t) 288 290 (face font-lock-doc-face fontified t) 290 291 (face font-lock-doc-face syntax-table (15) fontified t) 291 543 (face font-lock-doc-face fontified t) 543 544 (face font-lock-doc-face syntax-table (15) fontified t) 544 546 (face font-lock-doc-face fontified t) 546 547 (rear-nonsticky t fontified t) 547 548 (fontified t) 548 560 (face font-lock-variable-name-face fontified t) 560 561 (fontified t) 561 563 (fontified t) 563 567 (face font-lock-builtin-face fontified t) 567 568 (fontified t) 568 575 (face font-lock-string-face fontified t) 575 577 (fontified t) 577 588 (face font-lock-variable-name-face fontified t) 588 591 (fontified t) 591 603 (fontified t) 603 615 (fontified t) 615 619 (face font-lock-string-face fontified t) 619 621 (fontified t) 621 641 (fontified t) 641 642 (fontified t)) . 1) (undo-tree-id23 . -642) (undo-tree-id24 . -548) (undo-tree-id25 . -641) (undo-tree-id26 . -548) (undo-tree-id27 . -548) (undo-tree-id28 . -548) (undo-tree-id29 . -642) (undo-tree-id30 . -548) (undo-tree-id31 . -548) (undo-tree-id32 . -642) (undo-tree-id33 . -642) (undo-tree-id34 . -642) (undo-tree-id35 . -548) (undo-tree-id36 . -577) (undo-tree-id37 . -577) (undo-tree-id38 . -591) (undo-tree-id39 . -577) (undo-tree-id40 . -577) (undo-tree-id41 . -591) (undo-tree-id42 . -577) (undo-tree-id43 . -577) (undo-tree-id44 . -591) (undo-tree-id45 . -577) (undo-tree-id46 . -577) (undo-tree-id47 . -591) (undo-tree-id48 . -577) (undo-tree-id49 . -577) (undo-tree-id50 . -591) (undo-tree-id51 . -577) (undo-tree-id52 . -577) (undo-tree-id53 . -591) (undo-tree-id54 . -577) (undo-tree-id55 . -577) (undo-tree-id56 . -591) (undo-tree-id57 . -577) (undo-tree-id58 . -577) (undo-tree-id59 . -591) (undo-tree-id60 . -577) (undo-tree-id61 . -577) (undo-tree-id62 . -591) (undo-tree-id63 . -577) (undo-tree-id64 . -577) (undo-tree-id65 . -591) (undo-tree-id66 . -577) (undo-tree-id67 . -577) (undo-tree-id68 . -591) (undo-tree-id69 . -577) (undo-tree-id70 . -577) (undo-tree-id71 . -591) (undo-tree-id72 . -577) (undo-tree-id73 . -577) (undo-tree-id74 . -591) (undo-tree-id75 . 22) (undo-tree-id76 . -621) (undo-tree-id77 . -577) (undo-tree-id78 . -577) (undo-tree-id79 . -621) (undo-tree-id80 . -577) (undo-tree-id81 . -577) (undo-tree-id82 . -591) (undo-tree-id83 . -621) (undo-tree-id84 . 2) (undo-tree-id85 . -641) (undo-tree-id86 . 3) (undo-tree-id87 . -640) 642) nil (26107 58367 570950 455000) 0 nil])
([nil nil ((654 . 655) (t 26107 58367 623002 84000)) nil (26107 58386 822974 454000) 0 nil])
([nil nil ((1 . 655) (#("# Q4

Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
Fload = []  # list of words by letter
for i in Hexes:
    for case in (65, 97):  # we gonna test all dem chars :D
        for j in range(26):
            Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
guesses = []

\"\"\"for i in range(len(Fload)): 
    if checkWords(Fload[i][1])[0] > 0:
        print (i, Fload[i][0])
        print checkWords(Fload[i][1]), Fload[i][1]
        guesses.append([i, Fload[i][1], Fload[i][0]])
for i in guesses:
    print i[1]
    print i[2]
\"\"\"

strings_file = open(\"4.txt\")
hexed_lines = strings_file.read.split(\"\\n\")
strings_file.close()

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 5 (face font-lock-comment-face fontified t) 5 6 (fontified t) 6 11 (face font-lock-variable-name-face fontified t) 11 25 (fontified t) 25 28 (face font-lock-keyword-face fontified t) 28 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 38 (face font-lock-builtin-face fontified t) 38 39 (fontified t) 39 50 (face font-lock-string-face fontified t) 50 65 (fontified t) 65 70 (face font-lock-variable-name-face fontified t) 70 77 (fontified t) 77 79 (face font-lock-comment-delimiter-face fontified t) 79 103 (face font-lock-comment-face fontified t) 103 106 (face font-lock-keyword-face fontified t) 106 109 (fontified t) 109 111 (face font-lock-keyword-face fontified t) 111 123 (fontified t) 123 126 (face font-lock-keyword-face fontified t) 126 132 (fontified t) 132 134 (face font-lock-keyword-face fontified t) 134 146 (fontified t) 146 148 (face font-lock-comment-delimiter-face fontified t) 148 179 (face font-lock-comment-face fontified t) 179 187 (fontified t) 187 190 (face font-lock-keyword-face fontified t) 190 193 (fontified t) 193 195 (face font-lock-keyword-face fontified t) 195 196 (fontified t) 196 201 (face font-lock-builtin-face fontified t) 201 233 (fontified t) 233 236 (face font-lock-builtin-face fontified t) 236 256 (fontified t) 256 259 (face font-lock-builtin-face fontified t) 259 272 (fontified t) 272 275 (face font-lock-builtin-face fontified t) 275 286 (fontified t) 286 293 (face font-lock-variable-name-face fontified t) 293 300 (fontified t) 300 302 (face font-lock-doc-face fontified t) 302 303 (face font-lock-doc-face syntax-table (15) fontified t) 303 555 (face font-lock-doc-face fontified t) 555 556 (face font-lock-doc-face syntax-table (15) fontified t) 556 558 (face font-lock-doc-face fontified t) 558 575 (fontified t) 575 579 (face font-lock-builtin-face fontified t) 579 580 (fontified t) 580 587 (face font-lock-string-face fontified t) 587 589 (fontified t) 589 600 (face font-lock-variable-name-face fontified t) 600 627 (fontified t) 627 631 (face font-lock-string-face fontified t) 631 633 (fontified t) 633 655 (fontified t)) . 1) (undo-tree-id121 . -653) (undo-tree-id122 . -654) (undo-tree-id123 . 2) (undo-tree-id124 . -654) (undo-tree-id125 . -633) (undo-tree-id126 . -633) (undo-tree-id127 . -654) (undo-tree-id128 . -654) 655) nil (26107 58386 822969 810000) 0 nil])
([nil nil ((560 . 562) (t 26107 58386 979295 690000)) nil (26107 61614 97577 426000) 0 nil])
([nil nil ((561 . 582)) nil (26107 61614 97576 478000) 0 nil])
([nil nil ((582 . 586)) nil (26107 61614 97575 634000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -583) (undo-tree-id166 . -1) (#("p" 0 1 (fontified t)) . -584) (undo-tree-id167 . -1) (#("o" 0 1 (fontified t)) . -585) (undo-tree-id168 . -1) 586) nil (26107 61614 97574 303000) 0 nil])
([nil nil ((583 . 590)) nil (26107 61614 97570 527000) 0 nil])
([nil nil ((590 . 591)) nil (26107 61614 97569 745000) 0 nil])
([nil nil ((591 . 592)) nil (26107 61614 97568 991000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -591) (undo-tree-id165 . -1) 592) nil (26107 61614 97568 0) 0 nil])
([nil nil ((591 . 612)) nil (26107 61614 97566 154000) 0 nil])
([nil nil ((612 . 616)) nil (26107 61614 97565 432000) 0 nil])
([nil nil ((712 . 713)) nil (26107 61614 97564 709000) 0 nil])
([nil nil ((713 . 714)) nil (26107 61614 97563 833000) 0 nil])
([nil nil ((#("from challenge_3 import *
" 0 4 (face font-lock-keyword-face fontified t) 4 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 25 (fontified t) 25 26 (fontified t)) . -591) (undo-tree-id163 . -26) (undo-tree-id164 . -26) 617) nil (26107 61614 97562 665000) 0 nil])
([nil nil ((591 . 592)) nil (26107 61614 97559 811000) 0 nil])
([nil nil ((592 . 613)) nil (26107 61614 97559 86000) 0 nil])
([nil nil ((613 . 615)) nil (26107 61614 97558 322000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -614) (undo-tree-id162 . -1) 615) nil (26107 61614 97557 326000) 0 nil])
([nil nil ((614 . 618)) nil (26107 61614 97555 530000) 0 nil])
([nil nil ((618 . 623)) nil (26107 61614 97554 698000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -619) (undo-tree-id161 . -4) 623) nil (26107 61614 97553 663000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -618) (undo-tree-id160 . -1) 619) nil (26107 61614 97551 659000) 0 nil])
([nil nil ((619 . 623) 645) nil (26107 61614 97549 869000) 0 nil])
([nil nil ((652 . 656) 682) nil (26107 61614 97548 900000) 0 nil])
([nil nil ((700 . 704) 720) nil (26107 61614 97547 892000) 0 nil])
([nil nil ((726 . 730) (#("    " 0 4 (fontified nil)) . 725) (undo-tree-id159 . -4) (724 . 730)) nil (26107 61614 97546 591000) 0 nil])
([nil nil ((730 . 740)) nil (26107 61614 97544 658000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -739) (undo-tree-id158 . -1) 740) nil (26107 61614 97543 381000) 0 nil])
([nil nil ((739 . 745)) nil (26107 61614 97541 594000) 0 nil])
([nil nil ((745 . 750)) nil (26107 61614 97540 836000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -745) (undo-tree-id151 . -1) (#("h" 0 1 (fontified t)) . -746) (undo-tree-id152 . -1) (#("e" 0 1 (fontified t)) . -747) (undo-tree-id153 . -1) (#("x" 0 1 (face font-lock-builtin-face fontified t)) . -748) (undo-tree-id154 . -1) (#(")" 0 1 (fontified t)) . -749) (undo-tree-id155 . -1) (undo-tree-id156 . 1) (undo-tree-id157 . -1) 750) nil (26107 61614 97538 922000) 0 nil])
([nil nil ((745 . 758)) nil (26107 61614 97531 397000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -756) (undo-tree-id149 . -1) (#("n" 0 1 (fontified t)) . -757) (undo-tree-id150 . -1) 758) nil (26107 61614 97530 179000) 0 nil])
([nil nil ((756 . 762)) nil (26107 61614 97527 307000) 0 nil])
([nil nil ((762 . 767)) nil (26107 61614 97526 520000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -763) (undo-tree-id148 . -4) 767) nil (26107 61614 97525 491000) 0 nil])
([nil nil ((#("lines) " 0 7 (fontified t)) . -756) (undo-tree-id147 . -7) 763) nil (26107 61614 97523 379000) 0 nil])
([nil nil ((#("hexed_" 0 6 (fontified t)) . -750) (undo-tree-id146 . -6) 756) nil (26107 61614 97521 319000) 0 nil])
([nil nil ((750 . 756)) nil (26107 61614 97519 535000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -754) (undo-tree-id144 . -1) (#("f" 0 1 (fontified t)) . -755) (undo-tree-id145 . -1) 756) nil (26107 61614 97518 335000) 0 nil])
([nil nil ((754 . 769)) nil (26107 61614 97515 558000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -768) (undo-tree-id143 . -1) 769) nil (26107 61614 97514 575000) 0 nil])
([nil nil ((768 . 780)) nil (26107 61614 97512 641000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -779) (undo-tree-id140 . -1) (undo-tree-id141 . 1) (undo-tree-id142 . -1) 780) nil (26107 61614 97511 522000) 0 nil])
([nil nil ((779 . 780)) nil (26107 61614 97507 726000) 0 nil])
([nil nil ((780 . 785)) nil (26107 61614 97506 975000) 0 nil])
([nil nil ((786 . 791)) nil (26107 61614 97506 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -724) (undo-tree-id139 . -1) 725) nil (26107 61614 97505 1000) 0 nil])
([nil nil ((785 . 789)) nil (26107 61614 97503 20000) 0 nil])
([nil nil ((789 . 801)) nil (26107 61614 97502 182000) 0 nil])
([nil nil ((#("file" 0 4 (fontified t)) . -797) (undo-tree-id138 . -4) 801) nil (26107 61614 97501 139000) 0 nil])
([nil nil ((#("strings_" 0 8 (fontified t)) . -789) (undo-tree-id137 . -8) 797) nil (26107 61614 97499 8000) 0 nil])
([nil nil ((789 . 807)) nil (26107 61614 97497 130000) 0 nil])
([nil nil ((807 . 816)) nil (26107 61614 97496 276000) 0 nil])
([nil nil ((#(".split" 0 6 (fontified t)) . 687) (undo-tree-id136 . -6)) nil (26107 61614 97495 307000) 0 nil])
([nil nil ((687 . 689)) nil (26107 61614 97493 360000) 0 nil])
([nil nil ((#("(\"\\n\")" 0 1 (fontified t) 1 5 (face font-lock-string-face fontified t) 5 6 (fontified t)) . 689) (undo-tree-id131 . 6) (undo-tree-id132 . -1) (undo-tree-id133 . 1) (undo-tree-id134 . -6) (undo-tree-id135 . -6)) nil (26107 61614 97491 769000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -687) (undo-tree-id129 . -1) (#("n" 0 1 (fontified t)) . -688) (undo-tree-id130 . -1) 689) nil (26107 61614 97484 1000) 0 nil])
([nil nil ((687 . 694)) nil (26107 61614 97469 619000) 0 nil])
([nil nil ((#("readlines()" 0 11 (fontified t)) . -683) (undo-tree-id170 . -11) (undo-tree-id171 . 1) (undo-tree-id172 . -11) (undo-tree-id173 . 2) (undo-tree-id174 . -10) 694 (t 26107 61614 185363 105000)) nil (26107 61898 156914 239000) 0 nil])
([nil nil ((683 . 686)) nil (26107 61898 156907 732000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -685) (undo-tree-id169 . -1) 686) nil (26107 61898 156905 682000) 0 nil])
([nil nil ((685 . 701)) nil (26107 61898 156896 41000) 0 nil])
([nil nil ((apply -34 1 595 undo--wrap-and-run-primitive-undo 1 595 ((588 . 590) (571 . 573) (554 . 556) (534 . 536) (478 . 480) (425 . 427) (392 . 394) (351 . 353) (317 . 319) (301 . 303) (220 . 222) (190 . 192) (128 . 130) (110 . 112) (70 . 72) (9 . 11) (1 . 3)))) nil (26107 61898 156890 892000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -857) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 858 (t 26107 61898 273273 933000)) nil (26107 61935 413832 376000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -853) (undo-tree-id282 . -4) (undo-tree-id283 . -4) 857) nil (26107 61935 413828 280000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -852) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) 853) nil (26107 61935 413823 454000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -848) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) 852) nil (26107 61935 413818 530000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -844) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) 848) nil (26107 61935 413813 134000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -842) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("
" 0 1 (fontified t)) . -843) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 844) nil (26107 61935 413806 381000) 0 nil])
([nil nil ((#("lines" 0 5 (fontified t)) . -837) (undo-tree-id253 . -5) (undo-tree-id254 . -5) (undo-tree-id255 . -5) (undo-tree-id256 . -5) (undo-tree-id257 . -5) (undo-tree-id258 . -5) (undo-tree-id259 . -5) 842) nil (26107 61935 413790 420000) 0 nil])
([nil nil ((#("in " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -834) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) 837) nil (26107 61935 413781 313000) 0 nil])
([nil nil ((#("line " 0 5 (fontified t)) . -829) (undo-tree-id239 . -5) (undo-tree-id240 . -5) (undo-tree-id241 . -5) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) 834) nil (26107 61935 413771 928000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -825) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) 829) nil (26107 61935 413761 780000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -821) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) 825) nil (26107 61935 413751 563000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -820) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 821) nil (26107 61935 413718 714000) 0 nil])
([nil nil ((1 . 815) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)): 
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    hexed_lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    lines = [decode_hex(line) for line in hexed_lines]
    
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 4 (face font-lock-comment-face fontified t) 4 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 15 (face font-lock-comment-face fontified t) 15 29 (face font-lock-comment-face fontified t) 29 32 (face font-lock-comment-face fontified t) 32 35 (face font-lock-comment-face fontified t) 35 37 (face font-lock-comment-face fontified t) 37 38 (face font-lock-comment-face fontified t) 38 42 (face font-lock-comment-face fontified t) 42 43 (face font-lock-comment-face fontified t) 43 54 (face font-lock-comment-face fontified t) 54 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 76 (face font-lock-comment-face fontified t) 76 83 (face font-lock-comment-face fontified t) 83 85 (face font-lock-comment-face fontified t) 85 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 114 (face font-lock-comment-face fontified t) 114 117 (face font-lock-comment-face fontified t) 117 119 (face font-lock-comment-face fontified t) 119 127 (face font-lock-comment-face fontified t) 127 129 (face font-lock-comment-delimiter-face fontified t) 129 133 (face font-lock-comment-delimiter-face fontified t) 133 136 (face font-lock-comment-face fontified t) 136 142 (face font-lock-comment-face fontified t) 142 144 (face font-lock-comment-face fontified t) 144 156 (face font-lock-comment-face fontified t) 156 158 (face font-lock-comment-face fontified t) 158 189 (face font-lock-comment-face fontified t) 189 191 (face font-lock-comment-delimiter-face fontified t) 191 199 (face font-lock-comment-delimiter-face fontified t) 199 202 (face font-lock-comment-face fontified t) 202 205 (face font-lock-comment-face fontified t) 205 207 (face font-lock-comment-face fontified t) 207 208 (face font-lock-comment-face fontified t) 208 213 (face font-lock-comment-face fontified t) 213 219 (face font-lock-comment-face fontified t) 219 221 (face font-lock-comment-delimiter-face fontified t) 221 233 (face font-lock-comment-delimiter-face fontified t) 233 247 (face font-lock-comment-face fontified t) 247 250 (face font-lock-comment-face fontified t) 250 270 (face font-lock-comment-face fontified t) 270 273 (face font-lock-comment-face fontified t) 273 286 (face font-lock-comment-face fontified t) 286 289 (face font-lock-comment-face fontified t) 289 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 309 (face font-lock-comment-face fontified t) 309 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 320 (face font-lock-comment-face fontified t) 320 321 (face font-lock-comment-face fontified t) 321 350 (face font-lock-comment-face fontified t) 350 352 (face font-lock-comment-delimiter-face fontified t) 352 356 (face font-lock-comment-delimiter-face fontified t) 356 391 (face font-lock-comment-face fontified t) 391 393 (face font-lock-comment-delimiter-face fontified t) 393 401 (face font-lock-comment-delimiter-face fontified t) 401 424 (face font-lock-comment-face fontified t) 424 426 (face font-lock-comment-delimiter-face fontified t) 426 434 (face font-lock-comment-delimiter-face fontified t) 434 477 (face font-lock-comment-face fontified t) 477 479 (face font-lock-comment-delimiter-face fontified t) 479 487 (face font-lock-comment-delimiter-face fontified t) 487 533 (face font-lock-comment-face fontified t) 533 535 (face font-lock-comment-delimiter-face fontified t) 535 553 (face font-lock-comment-face fontified t) 553 555 (face font-lock-comment-delimiter-face fontified t) 555 559 (face font-lock-comment-delimiter-face fontified t) 559 570 (face font-lock-comment-face fontified t) 570 572 (face font-lock-comment-delimiter-face fontified t) 572 576 (face font-lock-comment-delimiter-face fontified t) 576 587 (face font-lock-comment-face fontified t) 587 589 (face font-lock-comment-delimiter-face fontified t) 589 590 (face font-lock-comment-face fontified t) 590 592 (face font-lock-comment-face fontified t) 592 593 (face font-lock-comment-face fontified t) 593 594 (fontified t) 594 598 (face font-lock-keyword-face fontified t) 598 615 (fontified t) 615 621 (face font-lock-keyword-face fontified t) 621 624 (fontified t) 624 625 (fontified t) 625 627 (face font-lock-keyword-face fontified t) 627 628 (fontified t) 628 636 (face font-lock-builtin-face fontified t) 636 640 (fontified t) 640 650 (face font-lock-string-face fontified t) 650 651 (fontified t) 651 652 (fontified t) 652 656 (fontified t) 656 668 (fontified t) 668 671 (fontified t) 671 675 (face font-lock-builtin-face fontified t) 675 676 (fontified t) 676 683 (face font-lock-string-face fontified t) 683 685 (fontified t) 685 689 (fontified t) 689 700 (fontified t) 700 729 (fontified t) 729 733 (face font-lock-string-face fontified t) 733 734 (fontified t) 734 735 (fontified t) 735 739 (fontified t) 739 759 (fontified t) 759 760 (fontified t) 760 764 (fontified t) 764 769 (fontified t) 769 790 (fontified t) 790 793 (face font-lock-keyword-face fontified t) 793 799 (fontified t) 799 801 (face font-lock-keyword-face fontified t) 801 802 (fontified t) 802 815 (fontified t) 815 819 (fontified t) 819 820 (fontified t)) . 1) (undo-tree-id175 . -820) (undo-tree-id176 . -820) (undo-tree-id177 . -624) (undo-tree-id178 . -624) (undo-tree-id179 . -594) (undo-tree-id180 . -819) (undo-tree-id181 . -819) (undo-tree-id182 . -594) (undo-tree-id183 . -819) (undo-tree-id184 . -819) (undo-tree-id185 . -593) (undo-tree-id186 . -593) (undo-tree-id187 . -819) (undo-tree-id188 . -819) (undo-tree-id189 . -819) (undo-tree-id190 . -819) (undo-tree-id191 . -819) (undo-tree-id192 . -819) (undo-tree-id193 . -819) (undo-tree-id194 . -819) (undo-tree-id195 . -819) (undo-tree-id196 . -819) (undo-tree-id197 . -764) (undo-tree-id198 . -764) (undo-tree-id199 . -819) (undo-tree-id200 . -815) 820) nil (26107 61935 413694 231000) 0 nil])
([nil nil ((624 . 645) (t 26107 61935 464579 202000)) nil (26108 52715 485189 656000) 0 nil])
([nil nil ((645 . 649)) nil (26108 52715 485188 615000) 0 nil])
([nil nil ((840 . 844)) nil (26108 52715 485187 772000) 0 nil])
([nil nil ((nil rear-nonsticky nil 903 . 904) (nil fontified nil 844 . 904) (844 . 904)) nil (26108 52715 485186 809000) 0 nil])
([nil nil ((904 . 909)) nil (26108 52715 485185 606000) 0 nil])
([nil nil ((844 . 850)) nil (26108 52715 485184 736000) 0 nil])
([nil nil ((910 . 915)) nil (26108 52715 485183 887000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -648) (undo-tree-id297 . -1) (undo-tree-id298 . -1) 649) nil (26108 52715 485182 403000) 0 nil])
([nil nil ((648 . 658)) nil (26108 52715 485178 953000) 0 nil])
([nil nil ((1 . 921) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_3 import freq_score
if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    hexed_lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    lines = [decode_hex(line) for line in hexed_lines]
    foo = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    
    
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 658 (fontified t) 658 660 (face font-lock-keyword-face fontified t) 660 661 (fontified t) 661 669 (face font-lock-builtin-face fontified t) 669 673 (fontified t) 673 683 (face font-lock-string-face fontified t) 683 704 (fontified t) 704 708 (face font-lock-builtin-face fontified t) 708 709 (fontified t) 709 716 (face font-lock-string-face fontified t) 716 762 (fontified t) 762 766 (face font-lock-string-face fontified t) 766 823 (fontified t) 823 826 (face font-lock-keyword-face fontified t) 826 832 (fontified t) 832 834 (face font-lock-keyword-face fontified t) 834 848 (fontified t) 848 852 (fontified t) 852 855 (fontified t) 855 858 (fontified t) 858 891 (fontified t) 891 894 (face font-lock-keyword-face fontified t) 894 897 (fontified t) 897 899 (face font-lock-keyword-face fontified t) 899 900 (fontified t) 900 905 (face font-lock-builtin-face fontified t) 905 906 (fontified t) 906 909 (face font-lock-builtin-face fontified t) 909 917 (fontified t) 917 918 (fontified t rear-nonsticky t) 918 923 (fontified t) 923 924 (fontified t) 924 928 (fontified nil) 928 929 (fontified nil)) . 1) (undo-tree-id286 . -852) (undo-tree-id287 . -848) (undo-tree-id288 . -848) (undo-tree-id289 . -848) (undo-tree-id290 . -793) (undo-tree-id291 . -657) (undo-tree-id292 . -848) (undo-tree-id293 . -848) (undo-tree-id294 . -647) (undo-tree-id295 . -622) (undo-tree-id296 . -623) (929 . 930) 658) nil (26108 52715 485174 214000) 0 nil])
([nil nil ((#("score" 0 5 (fontified t)) . -653) (undo-tree-id304 . -5) (undo-tree-id305 . -5) (undo-tree-id306 . -5) (undo-tree-id307 . -5) 658 (t 26108 52715 711214 372000)) nil (26108 52741 385968 477000) 0 nil])
([nil nil ((653 . 659)) nil (26108 52741 385963 171000) 0 nil])
([nil nil ((#("break_" 0 6 (fontified t)) . -653) (undo-tree-id303 . -6) 659) nil (26108 52741 385961 566000) 0 nil])
([nil nil ((#("freq_" 0 5 (fontified t)) . -648) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) 653) nil (26108 52741 385957 965000) 0 nil])
([nil nil ((648 . 669)) nil (26108 52741 385942 367000) 0 nil])
([nil nil ((931 . 936) (t 26108 52741 615108 87000)) nil (26108 64372 518888 443000) 0 nil])
([nil nil ((936 . 943)) nil (26108 64372 518886 851000) 0 nil])
([nil nil ((943 . 960)) nil (26108 64372 518885 602000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -959) (undo-tree-id314 . -1) 960) nil (26108 64372 518883 995000) 0 nil])
([nil nil ((959 . 963)) nil (26108 64372 518881 247000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -962) (undo-tree-id313 . -1) 963) nil (26108 64372 518879 775000) 0 nil])
([nil nil ((962 . 970)) nil (26108 64372 518876 880000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -969) (undo-tree-id312 . -1) 970) nil (26108 64372 518875 567000) 0 nil])
([nil nil ((969 . 970)) nil (26108 64372 518872 673000) 0 nil])
([nil nil ((#("lines" 0 5 (fontified t)) . -965) (undo-tree-id311 . -5) 970) nil (26108 64372 518870 999000) 0 nil])
([nil nil ((965 . 979)) nil (26108 64372 518843 57000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -978) (undo-tree-id308 . -1) (undo-tree-id309 . 1) (undo-tree-id310 . -1) 979) nil (26108 64372 518840 693000) 0 nil])
([nil nil ((978 . 988)) nil (26108 64372 518825 416000) 0 nil])
([nil nil ((988 . 1009)) nil (26108 64372 518823 456000) 0 nil])
([nil nil ((1009 . 1017)) nil (26108 64372 518817 146000) 0 nil])
([nil nil ((623 . 624) (t 26108 64372 687485 377000)) nil (26108 64760 526811 223000) 0 nil])
([nil nil ((624 . 645)) nil (26108 64760 526807 795000) 0 nil])
([nil nil ((645 . 657)) nil (26109 235 486163 885000) 0 nil])
([nil nil ((apply -2 840 968 undo--wrap-and-run-primitive-undo 840 968 ((844 . 846) 895)) (t 26108 64760 747883 989000)) nil (26109 245 206702 998000) 0 nil] [nil nil ((894 . 897) 840 (t 26108 64760 747883 989000)) ((#(" # " 0 1 (fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t)) . 894) (undo-tree-id316 . -3)) (26109 235 485909 959000) 0 nil] [nil nil ((814 . 817) 765 (t 26108 64760 747883 989000)) ((#(" # " 0 1 (fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t)) . 814) (undo-tree-id315 . -3)) (26109 224 285143 802000) 0 nil])
([nil nil ((896 . 901)) nil (26109 245 206699 448000) 0 nil])
nil
nil
([nil nil ((901 . 920)) nil (26109 245 206691 950000) 0 nil])
([nil nil ((909 . 911) (t 26109 245 305435 253000)) nil (26109 276 126519 212000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -910) (undo-tree-id326 . -1) 911) nil (26109 276 126518 91000) 0 nil])
([nil nil ((910 . 913)) nil (26109 276 126516 392000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -910) (undo-tree-id323 . -1) (#("b" 0 1 (face font-lock-string-face fontified t)) . -911) (undo-tree-id324 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . -912) (undo-tree-id325 . -1) 913) nil (26109 276 126515 140000) 0 nil])
([nil nil ((910 . 912)) nil (26109 276 126511 582000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -910) (undo-tree-id321 . -1) (#("y" 0 1 (fontified t)) . -911) (undo-tree-id322 . -1) 912) nil (26109 276 126510 389000) 0 nil])
([nil nil ((910 . 915)) nil (26109 276 126507 651000) 0 nil])
([nil nil ((915 . 936)) nil (26109 276 126506 902000) 0 nil])
([nil nil ((936 . 939)) nil (26109 276 126506 21000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -938) (undo-tree-id320 . -1) 939) nil (26109 276 126504 965000) 0 nil])
([nil nil ((#("in" 0 2 (fontified t)) . -936) (undo-tree-id319 . -2) 938) nil (26109 276 126502 672000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -934) (undo-tree-id317 . -1) (#(" " 0 1 (fontified t)) . -935) (undo-tree-id318 . -1) 936) nil (26109 276 126499 614000) 0 nil])
([nil nil ((934 . 938)) nil (26109 276 126488 213000) 0 nil])
([nil nil ((949 . 950)) nil (26109 276 126483 726000) 0 nil])
([nil nil ((1108 . 1112) (t 26109 276 186419 740000)) nil (26109 416 756596 95000) 0 nil])
([nil nil ((1112 . 1113)) nil (26109 416 756594 693000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1112) (undo-tree-id333 . -1) 1113) nil (26109 416 756593 636000) 0 nil])
([nil nil ((1112 . 1116)) nil (26109 416 756591 888000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1112) (undo-tree-id332 . -4) 1116) nil (26109 416 756590 912000) 0 nil])
([nil nil ((1112 . 1115)) nil (26109 416 756589 49000) 0 nil])
([nil nil ((#("for" 0 3 (face font-lock-keyword-face fontified t)) . -1112) (undo-tree-id331 . -3) 1115) nil (26109 416 756588 138000) 0 nil])
([nil nil ((1112 . 1120)) nil (26109 416 756586 158000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1119) (undo-tree-id330 . -1) 1120) nil (26109 416 756584 997000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -1118) (undo-tree-id329 . -1) 1119) nil (26109 416 756582 477000) 0 nil])
([nil nil ((1118 . 1123)) nil (26109 416 944471 566000) 0 nil])
([nil nil ((1123 . 1124)) nil (26109 477 608038 344000) 0 nil] [nil nil ((#("freq = " 0 4 (face font-lock-variable-name-face fontified t) 4 7 (fontified t)) . -1116) (undo-tree-id328 . -7) 1123) ((1116 . 1123)) (26109 416 756644 341000) 0 nil])
([nil nil ((1124 . 1129)) nil (26109 477 608037 88000) 0 nil])
([nil nil ((#("max_" 0 4 (fontified t)) . -1112) (undo-tree-id327 . -4) 1116) ((1112 . 1116)) (26109 416 756569 784000) 0 nil])
([nil nil ((1129 . 1130)) nil (26109 477 608035 819000) 0 nil])
nil
([nil nil ((#("i" 0 1 (fontified t)) . -1129) (undo-tree-id446 . -1) 1130) nil (26109 477 608034 190000) 0 nil])
([nil nil ((1129 . 1134)) nil (26109 477 608030 684000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1133) (undo-tree-id445 . -1) 1134) nil (26109 477 608029 154000) 0 nil])
([nil nil ((1133 . 1142)) nil (26109 477 608025 192000) 0 nil])
([nil nil ((1142 . 1151)) nil (26109 477 608014 351000) 0 nil])
([nil nil ((1151 . 1155)) nil (26109 477 608013 614000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1154) (undo-tree-id444 . -1) 1155) nil (26109 477 608012 674000) 0 nil])
([nil nil ((1154 . 1156)) nil (26109 477 608010 974000) 0 nil])
([nil nil ((1156 . 1170)) nil (26109 477 608010 150000) 0 nil])
([nil nil ((1170 . 1183)) nil (26109 477 608009 309000) 0 nil])
([nil nil ((1183 . 1186)) nil (26109 477 608008 586000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1185) (undo-tree-id443 . -1) 1186) nil (26109 477 608007 659000) 0 nil])
([nil nil ((1185 . 1193)) nil (26109 477 608005 974000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1192) (undo-tree-id442 . -1) 1193) nil (26109 477 608004 921000) 0 nil])
([nil nil ((1192 . 1200)) nil (26109 477 608003 197000) 0 nil])
([nil nil ((1107 . 1112)) nil (26109 477 608002 470000) 0 nil])
([nil nil ((1112 . 1113)) nil (26109 477 608001 707000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1112) (undo-tree-id441 . -1) 1113) nil (26109 477 608000 773000) 0 nil])
([nil nil ((1112 . 1121)) nil (26109 477 607999 11000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1120) (undo-tree-id440 . -1) 1121) nil (26109 477 607997 985000) 0 nil])
([nil nil ((1120 . 1124)) nil (26109 477 607996 159000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1122) (undo-tree-id438 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . -1123) (undo-tree-id439 . -1) 1124) nil (26109 477 607994 980000) 0 nil])
([nil nil ((1122 . 1125)) nil (26109 477 607992 175000) 0 nil])
([nil nil ((1218 . 1231)) nil (26109 477 607991 406000) 0 nil])
([nil nil ((1231 . 1244)) nil (26109 477 607990 616000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1243) (undo-tree-id437 . -1) 1244) nil (26109 477 607989 697000) 0 nil])
([nil nil ((#("x[" 0 2 (fontified t)) . -1241) (undo-tree-id436 . -2) 1243) nil (26109 477 607987 695000) 0 nil])
([nil nil ((#("foo" 0 3 (fontified t)) . -1212) (undo-tree-id435 . -3) 1215) nil (26109 477 607985 735000) 0 nil])
([nil nil ((1212 . 1213)) nil (26109 477 607983 967000) 0 nil])
([nil nil ((1239 . 1241)) nil (26109 477 607983 192000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1240) (undo-tree-id434 . -1) 1241) nil (26109 477 607982 193000) 0 nil])
([nil nil ((1240 . 1243)) nil (26109 477 607980 376000) 0 nil])
([nil nil ((1243 . 1256)) nil (26109 477 607979 566000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1252) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) 1256) nil (26109 477 607978 345000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1248) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) 1252) nil (26109 477 607973 401000) 0 nil])
([nil nil ((1245 . 1257) (#("    " 0 4 (fontified nil)) . 1244) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (1248 . 1249)) nil (26109 477 607967 106000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1253) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) 1257) nil (26109 477 607960 975000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1249) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) 1253) nil (26109 477 607956 192000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1245) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) 1249) nil (26109 477 607948 557000) 0 nil])
([nil nil ((1 . 1244) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    hexed_lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in hexed_lines]
    foo = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    bar = [xor_bytes(foo[i][0] * len(lines[i]), lines[i]) for i in range(len(lines))]
    the_key = b\"\"
    max_freq = 0
    for x in foo:
        if x[1] > max_freq:
            max_freq = x[1]
            the_key = x[0]

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 656 (fontified t) 656 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 681 (fontified t) 681 702 (fontified t) 702 703 (fontified t) 703 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 764 (fontified t) 764 768 (fontified t) 768 779 (face font-lock-variable-name-face fontified t) 779 808 (fontified t) 808 812 (face font-lock-string-face fontified t) 812 813 (fontified t) 813 814 (fontified t) 814 839 (fontified t) 839 843 (fontified t) 843 845 (face font-lock-comment-delimiter-face fontified t) 845 850 (face font-lock-comment-face fontified t) 850 871 (face font-lock-comment-face fontified t) 871 874 (face font-lock-comment-face fontified t) 874 880 (face font-lock-comment-face fontified t) 880 882 (face font-lock-comment-face fontified t) 882 896 (face font-lock-comment-face fontified t) 896 900 (fontified t) 900 905 (face font-lock-variable-name-face fontified t) 905 928 (fontified t) 928 931 (face font-lock-keyword-face fontified t) 931 934 (fontified t) 934 936 (face font-lock-keyword-face fontified t) 936 937 (fontified t) 937 949 (fontified t) 949 950 (fontified t) 950 954 (fontified t) 954 957 (face font-lock-variable-name-face fontified t) 957 993 (fontified t) 993 996 (face font-lock-keyword-face fontified t) 996 999 (fontified t) 999 1001 (face font-lock-keyword-face fontified t) 1001 1002 (fontified t) 1002 1007 (face font-lock-builtin-face fontified t) 1007 1008 (fontified t) 1008 1011 (face font-lock-builtin-face fontified t) 1011 1021 (fontified t) 1021 1025 (fontified t) 1025 1028 (face font-lock-variable-name-face fontified t) 1028 1054 (fontified t) 1054 1057 (face font-lock-builtin-face fontified t) 1057 1079 (fontified t) 1079 1082 (face font-lock-keyword-face fontified t) 1082 1085 (fontified t) 1085 1087 (face font-lock-keyword-face fontified t) 1087 1088 (fontified t) 1088 1093 (face font-lock-builtin-face fontified t) 1093 1094 (fontified t) 1094 1097 (face font-lock-builtin-face fontified t) 1097 1107 (fontified t) 1107 1111 (fontified t) 1111 1118 (face font-lock-variable-name-face fontified t) 1118 1122 (fontified t) 1122 1124 (face font-lock-string-face fontified t) 1124 1125 (fontified t) 1125 1129 (fontified t) 1129 1133 (face font-lock-variable-name-face fontified t) 1133 1137 (face font-lock-variable-name-face fontified t) 1137 1142 (fontified t) 1142 1146 (fontified t) 1146 1149 (face font-lock-keyword-face fontified t) 1149 1152 (fontified t) 1152 1154 (face font-lock-keyword-face fontified t) 1154 1160 (fontified t) 1160 1168 (fontified t) 1168 1170 (face font-lock-keyword-face fontified t) 1170 1178 (fontified t) 1178 1186 (face font-lock-variable-name-face fontified t) 1186 1188 (fontified t) 1188 1200 (fontified t) 1200 1208 (face font-lock-variable-name-face fontified t) 1208 1216 (fontified t) 1216 1228 (fontified t) 1228 1235 (face font-lock-variable-name-face fontified t) 1235 1243 (fontified t) 1243 1244 (fontified t)) . -1) (undo-tree-id334 . -1025) (undo-tree-id335 . -763) (undo-tree-id336 . -681) (undo-tree-id337 . -763) (undo-tree-id338 . -1125) (undo-tree-id339 . -1125) (undo-tree-id340 . -1244) (undo-tree-id341 . -768) (undo-tree-id342 . -1106) (undo-tree-id343 . -622) (undo-tree-id344 . -730) (undo-tree-id345 . -1106) (undo-tree-id346 . -839) (undo-tree-id347 . -949) (undo-tree-id348 . -900) (undo-tree-id349 . -954) (undo-tree-id350 . -1111) (undo-tree-id351 . -1121) (undo-tree-id352 . -1111) (undo-tree-id353 . -1111) (undo-tree-id354 . -1121) (undo-tree-id355 . -1111) (undo-tree-id356 . -1111) (undo-tree-id357 . -1121) (undo-tree-id358 . -1111) (undo-tree-id359 . -1111) (undo-tree-id360 . -1121) (undo-tree-id361 . -1111) (undo-tree-id362 . -1111) (undo-tree-id363 . -1121) (undo-tree-id364 . 29) (undo-tree-id365 . -1216) (undo-tree-id366 . -1200) (undo-tree-id367 . -1200) (undo-tree-id368 . -1228) (undo-tree-id369 . 2) (undo-tree-id370 . -1243) (undo-tree-id371 . -1228) (undo-tree-id372 . -1228) (undo-tree-id373 . -1243) (undo-tree-id374 . -1243) (undo-tree-id375 . -1228) (undo-tree-id376 . -1228) (undo-tree-id377 . -1243) (undo-tree-id378 . -1243) (undo-tree-id379 . -1228) (undo-tree-id380 . -1228) (undo-tree-id381 . -1243) (undo-tree-id382 . 1) (undo-tree-id383 . -1244) (undo-tree-id384 . -1228) (undo-tree-id385 . -1228) (undo-tree-id386 . -1244) (undo-tree-id387 . -1244) (undo-tree-id388 . -1228) (undo-tree-id389 . -1228) (undo-tree-id390 . -1244) (undo-tree-id391 . -1244) (undo-tree-id392 . -1228) (undo-tree-id393 . -1228) (undo-tree-id394 . -1244) (undo-tree-id395 . -1244) (undo-tree-id396 . -1228) (undo-tree-id397 . -1228) (undo-tree-id398 . -1244) (undo-tree-id399 . -1244) 1245) nil (26109 477 607934 526000) 0 nil])
([nil nil ((1142 . 1147) (t 26109 477 677843 47000)) nil (26109 532 620418 503000) 0 nil])
([nil nil ((1147 . 1150)) nil (26109 532 620417 498000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1147) (undo-tree-id455 . -1) (#("d" 0 1 (fontified t)) . -1148) (undo-tree-id456 . -1) (#("e" 0 1 (fontified t)) . -1149) (undo-tree-id457 . -1) 1150) nil (26109 532 620415 532000) 0 nil])
([nil nil ((1109 . 1113) (#("    " 0 4 (fontified nil)) . 1108) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (1112 . 1113)) nil (26109 532 620410 844000) 0 nil])
([nil nil ((1148 . 1157)) nil (26109 532 620395 475000) 0 nil])
([nil nil ((1157 . 1162)) nil (26109 532 620394 666000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1171) (undo-tree-id452 . -1) 1172) nil (26109 532 620393 581000) 0 nil])
([nil nil ((1171 . 1173)) nil (26109 532 620391 589000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1172) (undo-tree-id451 . -1) 1173) nil (26109 532 620390 458000) 0 nil])
([nil nil ((1176 . 1186)) nil (26109 532 620387 776000) 0 nil])
([nil nil ((1189 . 1191)) nil (26109 532 620386 910000) 0 nil])
([nil nil ((1275 . 1288)) nil (26109 532 620386 19000) 0 nil])
([nil nil ((1288 . 1297)) nil (26109 532 620384 590000) 0 nil])
([nil nil ((1 . 1294) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    hexed_lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in hexed_lines]
    foo = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    bar = [xor_bytes(foo[i][0] * len(lines[i]), lines[i]) for i in range(len(lines))]

    the_key = b\"\"
    max_freq = 0
    index = 0
    
    for i in range(len(foo)):
        if x[1] > max_freq:
            max_freq = x[1]
            the_key = x[0]
            index = i
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 808 (fontified t) 808 812 (face font-lock-string-face fontified t) 812 843 (fontified t) 843 845 (face font-lock-comment-delimiter-face fontified t) 845 896 (face font-lock-comment-face fontified t) 896 928 (fontified t) 928 931 (face font-lock-keyword-face fontified t) 931 934 (fontified t) 934 936 (face font-lock-keyword-face fontified t) 936 993 (fontified t) 993 996 (face font-lock-keyword-face fontified t) 996 999 (fontified t) 999 1001 (face font-lock-keyword-face fontified t) 1001 1002 (fontified t) 1002 1007 (face font-lock-builtin-face fontified t) 1007 1008 (fontified t) 1008 1011 (face font-lock-builtin-face fontified t) 1011 1054 (fontified t) 1054 1057 (face font-lock-builtin-face fontified t) 1057 1079 (fontified t) 1079 1082 (face font-lock-keyword-face fontified t) 1082 1085 (fontified t) 1085 1087 (face font-lock-keyword-face fontified t) 1087 1088 (fontified t) 1088 1093 (face font-lock-builtin-face fontified t) 1093 1094 (fontified t) 1094 1097 (face font-lock-builtin-face fontified t) 1097 1107 (fontified t) 1107 1112 (fontified t) 1112 1119 (face font-lock-variable-name-face fontified t) 1119 1123 (fontified t) 1123 1125 (face font-lock-string-face fontified t) 1125 1126 (fontified t) 1126 1130 (fontified t) 1130 1138 (face font-lock-variable-name-face fontified t) 1138 1143 (fontified t) 1143 1147 (fontified t) 1147 1152 (face font-lock-variable-name-face fontified t) 1152 1161 (fontified t) 1161 1162 (fontified t) 1162 1166 (fontified t) 1166 1169 (face font-lock-keyword-face fontified t) 1169 1172 (fontified t) 1172 1174 (face font-lock-keyword-face fontified t) 1174 1175 (fontified t) 1175 1180 (face font-lock-builtin-face fontified t) 1180 1181 (fontified t) 1181 1184 (face font-lock-builtin-face fontified t) 1184 1192 (fontified t) 1192 1200 (fontified t) 1200 1202 (face font-lock-keyword-face fontified t) 1202 1210 (fontified t) 1210 1218 (face font-lock-variable-name-face fontified t) 1218 1248 (fontified t) 1248 1260 (fontified t) 1260 1267 (face font-lock-variable-name-face fontified t) 1267 1275 (fontified t) 1275 1287 (fontified t) 1287 1292 (face font-lock-variable-name-face fontified t) 1292 1296 (fontified t) 1296 1297 (fontified t)) . 1) (undo-tree-id447 . -1107) (undo-tree-id448 . -1296) (undo-tree-id449 . -1130) (undo-tree-id450 . -1275) 1297) nil (26109 532 620379 614000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1200) (undo-tree-id465 . -1) 1201 (t 26109 532 758598 882000)) nil (26109 555 87372 610000) 0 nil])
([nil nil ((1200 . 1206)) nil (26109 555 87370 544000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1245) (undo-tree-id464 . -1) 1246) nil (26109 555 87369 646000) 0 nil])
([nil nil ((1245 . 1248)) nil (26109 555 87367 719000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1246) (undo-tree-id462 . -1) (#("i" 0 1 (fontified t)) . -1247) (undo-tree-id463 . -1) 1248) nil (26109 555 87366 592000) 0 nil])
([nil nil ((1246 . 1251)) nil (26109 555 87363 376000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1277) (undo-tree-id461 . -1) 1278) nil (26109 555 87362 60000) 0 nil])
([nil nil ((1277 . 1282)) nil (26109 555 87359 705000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1281) (undo-tree-id458 . -1) (undo-tree-id459 . 1) (undo-tree-id460 . -1) 1282) nil (26109 555 87357 615000) 0 nil])
([nil nil ((1281 . 1283)) nil (26109 555 87341 927000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -774) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 775 (t 26109 555 161313 15000)) nil (26109 608 699658 449000) 0 nil])
([nil nil ((#("hexed" 0 5 (face font-lock-variable-name-face fontified t)) . -769) (undo-tree-id466 . -5) (undo-tree-id467 . -5) 774) nil (26109 608 699651 132000) 0 nil])
([nil nil ((#("hexed_" 0 6 (fontified t)) . -932) (undo-tree-id470 . -6) 938 (t 26109 608 832023 871000)) nil (26109 615 620624 198000) 0 nil])
([nil nil ((#("foo" 0 3 (face font-lock-variable-name-face fontified t)) . -943) (undo-tree-id495 . -3) 946 (t 26109 615 744244 211000)) nil (26109 885 303131 393000) 0 nil])
([nil nil ((943 . 947)) nil (26109 885 303129 471000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -943) (undo-tree-id491 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -944) (undo-tree-id492 . -1) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -945) (undo-tree-id493 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -946) (undo-tree-id494 . -1) 947) nil (26109 885 303128 37000) 0 nil])
([nil nil ((943 . 950)) nil (26109 885 303122 846000) 0 nil])
([nil nil ((#("guesses" 0 7 (face font-lock-variable-name-face fontified t)) . -943) (undo-tree-id490 . -7) 950) nil (26109 885 303121 888000) 0 nil])
([nil nil ((943 . 947)) nil (26109 885 303120 150000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -946) (undo-tree-id489 . -1) 947) nil (26109 885 303119 74000) 0 nil])
([nil nil ((#("gue" 0 3 (face font-lock-variable-name-face fontified t)) . -943) (undo-tree-id488 . -3) 946) nil (26109 885 303117 227000) 0 nil])
([nil nil ((943 . 948)) nil (26109 885 303115 375000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -947) (undo-tree-id487 . -1) 948) nil (26109 885 303114 392000) 0 nil])
([nil nil ((947 . 954)) nil (26109 885 303112 273000) 0 nil])
([nil nil ((#("bar" 0 3 (face font-lock-variable-name-face fontified t)) . -1022) (undo-tree-id486 . -3) 1025) nil (26109 885 303111 266000) 0 nil])
([nil nil ((1022 . 1034)) nil (26109 885 303109 495000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1032) (undo-tree-id484 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1033) (undo-tree-id485 . -1) 1034) nil (26109 885 303108 449000) 0 nil])
([nil nil ((1032 . 1034)) nil (26109 885 303105 650000) 0 nil])
([nil nil ((#("foo" 0 3 (fontified t)) . -1306) (1309 . 1320) (#("foo" 0 3 (fontified t)) . -1266) (1269 . 1280) (#("foo" 0 3 (fontified t)) . -1213) (1216 . 1227) (#("foo" 0 3 (fontified t)) . -1187) (1190 . 1201) 1113) nil (26109 885 303104 73000) 0 nil])
([nil nil ((1346 . 1358)) nil (26109 885 303101 856000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1354) (undo-tree-id483 . -4) 1358) nil (26109 885 303100 874000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1350) (undo-tree-id482 . -4) 1354) nil (26109 885 303098 980000) 0 nil])
([nil nil ((1347 . 1359) (#("    " 0 4 (fontified nil)) . 1346) (undo-tree-id481 . -4) (1350 . 1351)) nil (26109 885 303096 760000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1355) (undo-tree-id480 . -4) 1359) nil (26109 885 303094 658000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1351) (undo-tree-id479 . -4) 1355) nil (26109 885 303092 582000) 0 nil])
([nil nil ((1351 . 1372)) nil (26109 885 303090 695000) 0 nil])
([nil nil ((1372 . 1377)) nil (26109 885 303089 894000) 0 nil])
([nil nil ((1153 . 1158)) nil (26109 885 303089 52000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1157) (undo-tree-id478 . -1) 1158) nil (26109 885 303087 717000) 0 nil])
([nil nil ((1340 . 1344)) nil (26109 885 303085 50000) 0 nil])
([nil nil ((1378 . 1382)) nil (26109 885 303083 715000) 0 nil])
([nil nil ((1 . 1404) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [xor_bytes(foo[i][0] * len(lines[i]), lines[i]) for i in range(len(lines))]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 764 (fontified t) 764 768 (fontified t) 768 773 (face font-lock-variable-name-face fontified t) 773 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 808 (fontified t) 808 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 894 (fontified t) 894 899 (face font-lock-variable-name-face fontified t) 899 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 938 (fontified t) 938 942 (fontified t) 942 953 (face font-lock-variable-name-face fontified t) 953 989 (fontified t) 989 992 (face font-lock-keyword-face fontified t) 992 995 (fontified t) 995 997 (face font-lock-keyword-face fontified t) 997 998 (fontified t) 998 1003 (face font-lock-builtin-face fontified t) 1003 1004 (fontified t) 1004 1007 (face font-lock-builtin-face fontified t) 1007 1017 (fontified t) 1017 1021 (fontified t) 1021 1033 (face font-lock-variable-name-face fontified t) 1033 1059 (fontified t) 1059 1062 (face font-lock-builtin-face fontified t) 1062 1084 (fontified t) 1084 1087 (face font-lock-keyword-face fontified t) 1087 1090 (fontified t) 1090 1092 (face font-lock-keyword-face fontified t) 1092 1093 (fontified t) 1093 1098 (face font-lock-builtin-face fontified t) 1098 1099 (fontified t) 1099 1102 (face font-lock-builtin-face fontified t) 1102 1112 (fontified t) 1112 1117 (fontified t) 1117 1124 (face font-lock-variable-name-face fontified t) 1124 1128 (fontified t) 1128 1130 (face font-lock-string-face fontified t) 1130 1135 (fontified t) 1135 1143 (face font-lock-variable-name-face fontified t) 1143 1148 (fontified t) 1148 1152 (fontified t) 1152 1156 (face font-lock-variable-name-face fontified t) 1156 1161 (face font-lock-variable-name-face fontified t) 1161 1166 (fontified t) 1166 1167 (fontified t) 1167 1171 (fontified t) 1171 1174 (face font-lock-keyword-face fontified t) 1174 1177 (fontified t) 1177 1179 (face font-lock-keyword-face fontified t) 1179 1180 (fontified t) 1180 1185 (face font-lock-builtin-face fontified t) 1185 1186 (fontified t) 1186 1189 (face font-lock-builtin-face fontified t) 1189 1190 (fontified t) 1190 1201 (fontified t) 1201 1205 (fontified t) 1205 1213 (fontified t) 1213 1215 (face font-lock-keyword-face fontified t) 1215 1216 (fontified t) 1216 1227 (fontified t) 1227 1236 (fontified t) 1236 1244 (face font-lock-variable-name-face fontified t) 1244 1246 (fontified t) 1246 1258 (fontified t) 1258 1266 (fontified t) 1266 1269 (fontified t) 1269 1280 (fontified t) 1280 1287 (fontified t) 1287 1299 (fontified t) 1299 1306 (face font-lock-variable-name-face fontified t) 1306 1309 (fontified t) 1309 1320 (fontified t) 1320 1327 (fontified t) 1327 1339 (fontified t) 1339 1343 (face font-lock-variable-name-face fontified t) 1343 1348 (face font-lock-variable-name-face fontified t) 1348 1353 (fontified t) 1353 1354 (fontified t) 1354 1358 (fontified nil) 1358 1363 (face font-lock-builtin-face fontified nil) 1363 1381 (fontified nil) 1381 1388 (fontified nil) 1388 1389 (fontified nil)) . 1) (undo-tree-id471 . -1113) (undo-tree-id472 . -1352) (undo-tree-id473 . -1112) (undo-tree-id474 . -1353) (undo-tree-id475 . -1381) (undo-tree-id476 . -1112) (undo-tree-id477 . -1354) (1389 . 1390) 1382) nil (26109 885 303078 758000) 0 nil])
([nil nil ((#("foo" 0 3 (fontified t)) . -1057) (undo-tree-id503 . -3) 1060 (t 26109 885 470579 982000)) nil (26109 909 361938 740000) 0 nil])
([nil nil ((1057 . 1068)) nil (26109 909 361935 569000) 0 nil])
([nil nil ((1 . 1420) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i]) for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 989 (fontified t) 989 992 (face font-lock-keyword-face fontified t) 992 995 (fontified t) 995 997 (face font-lock-keyword-face fontified t) 997 998 (fontified t) 998 1003 (face font-lock-builtin-face fontified t) 1003 1004 (fontified t) 1004 1007 (face font-lock-builtin-face fontified t) 1007 1038 (fontified t) 1038 1076 (fontified t) 1076 1079 (face font-lock-builtin-face fontified t) 1079 1101 (fontified t) 1101 1104 (face font-lock-keyword-face fontified t) 1104 1107 (fontified t) 1107 1109 (face font-lock-keyword-face fontified t) 1109 1110 (fontified t) 1110 1115 (face font-lock-builtin-face fontified t) 1115 1116 (fontified t) 1116 1119 (face font-lock-builtin-face fontified t) 1119 1128 (fontified t) 1128 1150 (fontified t) 1150 1152 (face font-lock-string-face fontified t) 1152 1193 (fontified t) 1193 1196 (face font-lock-keyword-face fontified t) 1196 1199 (fontified t) 1199 1201 (face font-lock-keyword-face fontified t) 1201 1202 (fontified t) 1202 1207 (face font-lock-builtin-face fontified t) 1207 1208 (fontified t) 1208 1211 (face font-lock-builtin-face fontified t) 1211 1235 (fontified t) 1235 1237 (face font-lock-keyword-face fontified t) 1237 1380 (fontified t) 1380 1385 (face font-lock-builtin-face fontified t) 1385 1411 (fontified t)) . 1) (undo-tree-id496 . -1389) (undo-tree-id497 . -1067) (undo-tree-id498 . 344) (undo-tree-id499 . -1068) (undo-tree-id500 . 342) (undo-tree-id501 . -1070) (undo-tree-id502 . -1038) 1068) nil (26109 909 361931 108000) 0 nil])
([nil nil ((938 . 943) (t 26109 909 508169 118000)) nil (26109 986 606083 145000) 0 nil])
([nil nil ((943 . 947)) nil (26109 986 606082 116000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-comment-face fontified t)) . -944) (undo-tree-id521 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -945) (undo-tree-id522 . -1) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -946) (undo-tree-id523 . -1) 947) nil (26109 986 606080 788000) 0 nil])
([nil nil ((944 . 949)) nil (26109 986 606077 70000) 0 nil])
([nil nil ((949 . 951)) nil (26109 986 606076 235000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-comment-face fontified t)) . -949) (undo-tree-id519 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -950) (undo-tree-id520 . -1) 951) nil (26109 986 606075 83000) 0 nil])
([nil nil ((#("Key " 0 4 (face font-lock-comment-face fontified t)) . -945) (undo-tree-id518 . -4) 949) nil (26109 986 606072 43000) 0 nil])
([nil nil ((945 . 965)) nil (26109 986 606070 286000) 0 nil])
([nil nil ((#("lin" 0 3 (face font-lock-comment-face fontified t)) . -962) (undo-tree-id517 . -3) 965) nil (26109 986 606069 276000) 0 nil])
([nil nil ((#("each " 0 5 (face font-lock-comment-face fontified t)) . -957) (undo-tree-id516 . -5) 962) nil (26109 986 606067 215000) 0 nil])
([nil nil ((#("for " 0 4 (face font-lock-comment-face fontified t)) . -953) (undo-tree-id515 . -4) 957) nil (26109 986 606065 239000) 0 nil])
([nil nil ((#("Guesses " 0 8 (face font-lock-comment-face fontified t)) . -945) (undo-tree-id514 . -8) 953) nil (26109 986 606062 301000) 0 nil])
([nil nil ((945 . 966)) nil (26109 986 606060 342000) 0 nil])
([nil nil ((966 . 985)) nil (26109 986 606059 558000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-comment-face fontified t)) . -984) (undo-tree-id513 . -1) 985) nil (26109 986 606058 293000) 0 nil])
([nil nil ((984 . 1005)) nil (26109 986 606048 59000) 0 nil])
([nil nil ((1005 . 1012)) nil (26109 986 606047 138000) 0 nil])
([nil nil ((1012 . 1026)) nil (26109 986 606045 840000) 0 nil])
([nil nil ((1 . 1507) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    # Key guesses for each line, and also the character frequency of the xored string. 
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 894 (fontified t) 894 899 (face font-lock-variable-name-face fontified t) 899 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 938 (fontified t) 938 942 (fontified t) 942 944 (face font-lock-comment-delimiter-face fontified t) 944 1025 (face font-lock-comment-face fontified t) 1025 1026 (face font-lock-comment-face fontified t) 1026 1030 (fontified t) 1030 1041 (face font-lock-variable-name-face fontified t) 1041 1077 (fontified t) 1077 1080 (face font-lock-keyword-face fontified t) 1080 1083 (fontified t) 1083 1085 (face font-lock-keyword-face fontified t) 1085 1086 (fontified t) 1086 1091 (face font-lock-builtin-face fontified t) 1091 1092 (fontified t) 1092 1095 (face font-lock-builtin-face fontified t) 1095 1109 (fontified t) 1109 1121 (face font-lock-variable-name-face fontified t) 1121 1164 (fontified t) 1164 1167 (face font-lock-builtin-face fontified t) 1167 1197 (fontified t) 1197 1200 (face font-lock-keyword-face fontified t) 1200 1203 (fontified t) 1203 1205 (face font-lock-keyword-face fontified t) 1205 1206 (fontified t) 1206 1211 (face font-lock-builtin-face fontified t) 1211 1212 (fontified t) 1212 1215 (face font-lock-builtin-face fontified t) 1215 1235 (fontified t) 1235 1242 (face font-lock-variable-name-face fontified t) 1242 1246 (fontified t) 1246 1248 (face font-lock-string-face fontified t) 1248 1253 (fontified t) 1253 1261 (face font-lock-variable-name-face fontified t) 1261 1270 (fontified t) 1270 1279 (face font-lock-variable-name-face fontified t) 1279 1289 (fontified t) 1289 1292 (face font-lock-keyword-face fontified t) 1292 1295 (fontified t) 1295 1297 (face font-lock-keyword-face fontified t) 1297 1298 (fontified t) 1298 1303 (face font-lock-builtin-face fontified t) 1303 1304 (fontified t) 1304 1307 (face font-lock-builtin-face fontified t) 1307 1331 (fontified t) 1331 1333 (face font-lock-keyword-face fontified t) 1333 1354 (fontified t) 1354 1362 (face font-lock-variable-name-face fontified t) 1362 1417 (fontified t) 1417 1424 (face font-lock-variable-name-face fontified t) 1424 1457 (fontified t) 1457 1466 (face font-lock-variable-name-face fontified t) 1466 1476 (fontified t) 1476 1481 (face font-lock-builtin-face fontified t) 1481 1507 (fontified t)) . 1) (undo-tree-id504 . -1025) (undo-tree-id505 . -1092) (undo-tree-id506 . -1235) (undo-tree-id507 . -1235) (undo-tree-id508 . -1245) (undo-tree-id509 . -938) (undo-tree-id510 . -1235) (undo-tree-id511 . -1235) (undo-tree-id512 . -1245) 1026) nil (26109 1008 124106 398000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 1014) (1008 . 1014) (1008 . 1009) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . 1008) (1007 . 1008) (1025 . 1026)) nil (26109 1013 724156 509000) 0 nil] [nil nil ((1025 . 1046)) ((#(" apewfoijaw pefji awo" 0 21 (face font-lock-comment-face fontified t)) . 1025) (undo-tree-id534 . -21)) (26109 1007 533805 32000) 0 nil] [nil nil ((1025 . 1045) (t 26109 986 742885 541000)) ((#("   asdfasd fadfsadf " 0 20 (face font-lock-comment-face fontified t)) . 1025) (undo-tree-id530 . -20)) (26109 1001 614714 900000) 0 nil])
([nil nil ((1 . 1513) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    # Key guesses for each line, and also the character frequency of
    # the xored string. 
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 938 (fontified t) 938 942 (fontified t) 942 944 (face font-lock-comment-delimiter-face fontified t) 944 1007 (face font-lock-comment-face fontified t) 1007 1011 (fontified t) 1011 1013 (face font-lock-comment-delimiter-face fontified t) 1013 1032 (face font-lock-comment-face fontified t) 1032 1036 (fontified t) 1036 1047 (face font-lock-variable-name-face fontified t) 1047 1083 (fontified t) 1083 1086 (face font-lock-keyword-face fontified t) 1086 1089 (fontified t) 1089 1091 (face font-lock-keyword-face fontified t) 1091 1092 (fontified t) 1092 1097 (face font-lock-builtin-face fontified t) 1097 1098 (fontified t) 1098 1101 (face font-lock-builtin-face fontified t) 1101 1115 (fontified t) 1115 1127 (face font-lock-variable-name-face fontified t) 1127 1170 (fontified t) 1170 1173 (face font-lock-builtin-face fontified t) 1173 1203 (fontified t) 1203 1206 (face font-lock-keyword-face fontified t) 1206 1209 (fontified t) 1209 1211 (face font-lock-keyword-face fontified t) 1211 1212 (fontified t) 1212 1217 (face font-lock-builtin-face fontified t) 1217 1218 (fontified t) 1218 1221 (face font-lock-builtin-face fontified t) 1221 1241 (fontified t) 1241 1248 (face font-lock-variable-name-face fontified t) 1248 1252 (fontified t) 1252 1254 (face font-lock-string-face fontified t) 1254 1259 (fontified t) 1259 1267 (face font-lock-variable-name-face fontified t) 1267 1276 (fontified t) 1276 1285 (face font-lock-variable-name-face fontified t) 1285 1295 (fontified t) 1295 1298 (face font-lock-keyword-face fontified t) 1298 1301 (fontified t) 1301 1303 (face font-lock-keyword-face fontified t) 1303 1304 (fontified t) 1304 1309 (face font-lock-builtin-face fontified t) 1309 1310 (fontified t) 1310 1313 (face font-lock-builtin-face fontified t) 1313 1337 (fontified t) 1337 1339 (face font-lock-keyword-face fontified t) 1339 1360 (fontified t) 1360 1368 (face font-lock-variable-name-face fontified t) 1368 1423 (fontified t) 1423 1430 (face font-lock-variable-name-face fontified t) 1430 1463 (fontified t) 1463 1472 (face font-lock-variable-name-face fontified t) 1472 1482 (fontified t) 1482 1487 (face font-lock-builtin-face fontified t) 1487 1507 (fontified t) 1507 1513 (fontified t)) . 1) (undo-tree-id535 . -1110) (undo-tree-id536 . -1030) (undo-tree-id537 . -1030) (undo-tree-id538 . -1030) (undo-tree-id539 . -1031) (undo-tree-id540 . -1007) (undo-tree-id541 . -1241) (undo-tree-id542 . -1241) (undo-tree-id543 . -1251) 1032) nil (26109 1013 724149 135000) 0 nil])
([nil nil ((1046 . 1067)) ((#("pefj awopef jawpoef j" 0 21 (face font-lock-comment-face fontified t)) . 1046) (undo-tree-id533 . -21)) (26109 1007 327825 330000) 0 nil])
([nil nil ((1 . 1526) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    # Key guesses for each line, and also the character frequency of the xored string.   asdfasd fadfsadf 
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 938 (fontified t) 938 942 (fontified t) 942 944 (face font-lock-comment-delimiter-face fontified t) 944 1045 (face font-lock-comment-face fontified t) 1045 1096 (fontified t) 1096 1099 (face font-lock-keyword-face fontified t) 1099 1102 (fontified t) 1102 1104 (face font-lock-keyword-face fontified t) 1104 1105 (fontified t) 1105 1110 (face font-lock-builtin-face fontified t) 1110 1111 (fontified t) 1111 1114 (face font-lock-builtin-face fontified t) 1114 1183 (fontified t) 1183 1186 (face font-lock-builtin-face fontified t) 1186 1216 (fontified t) 1216 1219 (face font-lock-keyword-face fontified t) 1219 1222 (fontified t) 1222 1224 (face font-lock-keyword-face fontified t) 1224 1225 (fontified t) 1225 1230 (face font-lock-builtin-face fontified t) 1230 1231 (fontified t) 1231 1234 (face font-lock-builtin-face fontified t) 1234 1265 (fontified t) 1265 1267 (face font-lock-string-face fontified t) 1267 1308 (fontified t) 1308 1311 (face font-lock-keyword-face fontified t) 1311 1314 (fontified t) 1314 1316 (face font-lock-keyword-face fontified t) 1316 1317 (fontified t) 1317 1322 (face font-lock-builtin-face fontified t) 1322 1323 (fontified t) 1323 1326 (face font-lock-builtin-face fontified t) 1326 1350 (fontified t) 1350 1352 (face font-lock-keyword-face fontified t) 1352 1495 (fontified t) 1495 1500 (face font-lock-builtin-face fontified t) 1500 1520 (fontified t) 1520 1526 (fontified t)) . 1) (undo-tree-id524 . -1304) (undo-tree-id525 . -1044) (undo-tree-id526 . -1123) (undo-tree-id527 . -938) 1045) ((1 . 1527) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    # Key guesses for each line, and also the character frequency of the xored string.   asdfasd fadfsadf
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 942 (fontified t) 942 944 (face font-lock-comment-delimiter-face fontified t) 944 1044 (face font-lock-comment-face fontified t) 1044 1095 (fontified t) 1095 1098 (face font-lock-keyword-face fontified t) 1098 1101 (fontified t) 1101 1103 (face font-lock-keyword-face fontified t) 1103 1104 (fontified t) 1104 1109 (face font-lock-builtin-face fontified t) 1109 1110 (fontified t) 1110 1113 (face font-lock-builtin-face fontified t) 1113 1182 (fontified t) 1182 1185 (face font-lock-builtin-face fontified t) 1185 1215 (fontified t) 1215 1218 (face font-lock-keyword-face fontified t) 1218 1221 (fontified t) 1221 1223 (face font-lock-keyword-face fontified t) 1223 1224 (fontified t) 1224 1229 (face font-lock-builtin-face fontified t) 1229 1230 (fontified t) 1230 1233 (face font-lock-builtin-face fontified t) 1233 1264 (fontified t) 1264 1266 (face font-lock-string-face fontified t) 1266 1307 (fontified t) 1307 1310 (face font-lock-keyword-face fontified t) 1310 1313 (fontified t) 1313 1315 (face font-lock-keyword-face fontified t) 1315 1316 (fontified t) 1316 1321 (face font-lock-builtin-face fontified t) 1321 1322 (fontified t) 1322 1325 (face font-lock-builtin-face fontified t) 1325 1349 (fontified t) 1349 1351 (face font-lock-keyword-face fontified t) 1351 1494 (fontified t) 1494 1499 (face font-lock-builtin-face fontified t) 1499 1500 (fontified t) 1500 1525 (fontified t)) . 1) (undo-tree-id528 . -1044) (undo-tree-id529 . -1044) (t 26109 999 244997 953000)) (26109 999 87673 672000) 0 nil])
([nil nil ((1092 . 1111) (#(" " 0 1 (fontified nil)) . 1092) (1091 . 1092) (1110 . 1111) (t 26109 1013 853092 957000)) nil (26109 1020 677502 617000) 0 nil])
([nil nil ((1067 . 1088)) ((#("awopiejifpoaiej fawop" 0 21 (face font-lock-comment-face fontified t)) . 1067) (undo-tree-id532 . -21)) (26109 1006 902866 38000) 0 nil])
nil
([nil nil ((1214 . 1215)) nil (26109 1020 677500 747000) 0 nil])
([nil nil ((1088 . 1098)) ((#("efj awopfe" 0 10 (face font-lock-comment-face fontified t)) . 1088) (undo-tree-id531 . -10) (t 26109 1005 770242 610000)) (26109 1005 622488 195000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1214) (undo-tree-id550 . -1) 1215) nil (26109 1020 677498 983000) 0 nil])
nil
([nil nil ((1 . 1513) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    # Key guesses for each line, and also the character frequency of
    # the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in
                   range(len(lines))] 
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 942 (fontified t) 942 944 (face font-lock-comment-delimiter-face fontified t) 944 1007 (face font-lock-comment-face fontified t) 1007 1011 (fontified t) 1011 1013 (face font-lock-comment-delimiter-face fontified t) 1013 1031 (face font-lock-comment-face fontified t) 1031 1035 (fontified t) 1035 1046 (face font-lock-variable-name-face fontified t) 1046 1082 (fontified t) 1082 1085 (face font-lock-keyword-face fontified t) 1085 1088 (fontified t) 1088 1090 (face font-lock-keyword-face fontified t) 1090 1110 (fontified t) 1110 1115 (face font-lock-builtin-face fontified t) 1115 1116 (fontified t) 1116 1119 (face font-lock-builtin-face fontified t) 1119 1130 (fontified t) 1130 1134 (fontified t) 1134 1146 (face font-lock-variable-name-face fontified t) 1146 1151 (fontified t) 1151 1189 (fontified t) 1189 1192 (face font-lock-builtin-face fontified t) 1192 1214 (fontified t) 1214 1222 (fontified t) 1222 1225 (face font-lock-keyword-face fontified t) 1225 1228 (fontified t) 1228 1230 (face font-lock-keyword-face fontified t) 1230 1231 (fontified t) 1231 1236 (face font-lock-builtin-face fontified t) 1236 1237 (fontified t) 1237 1240 (face font-lock-builtin-face fontified t) 1240 1260 (fontified t) 1260 1267 (face font-lock-variable-name-face fontified t) 1267 1271 (fontified t) 1271 1273 (face font-lock-string-face fontified t) 1273 1278 (fontified t) 1278 1286 (face font-lock-variable-name-face fontified t) 1286 1295 (fontified t) 1295 1304 (face font-lock-variable-name-face fontified t) 1304 1314 (fontified t) 1314 1317 (face font-lock-keyword-face fontified t) 1317 1320 (fontified t) 1320 1322 (face font-lock-keyword-face fontified t) 1322 1323 (fontified t) 1323 1328 (face font-lock-builtin-face fontified t) 1328 1329 (fontified t) 1329 1332 (face font-lock-builtin-face fontified t) 1332 1356 (fontified t) 1356 1358 (face font-lock-keyword-face fontified t) 1358 1379 (fontified t) 1379 1387 (face font-lock-variable-name-face fontified t) 1387 1442 (fontified t) 1442 1449 (face font-lock-variable-name-face fontified t) 1449 1482 (fontified t) 1482 1491 (face font-lock-variable-name-face fontified t) 1491 1501 (fontified t) 1501 1506 (face font-lock-builtin-face fontified t) 1506 1520 (fontified t) 1520 1532 (fontified t)) . 1) (undo-tree-id544 . -1213) (undo-tree-id545 . -1151) (undo-tree-id546 . 320) (undo-tree-id547 . -1213) (undo-tree-id548 . 364) (undo-tree-id549 . -1169) 1214) nil (26109 1044 568720 972000) 0 nil])
([nil nil ((1092 . 1111) (#(" " 0 1 (fontified nil)) . 1092) (1091 . 1092) (1110 . 1111) (t 26109 1020 797591 96000)) nil (26109 1078 298282 927000) 0 nil] [nil nil ((1214 . 1215) (t 26109 1020 797591 96000)) ((#("b" 0 1 (fontified t)) . 1214) (undo-tree-id552 . -1)) (26109 1044 187178 887000) 0 nil])
([nil nil ((1 . 1513) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]
    # Key guesses for each line, and also the character frequency of
    # the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in
                   range(len(lines))] 
    line_guesses = [
        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 7 (face font-lock-comment-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 69 (face font-lock-comment-face fontified t) 69 71 (face font-lock-comment-delimiter-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 111 (face font-lock-comment-delimiter-face fontified t) 111 127 (face font-lock-comment-face fontified t) 127 133 (face font-lock-comment-delimiter-face fontified t) 133 189 (face font-lock-comment-face fontified t) 189 199 (face font-lock-comment-delimiter-face fontified t) 199 219 (face font-lock-comment-face fontified t) 219 233 (face font-lock-comment-delimiter-face fontified t) 233 300 (face font-lock-comment-face fontified t) 300 302 (face font-lock-comment-delimiter-face fontified t) 302 315 (face font-lock-comment-face fontified t) 315 316 (fontified t) 316 318 (face font-lock-comment-delimiter-face fontified t) 318 349 (face font-lock-comment-face fontified t) 349 355 (face font-lock-comment-delimiter-face fontified t) 355 390 (face font-lock-comment-face fontified t) 390 400 (face font-lock-comment-delimiter-face fontified t) 400 423 (face font-lock-comment-face fontified t) 423 433 (face font-lock-comment-delimiter-face fontified t) 433 476 (face font-lock-comment-face fontified t) 476 486 (face font-lock-comment-delimiter-face fontified t) 486 532 (face font-lock-comment-face fontified t) 532 534 (face font-lock-comment-delimiter-face fontified t) 534 552 (face font-lock-comment-face fontified t) 552 558 (face font-lock-comment-delimiter-face fontified t) 558 569 (face font-lock-comment-face fontified t) 569 575 (face font-lock-comment-delimiter-face fontified t) 575 586 (face font-lock-comment-face fontified t) 586 588 (face font-lock-comment-delimiter-face fontified t) 588 592 (face font-lock-comment-face fontified t) 592 593 (fontified t) 593 597 (face font-lock-keyword-face fontified t) 597 614 (fontified t) 614 620 (face font-lock-keyword-face fontified t) 620 623 (fontified t) 623 627 (face font-lock-keyword-face fontified t) 627 640 (fontified t) 640 646 (face font-lock-keyword-face fontified t) 646 657 (fontified t) 657 661 (face font-lock-keyword-face fontified t) 661 674 (fontified t) 674 680 (face font-lock-keyword-face fontified t) 680 704 (fontified t) 704 706 (face font-lock-keyword-face fontified t) 706 707 (fontified t) 707 715 (face font-lock-builtin-face fontified t) 715 719 (fontified t) 719 729 (face font-lock-string-face fontified t) 729 750 (fontified t) 750 754 (face font-lock-builtin-face fontified t) 754 755 (fontified t) 755 762 (face font-lock-string-face fontified t) 762 802 (fontified t) 802 806 (face font-lock-string-face fontified t) 806 837 (fontified t) 837 839 (face font-lock-comment-delimiter-face fontified t) 839 890 (face font-lock-comment-face fontified t) 890 922 (fontified t) 922 925 (face font-lock-keyword-face fontified t) 925 928 (fontified t) 928 930 (face font-lock-keyword-face fontified t) 930 942 (fontified t) 942 944 (face font-lock-comment-delimiter-face fontified t) 944 1007 (face font-lock-comment-face fontified t) 1007 1011 (fontified t) 1011 1013 (face font-lock-comment-delimiter-face fontified t) 1013 1031 (face font-lock-comment-face fontified t) 1031 1035 (fontified t) 1035 1046 (face font-lock-variable-name-face fontified t) 1046 1082 (fontified t) 1082 1085 (face font-lock-keyword-face fontified t) 1085 1088 (fontified t) 1088 1090 (face font-lock-keyword-face fontified t) 1090 1110 (fontified t) 1110 1115 (face font-lock-builtin-face fontified t) 1115 1116 (fontified t) 1116 1119 (face font-lock-builtin-face fontified t) 1119 1130 (fontified t) 1130 1134 (fontified t) 1134 1146 (face font-lock-variable-name-face fontified t) 1146 1189 (fontified t) 1189 1192 (face font-lock-builtin-face fontified t) 1192 1214 (fontified t) 1214 1222 (fontified t) 1222 1225 (face font-lock-keyword-face fontified t) 1225 1228 (fontified t) 1228 1230 (face font-lock-keyword-face fontified t) 1230 1231 (fontified t) 1231 1233 (face font-lock-builtin-face fontified t) 1233 1236 (face font-lock-builtin-face fontified t) 1236 1237 (fontified t) 1237 1240 (face font-lock-builtin-face fontified t) 1240 1249 (fontified t) 1249 1260 (fontified t) 1260 1267 (face font-lock-variable-name-face fontified t) 1267 1271 (fontified t) 1271 1273 (face font-lock-string-face fontified t) 1273 1278 (fontified t) 1278 1286 (face font-lock-variable-name-face fontified t) 1286 1295 (fontified t) 1295 1304 (face font-lock-variable-name-face fontified t) 1304 1314 (fontified t) 1314 1317 (face font-lock-keyword-face fontified t) 1317 1320 (fontified t) 1320 1322 (face font-lock-keyword-face fontified t) 1322 1323 (fontified t) 1323 1328 (face font-lock-builtin-face fontified t) 1328 1329 (fontified t) 1329 1332 (face font-lock-builtin-face fontified t) 1332 1356 (fontified t) 1356 1358 (face font-lock-keyword-face fontified t) 1358 1379 (fontified t) 1379 1387 (face font-lock-variable-name-face fontified t) 1387 1442 (fontified t) 1442 1449 (face font-lock-variable-name-face fontified t) 1449 1482 (fontified t) 1482 1491 (face font-lock-variable-name-face fontified t) 1491 1501 (fontified t) 1501 1506 (face font-lock-builtin-face fontified t) 1506 1520 (fontified t) 1520 1532 (fontified t)) . 1) (undo-tree-id553 . -1233) (undo-tree-id554 . -1129) (undo-tree-id555 . -1035) (undo-tree-id556 . -1035) (undo-tree-id557 . -1091) (undo-tree-id558 . -1260) (undo-tree-id559 . -1260) (undo-tree-id560 . -1270) 1130) nil (26109 1158 222767 165000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1214) (undo-tree-id551 . -1) 1215) ((1214 . 1215)) (26109 1044 187125 275000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1109) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -1) 1110 (t 26109 1078 428288 288000)) nil (26109 1162 331807 484000) 0 nil] [nil nil ((1092 . 1111) (#(" " 0 1 (fontified nil)) . 1092) (1091 . 1092) (1110 . 1111) (t 26109 1078 428288 288000)) ((#(" " 0 1 (fontified nil)) . 1110) (undo-tree-id0 . -1) (#("
" 0 1 (fontified t)) . 1091) (undo-tree-id1 . -1) (1092 . 1093) (#("                   " 0 19 (fontified t)) . 1092)) (26109 1158 222507 64000) 0 nil])
nil
([nil nil ((#(")" 0 1 (fontified t)) . -1108) (undo-tree-id7 . -1) (undo-tree-id8 . 1) (undo-tree-id9 . -1) 1109) nil (26109 1165 967826 436000) 0 nil] [nil nil ((1092 . 1111) (#(" " 0 1 (fontified nil)) . 1092) (1091 . 1092) (1109 . 1111)) ((#("] " 0 2 (fontified nil)) . 1109) (undo-tree-id5 . -2) (#("
" 0 1 (fontified t)) . 1091) (undo-tree-id6 . -1) (1092 . 1093) (#("                   " 0 19 (fontified t)) . 1092)) (26109 1162 331710 757000) 0 nil])
nil
([nil nil ((1108 . 1110)) nil (26109 1183 485364 789000) 0 nil] [nil nil ((1092 . 1111) (#(" " 0 1 (fontified nil)) . 1092) (1091 . 1092) (1108 . 1109)) ((#(" " 0 1 (fontified nil)) . 1108) (undo-tree-id10 . -1) (#("
" 0 1 (fontified t)) . 1091) (undo-tree-id11 . -1) (1092 . 1093) (#("                   " 0 19 (fontified t)) . 1092)) (26109 1165 967716 912000) 0 nil])
nil
([nil nil ((1013 . 1014)) nil (26109 1187 557403 351000) 0 nil] [nil nil ((#(" the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 19 (fontified t face font-lock-comment-face) 19 23 (fontified t) 23 34 (fontified t face font-lock-variable-name-face) 34 70 (fontified t) 70 73 (fontified t face font-lock-keyword-face) 73 76 (fontified t) 76 78 (fontified t face font-lock-keyword-face) 78 79 (fontified t) 79 84 (fontified t face font-lock-builtin-face) 84 85 (fontified t) 85 88 (fontified t face font-lock-builtin-face) 88 97 (fontified t)) . 1013) (undo-tree-id50 . -97) (undo-tree-id51 . -19) (undo-tree-id52 . -23) (undo-tree-id53 . -23) (undo-tree-id54 . -23) (undo-tree-id55 . -37) (undo-tree-id56 . -19) (undo-tree-id57 . -97) (undo-tree-id58 . -19) (undo-tree-id59 . -19) (undo-tree-id60 . -19)) ((1013 . 1110)) (26109 1183 156525 576000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -1007) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#(" " 0 1 (fontified t)) . -1008) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(" " 0 1 (fontified t)) . -1009) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#(" " 0 1 (fontified t)) . -1010) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -1011) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1012) (undo-tree-id73 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1013) (undo-tree-id74 . -1) 1014) nil (26109 1187 557397 456000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1012) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 1013) ((1012 . 1013)) (26109 1182 817705 604000) 0 nil])
([nil nil ((939 . 940) (t 26109 1187 701297 476000)) nil (26109 1199 731349 861000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1008) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) 1012) ((1008 . 1012)) (26109 1182 654376 22000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -940) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) 944) nil (26109 1199 731347 807000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -1007) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 1008) ((1007 . 1008)) (26109 1182 654271 396000) 0 nil])
([nil nil ((940 . 944)) nil (26109 1199 731460 258000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 1015) (1009 . 1015) (1009 . 1010) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 1009) (1008 . 1009) (1026 . 1027) (t 26109 1200 409515 958000)) nil (26109 1203 265710 128000) 0 nil] [nil nil ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 1015) (1009 . 1015) (1009 . 1010) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 1009) (1008 . 1009) (1026 . 1027)) ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 1026) (undo-tree-id80 . -1) (#("
" 0 1 (fontified t face font-lock-comment-face)) . 1008) (undo-tree-id81 . -1) (1009 . 1010) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . 1009) (#("    # " 0 4 (fontified nil) 4 6 (fontified nil face font-lock-comment-delimiter-face)) . 1009) (1015 . 1016)) (26109 1199 731327 83000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -1032) (undo-tree-id82 . -1) 1033) nil (26109 1203 265703 942000) 0 nil])
nil
([nil nil ((1329 . 1338) (t 26109 1203 423976 707000)) nil (26109 2071 231972 820000) 0 nil])
([nil nil ((1338 . 1344)) nil (26109 2071 231971 900000) 0 nil])
([nil nil ((1344 . 1349)) nil (26109 2071 231971 188000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1348) (undo-tree-id85 . -1) 1349) nil (26109 2071 231970 209000) 0 nil])
([nil nil ((1348 . 1352)) nil (26109 2071 231968 220000) 0 nil])
([nil nil ((#("guesses" 0 7 (fontified t)) . -1345) (undo-tree-id84 . -7) 1352) nil (26109 2071 231967 225000) 0 nil])
([nil nil ((#("key_" 0 4 (fontified t)) . -1341) (undo-tree-id83 . -4) 1345) nil (26109 2071 231964 63000) 0 nil])
([nil nil ((1341 . 1362)) nil (26109 2071 231954 433000) 0 nil])
([nil nil ((1362 . 1366)) nil (26109 2071 231953 572000) 0 nil])
([nil nil ((1366 . 1367)) nil (26109 2071 231952 763000) 0 nil])
([nil nil ((1367 . 1380)) nil (26109 2071 231951 922000) 0 nil])
([nil nil ((1380 . 1384)) nil (26109 2071 231950 455000) 0 nil])
([nil nil ((1393 . 1395)) nil (26109 3448 996759 921000) 0 nil])
([nil nil ((1340 . 1345) (t 26109 2071 358898 576000)) nil (26109 3734 967279 77000) 0 nil] [nil nil ((803 . 804) (t 26109 2071 358898 576000)) ((#("q" 0 1 (fontified t)) . 803) (undo-tree-id86 . -1)) (26109 3448 996458 826000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1344) (undo-tree-id87 . -1) 1345) nil (26109 3734 967274 382000) 0 nil])
nil
([nil nil ((apply -4 1330 1436 undo--wrap-and-run-primitive-undo 1330 1436 ((1382 . 1384) (1338 . 1340) 1389)) (t 26109 3735 119961 343000)) nil (26109 3750 228311 454000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1401) (undo-tree-id88 . -1) (#("l" 0 1 (fontified t face font-lock-keyword-face)) . -1402) (undo-tree-id89 . -1) 1403 (t 26109 3750 516491 280000)) nil (26109 3756 827853 536000) 0 nil])
([nil nil ((1132 . 1141) (t 26109 3757 107721 618000)) nil (26109 5453 437647 772000) 0 nil])
([nil nil ((1141 . 1143)) nil (26109 5453 437646 404000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1141) (undo-tree-id118 . -1) (#("o" 0 1 (fontified t)) . -1142) (undo-tree-id119 . -1) 1143) nil (26109 5453 437644 978000) 0 nil])
([nil nil ((1141 . 1162)) nil (26109 5453 437641 811000) 0 nil])
([nil nil ((1162 . 1176)) nil (26109 5453 437640 984000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1174) (undo-tree-id116 . -1) (#(" " 0 1 (fontified t)) . -1175) (undo-tree-id117 . -1) 1176) nil (26109 5453 437639 628000) 0 nil])
([nil nil ((1174 . 1175)) nil (26109 5453 437636 776000) 0 nil])
([nil nil ((1157 . 1163)) nil (26109 5453 437635 987000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1162) (undo-tree-id115 . -1) 1163) nil (26109 5453 437634 942000) 0 nil])
([nil nil ((1162 . 1167)) nil (26109 5453 437633 50000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1184) (undo-tree-id112 . -1) (undo-tree-id113 . 1) (undo-tree-id114 . -1) 1185) nil (26109 5453 437631 826000) 0 nil])
([nil nil ((1184 . 1185)) nil (26109 5453 437626 215000) 0 nil])
([nil nil ((#("        xor_bytes(key_guesses[i][0] * len(lines[i]), lines[i])
" 0 38 (fontified t) 38 41 (fontified t face font-lock-builtin-face) 41 63 (fontified t)) . -1186) (undo-tree-id109 . -63) (undo-tree-id110 . -63) (undo-tree-id111 . -63) 1249) nil (26109 5453 437624 342000) 0 nil])
([nil nil ((1 . 1559) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]

    # Key guesses for each line, and also the character frequency of
    # the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        single_char_xor(lines[i], key_guesses[i][0])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        # if not line_guesses[i].isascii():
        #     pass
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-face) 7 8 (fontified t) 8 10 (fontified t face font-lock-comment-delimiter-face) 10 69 (fontified t face font-lock-comment-face) 69 71 (fontified t face font-lock-comment-delimiter-face) 71 109 (fontified t face font-lock-comment-face) 109 111 (fontified t face font-lock-comment-delimiter-face) 111 127 (fontified t face font-lock-comment-face) 127 133 (fontified t face font-lock-comment-delimiter-face) 133 189 (fontified t face font-lock-comment-face) 189 199 (fontified t face font-lock-comment-delimiter-face) 199 219 (fontified t face font-lock-comment-face) 219 233 (fontified t face font-lock-comment-delimiter-face) 233 300 (fontified t face font-lock-comment-face) 300 302 (fontified t face font-lock-comment-delimiter-face) 302 315 (fontified t face font-lock-comment-face) 315 316 (fontified t) 316 318 (fontified t face font-lock-comment-delimiter-face) 318 349 (fontified t face font-lock-comment-face) 349 355 (fontified t face font-lock-comment-delimiter-face) 355 390 (fontified t face font-lock-comment-face) 390 400 (fontified t face font-lock-comment-delimiter-face) 400 423 (fontified t face font-lock-comment-face) 423 433 (fontified t face font-lock-comment-delimiter-face) 433 476 (fontified t face font-lock-comment-face) 476 486 (fontified t face font-lock-comment-delimiter-face) 486 532 (fontified t face font-lock-comment-face) 532 534 (fontified t face font-lock-comment-delimiter-face) 534 552 (fontified t face font-lock-comment-face) 552 558 (fontified t face font-lock-comment-delimiter-face) 558 569 (fontified t face font-lock-comment-face) 569 575 (fontified t face font-lock-comment-delimiter-face) 575 586 (fontified t face font-lock-comment-face) 586 588 (fontified t face font-lock-comment-delimiter-face) 588 592 (fontified t face font-lock-comment-face) 592 593 (fontified t) 593 597 (fontified t face font-lock-keyword-face) 597 614 (fontified t) 614 620 (fontified t face font-lock-keyword-face) 620 623 (fontified t) 623 627 (fontified t face font-lock-keyword-face) 627 640 (fontified t) 640 646 (fontified t face font-lock-keyword-face) 646 657 (fontified t) 657 661 (fontified t face font-lock-keyword-face) 661 674 (fontified t) 674 680 (fontified t face font-lock-keyword-face) 680 704 (fontified t) 704 706 (fontified t face font-lock-keyword-face) 706 707 (fontified t) 707 715 (fontified t face font-lock-builtin-face) 715 719 (fontified t) 719 729 (fontified t face font-lock-string-face) 729 750 (fontified t) 750 754 (fontified t face font-lock-builtin-face) 754 755 (fontified t) 755 762 (fontified t face font-lock-string-face) 762 764 (fontified t) 764 768 (fontified t) 768 773 (fontified t face font-lock-variable-name-face) 773 802 (fontified t) 802 806 (fontified t face font-lock-string-face) 806 808 (fontified t) 808 837 (fontified t) 837 839 (fontified t face font-lock-comment-delimiter-face) 839 890 (fontified t face font-lock-comment-face) 890 894 (fontified t) 894 899 (fontified t face font-lock-variable-name-face) 899 922 (fontified t) 922 925 (fontified t face font-lock-keyword-face) 925 928 (fontified t) 928 930 (fontified t face font-lock-keyword-face) 930 938 (fontified t) 938 939 (fontified t) 939 943 (fontified t) 943 945 (fontified t face font-lock-comment-delimiter-face) 945 1008 (fontified t face font-lock-comment-face) 1008 1012 (fontified t) 1012 1014 (fontified t face font-lock-comment-delimiter-face) 1014 1032 (fontified t face font-lock-comment-face) 1032 1036 (fontified t) 1036 1047 (fontified t face font-lock-variable-name-face) 1047 1083 (fontified t) 1083 1086 (fontified t face font-lock-keyword-face) 1086 1089 (fontified t) 1089 1091 (fontified t face font-lock-keyword-face) 1091 1092 (fontified t) 1092 1097 (fontified t face font-lock-builtin-face) 1097 1098 (fontified t) 1098 1101 (fontified t face font-lock-builtin-face) 1101 1110 (fontified t) 1110 1111 (fontified t) 1111 1115 (fontified t) 1115 1127 (fontified t face font-lock-variable-name-face) 1127 1132 (fontified t) 1132 1185 (fontified t) 1185 1193 (fontified t) 1193 1196 (fontified t face font-lock-keyword-face) 1196 1199 (fontified t) 1199 1201 (fontified t face font-lock-keyword-face) 1201 1202 (fontified t) 1202 1207 (fontified t face font-lock-builtin-face) 1207 1208 (fontified t) 1208 1211 (fontified t face font-lock-builtin-face) 1211 1220 (fontified t) 1220 1231 (fontified t) 1231 1238 (fontified t face font-lock-variable-name-face) 1238 1242 (fontified t) 1242 1244 (fontified t face font-lock-string-face) 1244 1249 (fontified t) 1249 1257 (fontified t face font-lock-variable-name-face) 1257 1266 (fontified t) 1266 1275 (fontified t face font-lock-variable-name-face) 1275 1281 (fontified t) 1281 1285 (fontified t) 1285 1288 (fontified t face font-lock-keyword-face) 1288 1291 (fontified t) 1291 1293 (fontified t face font-lock-keyword-face) 1293 1294 (fontified t) 1294 1299 (fontified t face font-lock-builtin-face) 1299 1300 (fontified t) 1300 1303 (fontified t face font-lock-builtin-face) 1303 1319 (fontified t) 1319 1327 (fontified t) 1327 1329 (fontified t face font-lock-comment-delimiter-face) 1329 1331 (fontified t face font-lock-comment-face) 1331 1332 (fontified t face font-lock-comment-face) 1332 1335 (fontified t face font-lock-comment-face) 1335 1352 (fontified t face font-lock-comment-face) 1352 1363 (fontified t face font-lock-comment-face) 1363 1371 (fontified t) 1371 1373 (fontified t face font-lock-comment-delimiter-face) 1373 1377 (fontified t face font-lock-comment-delimiter-face) 1377 1381 (fontified t face font-lock-comment-face) 1381 1382 (fontified t face font-lock-comment-face) 1382 1390 (fontified t) 1390 1392 (fontified t face font-lock-keyword-face) 1392 1413 (fontified t) 1413 1421 (fontified t face font-lock-variable-name-face) 1421 1423 (fontified t) 1423 1435 (fontified t) 1435 1443 (fontified t) 1443 1464 (fontified t) 1464 1476 (fontified t) 1476 1483 (fontified t face font-lock-variable-name-face) 1483 1516 (fontified t) 1516 1525 (fontified t face font-lock-variable-name-face) 1525 1535 (fontified t) 1535 1540 (fontified t face font-lock-builtin-face) 1540 1554 (fontified t) 1554 1566 (fontified t)) . 1) (undo-tree-id90 . -1185) (undo-tree-id91 . -1130) (undo-tree-id92 . -189) (undo-tree-id93 . -802) (undo-tree-id94 . -1032) (undo-tree-id95 . -1110) (undo-tree-id96 . -730) (undo-tree-id97 . -802) (undo-tree-id98 . -1381) (undo-tree-id99 . -1031) (undo-tree-id100 . -1503) (undo-tree-id101 . -1280) (undo-tree-id102 . -189) (undo-tree-id103 . -690) (undo-tree-id104 . -1185) (undo-tree-id105 . -551) (undo-tree-id106 . -1319) (undo-tree-id107 . -551) (undo-tree-id108 . -1185) 1186) nil (26109 5453 437616 135000) 0 nil])
([nil nil ((1186 . 1194) (#(" " 0 1 (fontified nil)) . 1185) (undo-tree-id123 . -1) (1186 . 1187) (t 26109 5453 596846 858000)) nil (26109 5476 605083 935000) 0 nil])
([nil nil ((1 . 1559) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import xor_bytes
from challenge_3 import break_single_char_xor

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    # lines = [decode_hex(line) for line in hexed_lines]
    lines = [x.encode(encoding) for x in lines]

    # Key guesses for each line, and also the character frequency of
    # the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        single_char_xor(lines[i], key_guesses[i][0])
        for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0
    the_index = 0

    for i in range(len(key_guesses)):
        # if not line_guesses[i].isascii():
        #     pass
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(line_guesses[the_index])
" 189 199 (fontified t face font-lock-comment-delimiter-face) 199 219 (fontified t face font-lock-comment-face) 219 233 (fontified t face font-lock-comment-delimiter-face) 233 300 (fontified t face font-lock-comment-face) 300 302 (fontified t face font-lock-comment-delimiter-face) 302 315 (fontified t face font-lock-comment-face) 315 316 (fontified t) 316 318 (fontified t face font-lock-comment-delimiter-face) 318 349 (fontified t face font-lock-comment-face) 349 355 (fontified t face font-lock-comment-delimiter-face) 355 390 (fontified t face font-lock-comment-face) 390 400 (fontified t face font-lock-comment-delimiter-face) 400 423 (fontified t face font-lock-comment-face) 423 433 (fontified t face font-lock-comment-delimiter-face) 433 476 (fontified t face font-lock-comment-face) 476 486 (fontified t face font-lock-comment-delimiter-face) 486 532 (fontified t face font-lock-comment-face) 532 534 (fontified t face font-lock-comment-delimiter-face) 534 552 (fontified t face font-lock-comment-face) 552 558 (fontified t face font-lock-comment-delimiter-face) 558 569 (fontified t face font-lock-comment-face) 569 575 (fontified t face font-lock-comment-delimiter-face) 575 586 (fontified t face font-lock-comment-face) 586 588 (fontified t face font-lock-comment-delimiter-face) 588 592 (fontified t face font-lock-comment-face) 592 593 (fontified t) 593 597 (fontified t face font-lock-keyword-face) 597 614 (fontified t) 614 620 (fontified t face font-lock-keyword-face) 620 623 (fontified t) 623 627 (fontified t face font-lock-keyword-face) 627 640 (fontified t) 640 646 (fontified t face font-lock-keyword-face) 646 657 (fontified t) 657 661 (fontified t face font-lock-keyword-face) 661 674 (fontified t) 674 680 (fontified t face font-lock-keyword-face) 680 704 (fontified t) 704 706 (fontified t face font-lock-keyword-face) 706 707 (fontified t) 707 715 (fontified t face font-lock-builtin-face) 715 719 (fontified t) 719 729 (fontified t face font-lock-string-face) 729 750 (fontified t) 750 754 (fontified t face font-lock-builtin-face) 754 755 (fontified t) 755 762 (fontified t face font-lock-string-face) 762 802 (fontified t) 802 806 (fontified t face font-lock-string-face) 806 837 (fontified t) 837 839 (fontified t face font-lock-comment-delimiter-face) 839 890 (fontified t face font-lock-comment-face) 890 922 (fontified t) 922 925 (fontified t face font-lock-keyword-face) 925 928 (fontified t) 928 930 (fontified t face font-lock-keyword-face) 930 943 (fontified t) 943 945 (fontified t face font-lock-comment-delimiter-face) 945 1008 (fontified t face font-lock-comment-face) 1008 1012 (fontified t) 1012 1014 (fontified t face font-lock-comment-delimiter-face) 1014 1032 (fontified t face font-lock-comment-face) 1032 1083 (fontified t) 1083 1086 (fontified t face font-lock-keyword-face) 1086 1089 (fontified t) 1089 1091 (fontified t face font-lock-keyword-face) 1091 1092 (fontified t) 1092 1097 (fontified t face font-lock-builtin-face) 1097 1098 (fontified t) 1098 1101 (fontified t face font-lock-builtin-face) 1101 1132 (fontified t) 1132 1193 (fontified t) 1193 1196 (fontified t face font-lock-keyword-face) 1196 1199 (fontified t) 1199 1201 (fontified t face font-lock-keyword-face) 1201 1202 (fontified t) 1202 1207 (fontified t face font-lock-builtin-face) 1207 1208 (fontified t) 1208 1211 (fontified t face font-lock-builtin-face) 1211 1220 (fontified t) 1220 1242 (fontified t) 1242 1244 (fontified t face font-lock-string-face) 1244 1285 (fontified t) 1285 1288 (fontified t face font-lock-keyword-face) 1288 1291 (fontified t) 1291 1293 (fontified t face font-lock-keyword-face) 1293 1294 (fontified t) 1294 1299 (fontified t face font-lock-builtin-face) 1299 1300 (fontified t) 1300 1303 (fontified t face font-lock-builtin-face) 1303 1327 (fontified t) 1327 1329 (fontified t face font-lock-comment-delimiter-face) 1329 1363 (fontified t face font-lock-comment-face) 1363 1371 (fontified t) 1371 1377 (fontified t face font-lock-comment-delimiter-face) 1377 1382 (fontified t face font-lock-comment-face) 1382 1390 (fontified t) 1390 1392 (fontified t face font-lock-keyword-face) 1392 1535 (fontified t) 1535 1540 (fontified t face font-lock-builtin-face) 1540 1566 (fontified t)) . 1) (undo-tree-id120 . -189) (undo-tree-id121 . -1193) (undo-tree-id122 . -1185) 1194) nil (26109 5476 605077 430000) 0 nil])
([nil nil ((1254 . 1255) (t 26109 5476 782618 61000)) nil (26109 5522 78773 287000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1254) (undo-tree-id124 . -1) 1255) nil (26109 5522 78770 904000) 0 nil])
([nil nil ((1254 . 1256)) nil (26109 5522 78757 859000) 0 nil])
([nil nil ((#("bytes" 0 5 (fontified t)) . -652) (undo-tree-id127 . -5) 657 (t 26109 5522 212141 347000)) nil (26109 5540 224812 159000) 0 nil])
([nil nil ((#("xor_" 0 4 (fontified t)) . -648) (undo-tree-id126 . -4) 652) nil (26109 5540 224809 719000) 0 nil])
([nil nil ((648 . 649)) nil (26109 5540 224807 408000) 0 nil])
([nil nil ((#("break_single_char_xor" 0 21 (fontified t)) . 674) (undo-tree-id125 . -21)) nil (26109 5540 224805 375000) 0 nil])
([nil nil ((674 . 675)) nil (26109 5540 224793 549000) 0 nil])
([nil nil ((741 . 747) (t 26109 5540 407755 751000)) nil (26109 5643 357359 713000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -816) (undo-tree-id128 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -817) (undo-tree-id129 . -1) 818) nil (26109 5653 676659 537000) 0 nil])
([nil nil ((apply -2 867 917 undo--wrap-and-run-primitive-undo 867 917 ((871 . 873) 867))) nil (26109 5655 593546 237000) 0 nil] [nil nil ((apply -2 871 918 undo--wrap-and-run-primitive-undo 871 918 (("    " . 871) (871 . 877) 915)) (t 26109 5643 565280 649000)) ((apply 2 871 916 undo--wrap-and-run-primitive-undo 871 916 ((#("    # " 4 6 (fontified t face font-lock-comment-delimiter-face)) . 871) (871 . 875) 867)) (t 26109 5652 627593 413000)) (26109 5652 452038 93000) 0 nil] [nil nil ((914 . 917) 871 (t 26109 5643 565280 649000)) ((#(" # " 0 1 (fontified t) 1 3 (fontified t face font-lock-comment-delimiter-face)) . 914) (undo-tree-id130 . -3)) (26109 5650 695551 216000) 0 nil])
([nil nil ((#("    # lines = [x.encode(encoding) for x in lines]
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 11 (fontified t face font-lock-comment-face) 11 34 (fontified t face font-lock-comment-face) 34 37 (fontified t face font-lock-comment-face) 37 40 (fontified t face font-lock-comment-face) 40 42 (fontified t face font-lock-comment-face) 42 49 (fontified t face font-lock-comment-face) 49 50 (fontified t face font-lock-comment-face)) . -867) (undo-tree-id131 . -50) (undo-tree-id132 . -4) (undo-tree-id133 . -50) (undo-tree-id134 . -50) 917 (t 26109 5655 720700 270000)) nil (26109 5678 643763 946000) 0 nil])
nil
nil
([nil nil ((1453 . 1466) (t 26109 5678 780498 591000)) nil (26109 5712 605384 489000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1462) (undo-tree-id154 . -4) 1466) nil (26109 5712 605383 171000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1458) (undo-tree-id153 . -4) 1462) nil (26109 5712 605381 264000) 0 nil])
([nil nil ((1458 . 1461)) nil (26109 5712 605379 451000) 0 nil])
([nil nil ((#("the" 0 3 (fontified t)) . -1458) (undo-tree-id152 . -3) 1461) nil (26109 5712 605378 391000) 0 nil])
([nil nil ((1458 . 1479)) nil (26109 5712 605376 509000) 0 nil])
([nil nil ((1479 . 1491)) nil (26109 5712 605375 676000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -1490) (undo-tree-id151 . -1) 1491) nil (26109 5712 605374 497000) 0 nil])
([nil nil ((1490 . 1493)) nil (26109 5712 605372 508000) 0 nil])
([nil nil ((1493 . 1501)) nil (26109 5712 605371 595000) 0 nil])
([nil nil ((#("i]" 0 2 (fontified t)) . -1499) (undo-tree-id148 . -2) (undo-tree-id149 . 1) (undo-tree-id150 . -2) 1501) nil (26109 5712 605370 160000) 0 nil])
([nil nil ((#("lines[" 0 6 (fontified t)) . -1493) (undo-tree-id147 . -6) 1499) nil (26109 5712 605340 891000) 0 nil])
([nil nil ((1493 . 1502)) nil (26109 5712 605338 912000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1499) (undo-tree-id144 . -1) (#("n" 0 1 (fontified t)) . -1500) (undo-tree-id145 . -1) (#("e" 0 1 (fontified t)) . -1501) (undo-tree-id146 . -1) 1502) nil (26109 5712 605337 423000) 0 nil])
([nil nil ((1499 . 1507)) nil (26109 5712 605333 95000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1506) (undo-tree-id141 . -1) (undo-tree-id142 . 1) (undo-tree-id143 . -1) 1507) nil (26109 5712 605331 832000) 0 nil])
([nil nil ((1506 . 1508)) nil (26109 5712 605328 452000) 0 nil])
([nil nil ((#("ind" 0 3 (fontified t)) . -1505) (undo-tree-id140 . -3) 1508) nil (26109 5712 605327 476000) 0 nil])
([nil nil ((1505 . 1515)) nil (26109 5712 605325 749000) 0 nil])
([nil nil ((1515 . 1526)) nil (26109 5712 605324 966000) 0 nil])
([nil nil ((1526 . 1527)) nil (26109 5712 605324 90000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1526) (undo-tree-id139 . -1) 1527) nil (26109 5713 10694 732000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1524) (undo-tree-id174 . -2) 1526) nil (26109 5747 996291 240000) 0 nil] [nil nil ((#("index]
          " 0 7 (fontified t) 7 17 (fontified t)) . -1509) (undo-tree-id136 . -17) (undo-tree-id137 . 11) (undo-tree-id138 . -7) 1526) ((1509 . 1526)) (26109 5712 605434 903000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1520) (undo-tree-id173 . -4) 1524) nil (26109 5747 996289 264000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1508) (undo-tree-id135 . -1) 1509) ((1508 . 1509)) (26109 5712 605312 328000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1516) (undo-tree-id172 . -4) 1520) nil (26109 5747 996287 313000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . -1515) (undo-tree-id171 . -1) 1516) nil (26109 5747 996285 279000) 0 nil])
([nil nil ((1515 . 1516)) nil (26109 5747 996283 429000) 0 nil])
([nil nil ((1516 . 1521)) nil (26109 5747 996282 655000) 0 nil])
([nil nil ((1521 . 1538)) nil (26109 5747 996281 817000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face font-lock-string-face)) . -1486) (undo-tree-id168 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1487) (undo-tree-id169 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -1488) (undo-tree-id170 . -1) 1489) nil (26109 5747 996280 345000) 0 nil])
([nil nil ((1486 . 1488)) nil (26109 5747 996276 651000) 0 nil])
([nil nil ((1537 . 1545)) nil (26109 5747 996275 890000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -1544) (undo-tree-id167 . -1) 1545) nil (26109 5747 996274 835000) 0 nil])
([nil nil ((1544 . 1548)) nil (26109 5747 996271 993000) 0 nil])
([nil nil ((1548 . 1549)) nil (26109 5747 996271 222000) 0 nil])
([nil nil ((1560 . 1566)) nil (26109 5747 996270 399000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-string-face)) . -1565) (undo-tree-id166 . -1) 1566) nil (26109 5747 996269 474000) 0 nil])
([nil nil ((1565 . 1568)) nil (26109 5747 996267 588000) 0 nil])
([nil nil ((#("original" 0 8 (fontified t face font-lock-string-face)) . -1469) (undo-tree-id165 . -8) 1477) nil (26109 5747 996266 490000) 0 nil])
([nil nil ((1469 . 1478)) nil (26109 5747 996264 518000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-string-face)) . -1569) (undo-tree-id159 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1570) (undo-tree-id160 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1571) (undo-tree-id161 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1572) (undo-tree-id162 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -1573) (undo-tree-id163 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -1574) (undo-tree-id164 . -1) 1575) nil (26109 5747 996262 460000) 0 nil])
([nil nil ((1569 . 1584)) nil (26109 5747 996255 559000) 0 nil])
([nil nil ((1584 . 1585)) nil (26109 5747 996254 726000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -1582) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1583) (undo-tree-id157 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1584) (undo-tree-id158 . -1) 1585) nil (26109 5747 996252 914000) 0 nil])
([nil nil ((1582 . 1587)) nil (26109 5747 996248 343000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -1586) (undo-tree-id155 . -1) 1587) nil (26109 5747 996246 271000) 0 nil])
([nil nil ((1586 . 1590)) nil (26109 5747 996233 463000) 0 nil])
([nil nil ((1589 . 1594) (t 26109 5748 140916 481000)) nil (26109 5757 253137 861000) 0 nil])
([nil nil ((1549 . 1558) (t 26109 5757 461243 169000)) nil (26109 5784 676317 744000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1557) (undo-tree-id181 . -1) (undo-tree-id182 . 1) (undo-tree-id183 . -1) 1558) nil (26109 5784 676316 384000) 0 nil])
([nil nil ((1557 . 1566)) nil (26109 5784 676312 758000) 0 nil])
([nil nil ((1629 . 1630)) nil (26109 5784 676311 945000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1629) (undo-tree-id180 . -1) 1630) nil (26109 5784 676310 838000) 0 nil])
([nil nil ((1629 . 1634)) nil (26109 5784 676308 733000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1629) (undo-tree-id175 . -1) (#("d" 0 1 (fontified t)) . -1630) (undo-tree-id176 . -1) (#("e" 0 1 (fontified t)) . -1631) (undo-tree-id177 . -1) (#("c" 0 1 (fontified t)) . -1632) (undo-tree-id178 . -1) (#("o" 0 1 (fontified t)) . -1633) (undo-tree-id179 . -1) 1634) nil (26109 5784 676305 860000) 0 nil])
([nil nil ((1629 . 1646)) nil (26109 5784 676289 832000) 0 nil])
([nil nil ((1515 . 1517) (t 26109 5784 919207 897000)) nil (26109 5854 323753 826000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1515) (undo-tree-id194 . -1) (#(" " 0 1 (fontified t)) . -1516) (undo-tree-id195 . -1) 1517) nil (26109 5854 323752 443000) 0 nil])
([nil nil ((1524 . 1528) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 1524) (1523 . 1524) (1515 . 1527)) nil (26109 5854 323749 322000) 0 nil])
([nil nil ((1531 . 1535)) nil (26109 5854 323747 975000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -1534) (undo-tree-id193 . -1) 1535) nil (26109 5854 323747 68000) 0 nil])
([nil nil ((1534 . 1536)) nil (26109 5854 323745 156000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1535) (undo-tree-id192 . -1) 1536) nil (26109 5854 323744 109000) 0 nil])
([nil nil ((1535 . 1547)) nil (26109 5854 323742 307000) 0 nil])
([nil nil ((1547 . 1552)) nil (26109 5854 323741 531000) 0 nil])
([nil nil ((1538 . 1542)) nil (26109 5854 323740 709000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1541) (undo-tree-id191 . -1) 1542) nil (26109 5854 323739 685000) 0 nil])
([nil nil ((1541 . 1542)) nil (26109 5854 323737 873000) 0 nil])
([nil nil ((1551 . 1552)) nil (26109 5854 323736 992000) 0 nil])
([nil nil ((1557 . 1560)) nil (26109 5854 323736 189000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face font-lock-string-face)) . -1556) (undo-tree-id187 . -1) (#("=" 0 1 (fontified t face font-lock-string-face)) . -1557) (undo-tree-id188 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1558) (undo-tree-id189 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -1559) (undo-tree-id190 . -1) 1560) nil (26109 5854 323734 524000) 0 nil])
([nil nil ((1556 . 1559)) nil (26109 5854 323727 671000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -1558) (undo-tree-id184 . -1) (undo-tree-id185 . 1) (undo-tree-id186 . -1) 1559) nil (26109 5854 323725 213000) 0 nil])
([nil nil ((1558 . 1565)) nil (26109 5854 323710 408000) 0 nil])
([nil nil ((1523 . 1524) (t 26109 5854 438664 726000)) nil (26109 5869 604865 127000) 0 nil])
([nil nil ((1 . 1738) (#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"

from basic_functions import *
from challenge_2 import *
from challenge_3 import *

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    hexed_lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    lines = [decode_hex(line) for line in hexed_lines]

    # Key guesses for each line, and also the character frequency of
    # the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        single_char_xor(lines[i], key_guesses[i][0]) for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0.0
    the_index = 0

    for i in range(len(key_guesses)):
        # if not line_guesses[i].isascii():
        #     pass
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print(\"The encrypted message is:\", hexed_lines[the_index], \"which\\
    is the\", (str(the_index) + \"th line\"))
    print(\"The key is:\", the_key.decode(encoding))
    print(\"The original message is:\", line_guesses[the_index].decode(encoding))
" 189 199 (fontified t face font-lock-comment-delimiter-face) 199 219 (fontified t face font-lock-comment-face) 219 233 (fontified t face font-lock-comment-delimiter-face) 233 300 (fontified t face font-lock-comment-face) 300 302 (fontified t face font-lock-comment-delimiter-face) 302 315 (fontified t face font-lock-comment-face) 315 316 (fontified t) 316 318 (fontified t face font-lock-comment-delimiter-face) 318 349 (fontified t face font-lock-comment-face) 349 355 (fontified t face font-lock-comment-delimiter-face) 355 390 (fontified t face font-lock-comment-face) 390 400 (fontified t face font-lock-comment-delimiter-face) 400 423 (fontified t face font-lock-comment-face) 423 433 (fontified t face font-lock-comment-delimiter-face) 433 476 (fontified t face font-lock-comment-face) 476 486 (fontified t face font-lock-comment-delimiter-face) 486 532 (fontified t face font-lock-comment-face) 532 534 (fontified t face font-lock-comment-delimiter-face) 534 552 (fontified t face font-lock-comment-face) 552 558 (fontified t face font-lock-comment-delimiter-face) 558 569 (fontified t face font-lock-comment-face) 569 575 (fontified t face font-lock-comment-delimiter-face) 575 586 (fontified t face font-lock-comment-face) 586 588 (fontified t face font-lock-comment-delimiter-face) 588 592 (fontified t face font-lock-comment-face) 592 593 (fontified t) 593 597 (fontified t face font-lock-keyword-face) 597 614 (fontified t) 614 620 (fontified t face font-lock-keyword-face) 620 623 (fontified t) 623 627 (fontified t face font-lock-keyword-face) 627 640 (fontified t) 640 646 (fontified t face font-lock-keyword-face) 646 649 (fontified t) 649 653 (fontified t face font-lock-keyword-face) 653 666 (fontified t) 666 672 (fontified t face font-lock-keyword-face) 672 675 (fontified t) 675 676 (fontified t) 676 678 (fontified t face font-lock-keyword-face) 678 679 (fontified t) 679 687 (fontified t face font-lock-builtin-face) 687 691 (fontified t) 691 701 (fontified t face font-lock-string-face) 701 722 (fontified t) 722 726 (fontified t face font-lock-builtin-face) 726 727 (fontified t) 727 734 (fontified t face font-lock-string-face) 734 736 (fontified t) 736 740 (fontified t) 740 751 (fontified t face font-lock-variable-name-face) 751 780 (fontified t) 780 784 (fontified t face font-lock-string-face) 784 786 (fontified t) 786 811 (fontified t) 811 815 (fontified t) 815 820 (fontified t face font-lock-variable-name-face) 820 841 (fontified t) 841 844 (fontified t face font-lock-keyword-face) 844 850 (fontified t) 850 852 (fontified t face font-lock-keyword-face) 852 866 (fontified t) 866 867 (fontified t) 867 871 (fontified t) 871 873 (fontified t face font-lock-comment-delimiter-face) 873 936 (fontified t face font-lock-comment-face) 936 940 (fontified t) 940 942 (fontified t face font-lock-comment-delimiter-face) 942 960 (fontified t face font-lock-comment-face) 960 964 (fontified t) 964 975 (fontified t face font-lock-variable-name-face) 975 1011 (fontified t) 1011 1014 (fontified t face font-lock-keyword-face) 1014 1017 (fontified t) 1017 1019 (fontified t face font-lock-keyword-face) 1019 1020 (fontified t) 1020 1025 (fontified t face font-lock-builtin-face) 1025 1026 (fontified t) 1026 1029 (fontified t face font-lock-builtin-face) 1029 1043 (fontified t) 1043 1055 (fontified t face font-lock-variable-name-face) 1055 1113 (fontified t) 1113 1116 (fontified t face font-lock-keyword-face) 1116 1119 (fontified t) 1119 1121 (fontified t face font-lock-keyword-face) 1121 1122 (fontified t) 1122 1127 (fontified t face font-lock-builtin-face) 1127 1128 (fontified t) 1128 1131 (fontified t face font-lock-builtin-face) 1131 1151 (fontified t) 1151 1158 (fontified t face font-lock-variable-name-face) 1158 1162 (fontified t) 1162 1164 (fontified t face font-lock-string-face) 1164 1165 (fontified t) 1165 1169 (fontified t) 1169 1177 (fontified t face font-lock-variable-name-face) 1177 1184 (fontified t) 1184 1188 (fontified t) 1188 1197 (fontified t face font-lock-variable-name-face) 1197 1207 (fontified t) 1207 1210 (fontified t face font-lock-keyword-face) 1210 1213 (fontified t) 1213 1215 (fontified t face font-lock-keyword-face) 1215 1216 (fontified t) 1216 1221 (fontified t face font-lock-builtin-face) 1221 1222 (fontified t) 1222 1225 (fontified t face font-lock-builtin-face) 1225 1249 (fontified t) 1249 1251 (fontified t face font-lock-comment-delimiter-face) 1251 1285 (fontified t face font-lock-comment-face) 1285 1293 (fontified t) 1293 1299 (fontified t face font-lock-comment-delimiter-face) 1299 1304 (fontified t face font-lock-comment-face) 1304 1312 (fontified t) 1312 1314 (fontified t face font-lock-keyword-face) 1314 1335 (fontified t) 1335 1343 (fontified t face font-lock-variable-name-face) 1343 1398 (fontified t) 1398 1405 (fontified t face font-lock-variable-name-face) 1405 1438 (fontified t) 1438 1447 (fontified t face font-lock-variable-name-face) 1447 1452 (fontified t) 1452 1453 (fontified t) 1453 1457 (fontified t) 1457 1462 (fontified t face font-lock-builtin-face) 1462 1463 (fontified t) 1463 1490 (fontified t face font-lock-string-face) 1490 1492 (fontified t) 1492 1507 (fontified t) 1507 1508 (fontified t) 1508 1516 (fontified t) 1516 1524 (fontified t face font-lock-string-face) 1524 1535 (fontified t face font-lock-string-face) 1535 1538 (fontified t) 1538 1541 (fontified t face font-lock-builtin-face) 1541 1542 (fontified t) 1542 1555 (fontified t) 1555 1564 (fontified t face font-lock-string-face) 1564 1565 (fontified t) 1565 1567 (fontified t) 1567 1571 (fontified t) 1571 1576 (fontified t face font-lock-builtin-face) 1576 1577 (fontified t) 1577 1578 (fontified t face font-lock-string-face) 1578 1586 (fontified t face font-lock-string-face) 1586 1588 (fontified t face font-lock-string-face) 1588 1589 (fontified t face font-lock-string-face) 1589 1590 (fontified t face font-lock-string-face) 1590 1617 (fontified t) 1617 1618 (fontified t) 1618 1622 (fontified t) 1622 1627 (fontified t face font-lock-builtin-face) 1627 1628 (fontified t) 1628 1629 (fontified t face font-lock-string-face) 1629 1650 (fontified t face font-lock-string-face) 1650 1652 (fontified t face font-lock-string-face) 1652 1653 (fontified t face font-lock-string-face) 1653 1654 (fontified t face font-lock-string-face) 1654 1662 (fontified t) 1662 1698 (fontified t)) . 1) (undo-tree-id196 . -866) (undo-tree-id197 . -189) (undo-tree-id198 . -674) (undo-tree-id199 . -1523) (undo-tree-id200 . -841) (undo-tree-id201 . -866) (undo-tree-id202 . -1453) (undo-tree-id203 . -1457) (undo-tree-id204 . -1457) (undo-tree-id205 . -1457) (undo-tree-id206 . -1457) 1524) nil (26109 5869 604860 214000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . -1548) (undo-tree-id207 . -1) (#("
" 0 1 (fontified t face font-lock-string-face)) . -1549) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 1550 (t 26109 5869 784209 606000)) nil (26109 5879 956877 718000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 1548) (#(" " 0 1 (fontified t face font-lock-string-face)) . 1548) (#(" " 0 1 (fontified t face font-lock-string-face)) . 1548) (#(" " 0 1 (fontified t face font-lock-string-face)) . 1548)) nil (26109 5879 956864 513000) 0 nil])
([nil nil ((1548 . 1549)) nil (26109 5879 956859 435000) 0 nil])
([nil nil ((1580 . 1584) (t 26109 5880 87575 941000)) nil (26109 5897 638580 191000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1580) (undo-tree-id212 . -1) (#("+" 0 1 (fontified t)) . -1581) (undo-tree-id213 . -1) (#(" " 0 1 (fontified t)) . -1582) (undo-tree-id214 . -1) (#("1" 0 1 (fontified t)) . -1583) (undo-tree-id215 . -1) 1584) nil (26109 5897 638578 355000) 0 nil])
([nil nil ((1580 . 1582)) nil (26109 5897 638572 992000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -1580) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -1581) (undo-tree-id211 . -1) 1582) nil (26109 5897 638570 848000) 0 nil])
([nil nil ((1580 . 1584)) nil (26109 5897 638556 951000) 0 nil])
([nil nil ((1605 . 1606) (t 26109 5897 775205 709000)) nil (26109 5925 790048 30000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1605) (undo-tree-id216 . -1) 1606) nil (26109 5925 790100 904000) 0 nil])
([nil nil ((1454 . 1466) (#("    " 0 4 (fontified t)) . 1454) (undo-tree-id247 . -4)) nil (26109 5931 111180 132000) 0 nil] [nil nil ((1605 . 1610)) ((#("
    " 0 5 (fontified t)) . 1605) (undo-tree-id217 . -5) (undo-tree-id218 . -1)) (26109 5925 790013 520000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1462) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) 1466) nil (26109 5931 111177 567000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -1458) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) 1462) nil (26109 5931 111165 422000) 0 nil])
([nil nil ((1453 . 1466)) nil (26109 5931 111143 885000) 0 nil])
([nil nil ((1466 . 1473)) nil (26109 5931 111139 688000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1462) 1473 (t 26109 5931 280401 629000)) nil (26109 5933 383612 308000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1458) (undo-tree-id248 . -4) 1469) nil (26109 5933 383607 184000) 0 nil])
([nil nil ((#("# # Q4

# Hexes = [i.strip() for i in open(\"hexes.txt\").readlines()]
# Fload = []  # list of words by letter
# for i in Hexes:
#     for case in (65, 97):  # we gonna test all dem chars :D
#         for j in range(26):
#             Fload.append([chr(case + j), xorz(i, chr(case + j) * len(Hexes))])
# guesses = []

# \"\"\"for i in range(len(Fload)):
#     if checkWords(Fload[i][1])[0] > 0:
#         print (i, Fload[i][0])
#         print checkWords(Fload[i][1]), Fload[i][1]
#         guesses.append([i, Fload[i][1], Fload[i][0]])
# for i in guesses:
#     print i[1]
#     print i[2]
# \"\"\"
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 7 (fontified t face font-lock-comment-face) 7 8 (fontified t) 8 10 (fontified t face font-lock-comment-delimiter-face) 10 69 (fontified t face font-lock-comment-face) 69 71 (fontified t face font-lock-comment-delimiter-face) 71 109 (fontified t face font-lock-comment-face) 109 111 (fontified t face font-lock-comment-delimiter-face) 111 127 (fontified t face font-lock-comment-face) 127 133 (fontified t face font-lock-comment-delimiter-face) 133 189 (fontified t face font-lock-comment-face) 189 199 (fontified t face font-lock-comment-delimiter-face) 199 219 (fontified t face font-lock-comment-face) 219 233 (fontified t face font-lock-comment-delimiter-face) 233 300 (fontified t face font-lock-comment-face) 300 302 (fontified t face font-lock-comment-delimiter-face) 302 315 (fontified t face font-lock-comment-face) 315 316 (fontified t) 316 318 (fontified t face font-lock-comment-delimiter-face) 318 349 (fontified t face font-lock-comment-face) 349 355 (fontified t face font-lock-comment-delimiter-face) 355 390 (fontified t face font-lock-comment-face) 390 400 (fontified t face font-lock-comment-delimiter-face) 400 423 (fontified t face font-lock-comment-face) 423 433 (fontified t face font-lock-comment-delimiter-face) 433 476 (fontified t face font-lock-comment-face) 476 486 (fontified t face font-lock-comment-delimiter-face) 486 532 (fontified t face font-lock-comment-face) 532 534 (fontified t face font-lock-comment-delimiter-face) 534 552 (fontified t face font-lock-comment-face) 552 558 (fontified t face font-lock-comment-delimiter-face) 558 569 (fontified t face font-lock-comment-face) 569 575 (fontified t face font-lock-comment-delimiter-face) 575 586 (fontified t face font-lock-comment-face) 586 588 (fontified t face font-lock-comment-delimiter-face) 588 592 (fontified t face font-lock-comment-face)) . 1) (undo-tree-id252 . -592) (undo-tree-id253 . -189) (undo-tree-id254 . -592) (t 26109 5933 696488 12000)) nil (26109 8087 736585 588000) 0 nil])
([nil current ((1 . 1156) (#("
from basic_functions import *
from challenge_2 import *
from challenge_3 import *

if __name__ == \"__main__\":
    strings_file = open(\"4.txt\")
    hexed_lines = strings_file.read().split(\"\\n\")
    strings_file.close()
    lines = [decode_hex(line) for line in hexed_lines]

    # Key guesses for each line, and also the character frequency of
    # the xored string.
    key_guesses = [break_single_char_xor(lines[i]) for i in range(len(lines))]
    line_guesses = [
        single_char_xor(lines[i], key_guesses[i][0]) for i in range(len(lines))
    ]

    the_key = b\"\"
    max_freq = 0.0
    the_index = 0

    for i in range(len(key_guesses)):
        # if not line_guesses[i].isascii():
        #     pass
        if key_guesses[i][1] > max_freq:
            max_freq = key_guesses[i][1]
            the_key = key_guesses[i][0]
            the_index = i

    print()
    print(
        \"The encrypted message is:\",
        hexed_lines[the_index],
        \"which is the\",
        (str(the_index + 1) + \"th line\"),
    )
    print(\"The key is:\", the_key.decode(encoding))
    print(\"The original message is:\", line_guesses[the_index].decode(encoding))
" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 22 (fontified t) 22 28 (fontified t face font-lock-keyword-face) 28 31 (fontified t) 31 35 (fontified t face font-lock-keyword-face) 35 48 (fontified t) 48 54 (fontified t face font-lock-keyword-face) 54 57 (fontified t) 57 61 (fontified t face font-lock-keyword-face) 61 74 (fontified t) 74 80 (fontified t face font-lock-keyword-face) 80 84 (fontified t) 84 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 95 (fontified t face font-lock-builtin-face) 95 99 (fontified t) 99 109 (fontified t face font-lock-string-face) 109 130 (fontified t) 130 134 (fontified t face font-lock-builtin-face) 134 135 (fontified t) 135 142 (fontified t face font-lock-string-face) 142 188 (fontified t) 188 192 (fontified t face font-lock-string-face) 192 249 (fontified t) 249 252 (fontified t face font-lock-keyword-face) 252 258 (fontified t) 258 260 (fontified t face font-lock-keyword-face) 260 279 (fontified t) 279 281 (fontified t face font-lock-comment-delimiter-face) 281 344 (fontified t face font-lock-comment-face) 344 348 (fontified t) 348 350 (fontified t face font-lock-comment-delimiter-face) 350 368 (fontified t face font-lock-comment-face) 368 419 (fontified t) 419 422 (fontified t face font-lock-keyword-face) 422 425 (fontified t) 425 427 (fontified t face font-lock-keyword-face) 427 428 (fontified t) 428 433 (fontified t face font-lock-builtin-face) 433 434 (fontified t) 434 437 (fontified t face font-lock-builtin-face) 437 521 (fontified t) 521 524 (fontified t face font-lock-keyword-face) 524 527 (fontified t) 527 529 (fontified t face font-lock-keyword-face) 529 530 (fontified t) 530 535 (fontified t face font-lock-builtin-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-builtin-face) 539 570 (fontified t) 570 572 (fontified t face font-lock-string-face) 572 615 (fontified t) 615 618 (fontified t face font-lock-keyword-face) 618 621 (fontified t) 621 623 (fontified t face font-lock-keyword-face) 623 624 (fontified t) 624 629 (fontified t face font-lock-builtin-face) 629 630 (fontified t) 630 633 (fontified t face font-lock-builtin-face) 633 657 (fontified t) 657 659 (fontified t face font-lock-comment-delimiter-face) 659 693 (fontified t face font-lock-comment-face) 693 701 (fontified t) 701 707 (fontified t face font-lock-comment-delimiter-face) 707 712 (fontified t face font-lock-comment-face) 712 720 (fontified t) 720 722 (fontified t face font-lock-keyword-face) 722 860 (fontified t) 860 861 (fontified t) 861 865 (fontified t) 865 870 (fontified t face font-lock-builtin-face) 870 872 (fontified t) 872 873 (fontified t) 873 877 (fontified t) 877 882 (fontified t face font-lock-builtin-face) 882 884 (fontified t) 884 892 (fontified t) 892 919 (fontified t face font-lock-string-face) 919 953 (fontified t) 953 961 (fontified t) 961 975 (fontified t face font-lock-string-face) 975 977 (fontified t) 977 986 (fontified t) 986 989 (fontified t face font-lock-builtin-face) 989 1007 (fontified t) 1007 1016 (fontified t face font-lock-string-face) 1016 1019 (fontified t) 1019 1025 (fontified t) 1025 1029 (fontified t) 1029 1034 (fontified t face font-lock-builtin-face) 1034 1035 (fontified t) 1035 1048 (fontified t face font-lock-string-face) 1048 1080 (fontified t) 1080 1085 (fontified t face font-lock-builtin-face) 1085 1086 (fontified t) 1086 1108 (fontified t face font-lock-string-face) 1108 1112 (fontified t face font-lock-string-face) 1112 1156 (fontified t)) . 1) (undo-tree-id249 . -872) (undo-tree-id250 . -144) (undo-tree-id251 . -648)) nil (26109 8087 736578 45000) 0 nil])
nil
